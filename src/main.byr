-- funcionesArraysRecords

--With                        -- To compile in Ada
--Ada.Text_IO;                -- To compile in Ada

procedure main is

   -- Use Ada.Text_IO;        -- To compile in Ada

   type Registro is 
      record
         Campo1: Integer;
         Campo2: Integer;         
      end record;
   
   -- type ArrayRegistros is array(0..3) of Registro;    -- To compile in Ada
   type ArrayRegistros is array(4) of Registro;          -- Byron style
            
   function RegistroCero return Registro is
      aux: Registro;
   begin
      aux.Campo1 :=0;
      aux.Campo2 :=0;
      
      return aux;
   end RegistroCero;
   
   function InicializarArrayRegistros return ArrayRegistros is
      i : Integer := 0;
      auxArray: ArrayRegistros;
   begin
            
      while i < ArrayRegistros'Length loop               -- ¡Atributo de tipo!
         auxArray[i]:=registroCero;
         i:=i+1;
      end loop;
      
      return auxArray;      
   end InicializarArrayRegistros;
   
   procedure ImprimirRegistro(auxRegistro: in Registro) is
   begin
      Put("  Campo1: "); 
      -- Put(Integer'Image(auxRegistro.Campo1));         -- To compile in Ada
      Put(auxRegistro.Campo1);                           -- Byron style, explicit casting
      New_Line;
      
      Put("  Campo2: "); 
      -- Put(Integer'Image(auxRegistro.Campo2));         -- To compile in Ada
      Put(auxRegistro.Campo2);                           -- Byron style, explicit casting
      New_Line;
   end ImprimirRegistro;
   
   procedure ImprimirArrayRegistros (auxArrayRegistros: in ArrayRegistros) is
      i : Integer := 0;
   begin
            
      while i < auxArrayRegistros'Length loop            -- ¡Atributo de variable!
         Put("Registro ");
         -- Put(Integer'Image(i));         -- To compile in Ada
         Put(i);                           -- Byron style, explicit casting
         Put(":");
         New_Line;
         
         imprimirRegistro(auxArrayRegistros(i));         i:=i+1;
      end loop;
        
   end ImprimirArrayRegistros;
   
   auxArray: ArrayRegistros;

begin
  Put("Este es el registro 0: ");
  New_Line;
  ImprimirRegistro(registroCero);
  New_Line; New_Line;
   
  Put("Aux Array sin inicializar: ");
  New_Line;
  ImprimirArrayRegistros(auxArray);
  New_Line; New_Line;
   
  Put("Aux Array inicializado: ");
  New_Line;
  auxArray:=InicializarArrayRegistros; 
  ImprimirArrayRegistros(auxArray);
  New_Line; New_Line; 
   
  null;

end main;