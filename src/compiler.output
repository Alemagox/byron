Terminals unused in grammar

   DO
   PUT
   GET
   LENGTH
   NEW_LINE
   CONCAT


Grammar

    0 $accept: main $end

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    2 actual_parameter_list: expression expression_list

    3 actual_parameter_part: '(' ')'
    4                      | '(' actual_parameter_list ')'

    5 array_type_definition: ARRAY '(' expression expression_list ')' OF type_definition

    6 assign_expression: ASSIGNMENT_OP expression
    7                  | %empty

    8 assignment_statement: variable ASSIGNMENT_OP expression ';'

    9 binary_adding_list: binary_adding_operator term
   10                   | binary_adding_operator term binary_adding_list

   11 binary_adding_operator: '+'
   12                       | '-'

   13 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'

   14 case_statement_alternative: WHEN discrete_choice_list ARROW sequence_of_statements

   15 case_statement_alternative_list: case_statement_alternative_list case_statement_alternative
   16                                | %empty

   17 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression ';'

   18 component_list: component_list component_item
   19               | %empty

   20 compound_statement: if_statement
   21                   | loop_statement
   22                   | case_statement
   23                   | assignment_statement

   24 constant: CONSTANT
   25         | %empty

   26 declarative_item: type_declaration
   27                 | object_declaration
   28                 | subprogram_specification ';'
   29                 | subprogram_body

   30 declarative_part: declarative_item declarative_part
   31                 | %empty

   32 discrete_choice: expression
   33                | INTEGER_TYPE
   34                | OTHERS

   35 discrete_choice_list: discrete_choice_list '|' discrete_choice
   36                     | discrete_choice
   37                     | %empty

   38 elsif_list: elsif_list elsif_statement
   39           | %empty

   40 else_statement: ELSE expression THEN sequence_of_statements
   41               | %empty

   42 elsif_statement: ELSIF expression THEN sequence_of_statements

   43 expression: relation relation_list

   44 expression_list: ',' expression expression_list
   45                | %empty

   46 factor: primary
   47       | primary POWER_OP primary
   48       | NOT primary

   49 formal_part: '(' parameter_specification parameter_specification_list ')'
   50            | %empty

   51 function_call: IDENTIFIER actual_parameter_part

   52 function_specification: FUNCTION IDENTIFIER formal_part RETURN type_definition

   53 identifier_list: identifier_list ',' IDENTIFIER
   54                | IDENTIFIER
   55                | %empty

   56 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'

   57 indexed_component: IDENTIFIER '[' expression expression_list ']'

   58 logical_operator: AND
   59                 | OR

   60 loop_statement: WHILE expression LOOP sequence_of_statements END LOOP ';'

   61 mode: OUT
   62     | IN OUT
   63     | %empty

   64 multiplying_operator: '*'
   65                     | '/'

   66 null_statement: NULL_ ';'

   67 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'

   68 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition assign_expression

   69 parameter_specification_list: ';' parameter_specification parameter_specification_list
   70                             | %empty

   71 primary: INTEGER_LITERAL
   72        | FLOAT_LITERAL
   73        | CHARACTER_LITERAL
   74        | BOOLEAN_LITERAL
   75        | NULL_
   76        | STRING_LITERAL
   77        | variable
   78        | function_call
   79        | '(' expression ')'

   80 procedure_call_statement: IDENTIFIER actual_parameter_part ';'

   81 procedure_specification: PROCEDURE IDENTIFIER formal_part

   82 record_type_definition: RECORD component_list END RECORD

   83 relation: simple_expression
   84         | simple_expression relational_operator simple_expression

   85 relation_list: logical_operator relation relation_list
   86              | %empty

   87 relational_operator: '='
   88                    | '<'
   89                    | '>'
   90                    | NOT_EQUAL_OP
   91                    | LESSER_EQUAL_OP
   92                    | GREATER_EQUAL_OP

   93 return_statement: RETURN ';'
   94                 | RETURN simple_expression ';'

   95 selected_component: variable '.' IDENTIFIER

   96 sequence_of_statements: statement
   97                       | statement sequence_of_statements

   98 simple_expression: unary_adding_operator term binary_adding_list
   99                  | unary_adding_operator term
  100                  | term binary_adding_list
  101                  | term

  102 simple_statement: null_statement
  103                 | return_statement
  104                 | procedure_call_statement

  105 statement: simple_statement
  106          | compound_statement

  107 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  108                | subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END ';'

  109 subprogram_specification: procedure_specification
  110                         | function_specification

  111 term: factor
  112     | multiplying_operator term

  113 type_declaration: TYPE IDENTIFIER IS type_definition ';'

  114 type_definition: INTEGER_TYPE
  115                | REAL_TYPE
  116                | CHARACTER_TYPE
  117                | BOOLEAN_TYPE
  118                | array_type_definition
  119                | record_type_definition

  120 unary_adding_operator: '+'
  121                      | '-'

  122 variable: IDENTIFIER
  123         | indexed_component
  124         | selected_component


Terminals, with rules where they appear

$end (0) 0
'(' (40) 3 4 5 49 79
')' (41) 3 4 5 49 79
'*' (42) 64
'+' (43) 11 120
',' (44) 44 53
'-' (45) 12 121
'.' (46) 95
'/' (47) 65
':' (58) 17 67 68
';' (59) 1 8 13 17 28 56 60 66 67 69 80 93 94 107 108 113
'<' (60) 88
'=' (61) 87
'>' (62) 89
'[' (91) 57
']' (93) 57
'|' (124) 35
error (256)
AND (258) 58
ARRAY (259) 5
BEGIN_ (260) 1 107 108
CASE (261) 13
CONSTANT (262) 24
DO (263)
ELSE (264) 40
ELSIF (265) 42
END (266) 1 13 56 60 82 107 108
FUNCTION (267) 52
IF (268) 56
IDENTIFIER (269) 1 13 17 51 52 53 54 57 67 68 80 81 95 107 113 122
IN (270) 62
IS (271) 1 13 107 108 113
LOOP (272) 60
NOT (273) 48
NULL_ (274) 66 75
OF (275) 5
OR (276) 59
OTHERS (277) 34
OUT (278) 61 62
PROCEDURE (279) 1 81
RECORD (280) 82
RETURN (281) 52 93 94
THEN (282) 40 42 56
TYPE (283) 113
WHEN (284) 14
WHILE (285) 60
ARROW (286) 14
ASSIGNMENT_OP (287) 6 8
NOT_EQUAL_OP (288) 90
GREATER_EQUAL_OP (289) 92
LESSER_EQUAL_OP (290) 91
POWER_OP (291) 47
PUT (292)
GET (293)
LENGTH (294)
NEW_LINE (295)
CONCAT (296)
INTEGER_TYPE (297) 33 114
REAL_TYPE (298) 115
CHARACTER_TYPE (299) 116
BOOLEAN_TYPE (300) 117
INTEGER_LITERAL (301) 71
FLOAT_LITERAL (302) 72
CHARACTER_LITERAL (303) 73
STRING_LITERAL (304) 76
BOOLEAN_LITERAL (305) 74


Nonterminals, with rules where they appear

$accept (67)
    on left: 0
main (68)
    on left: 1, on right: 0
actual_parameter_list (69)
    on left: 2, on right: 4
actual_parameter_part (70)
    on left: 3 4, on right: 51 80
array_type_definition (71)
    on left: 5, on right: 118
assign_expression (72)
    on left: 6 7, on right: 17 67 68
assignment_statement (73)
    on left: 8, on right: 23
binary_adding_list (74)
    on left: 9 10, on right: 10 98 100
binary_adding_operator (75)
    on left: 11 12, on right: 9 10
case_statement (76)
    on left: 13, on right: 22
case_statement_alternative (77)
    on left: 14, on right: 15
case_statement_alternative_list (78)
    on left: 15 16, on right: 13 15
component_item (79)
    on left: 17, on right: 18
component_list (80)
    on left: 18 19, on right: 18 82
compound_statement (81)
    on left: 20 21 22 23, on right: 106
constant (82)
    on left: 24 25, on right: 67
declarative_item (83)
    on left: 26 27 28 29, on right: 30
declarative_part (84)
    on left: 30 31, on right: 1 30 107 108
discrete_choice (85)
    on left: 32 33 34, on right: 35 36
discrete_choice_list (86)
    on left: 35 36 37, on right: 14 35
elsif_list (87)
    on left: 38 39, on right: 38 56
else_statement (88)
    on left: 40 41, on right: 56
elsif_statement (89)
    on left: 42, on right: 38
expression (90)
    on left: 43, on right: 2 5 6 8 32 40 42 44 56 57 60 79
expression_list (91)
    on left: 44 45, on right: 2 5 44 57
factor (92)
    on left: 46 47 48, on right: 111
formal_part (93)
    on left: 49 50, on right: 52 81
function_call (94)
    on left: 51, on right: 78
function_specification (95)
    on left: 52, on right: 110
identifier_list (96)
    on left: 53 54 55, on right: 17 53 67 68
if_statement (97)
    on left: 56, on right: 20
indexed_component (98)
    on left: 57, on right: 123
logical_operator (99)
    on left: 58 59, on right: 85
loop_statement (100)
    on left: 60, on right: 21
mode (101)
    on left: 61 62 63, on right: 68
multiplying_operator (102)
    on left: 64 65, on right: 112
null_statement (103)
    on left: 66, on right: 102
object_declaration (104)
    on left: 67, on right: 27
parameter_specification (105)
    on left: 68, on right: 49 69
parameter_specification_list (106)
    on left: 69 70, on right: 49 69
primary (107)
    on left: 71 72 73 74 75 76 77 78 79, on right: 46 47 48
procedure_call_statement (108)
    on left: 80, on right: 104
procedure_specification (109)
    on left: 81, on right: 109
record_type_definition (110)
    on left: 82, on right: 119
relation (111)
    on left: 83 84, on right: 43 85
relation_list (112)
    on left: 85 86, on right: 43 85
relational_operator (113)
    on left: 87 88 89 90 91 92, on right: 84
return_statement (114)
    on left: 93 94, on right: 103
selected_component (115)
    on left: 95, on right: 124
sequence_of_statements (116)
    on left: 96 97, on right: 1 14 40 42 56 60 97 107 108
simple_expression (117)
    on left: 98 99 100 101, on right: 83 84 94
simple_statement (118)
    on left: 102 103 104, on right: 105
statement (119)
    on left: 105 106, on right: 96 97
subprogram_body (120)
    on left: 107 108, on right: 29
subprogram_specification (121)
    on left: 109 110, on right: 28 107 108
term (122)
    on left: 111 112, on right: 9 10 98 99 100 101 112
type_declaration (123)
    on left: 113, on right: 26
type_definition (124)
    on left: 114 115 116 117 118 119, on right: 5 17 52 67 68 113
unary_adding_operator (125)
    on left: 120 121, on right: 98 99
variable (126)
    on left: 122 123 124, on right: 8 77 95


State 0

    0 $accept: . main $end
    1 main: . PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    PROCEDURE  shift, and go to state 1

    main  go to state 2


State 1

    1 main: PROCEDURE . IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 3


State 2

    0 $accept: main . $end

    $end  shift, and go to state 4


State 3

    1 main: PROCEDURE IDENTIFIER . IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    IS  shift, and go to state 5


State 4

    0 $accept: main $end .

    $default  accept


State 5

    1 main: PROCEDURE IDENTIFIER IS . declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
   26 declarative_item: . type_declaration
   27                 | . object_declaration
   28                 | . subprogram_specification ';'
   29                 | . subprogram_body
   30 declarative_part: . declarative_item declarative_part
   31                 | .  [BEGIN_]
   52 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   67 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   81 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  107 subprogram_body: . subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  108                | . subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END ';'
  109 subprogram_specification: . procedure_specification
  110                         | . function_specification
  113 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    PROCEDURE   shift, and go to state 8
    TYPE        shift, and go to state 9

    $default  reduce using rule 31 (declarative_part)

    declarative_item          go to state 10
    declarative_part          go to state 11
    function_specification    go to state 12
    object_declaration        go to state 13
    procedure_specification   go to state 14
    subprogram_body           go to state 15
    subprogram_specification  go to state 16
    type_declaration          go to state 17


State 6

   52 function_specification: FUNCTION . IDENTIFIER formal_part RETURN type_definition

    IDENTIFIER  shift, and go to state 18


State 7

   53 identifier_list: . identifier_list ',' IDENTIFIER
   54                | . IDENTIFIER
   55                | .  [':', ',']
   67 object_declaration: IDENTIFIER . identifier_list ':' constant type_definition assign_expression ';'

    IDENTIFIER  shift, and go to state 19

    $default  reduce using rule 55 (identifier_list)

    identifier_list  go to state 20


State 8

   81 procedure_specification: PROCEDURE . IDENTIFIER formal_part

    IDENTIFIER  shift, and go to state 21


State 9

  113 type_declaration: TYPE . IDENTIFIER IS type_definition ';'

    IDENTIFIER  shift, and go to state 22


State 10

   26 declarative_item: . type_declaration
   27                 | . object_declaration
   28                 | . subprogram_specification ';'
   29                 | . subprogram_body
   30 declarative_part: . declarative_item declarative_part
   30                 | declarative_item . declarative_part
   31                 | .  [BEGIN_]
   52 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   67 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   81 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  107 subprogram_body: . subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  108                | . subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END ';'
  109 subprogram_specification: . procedure_specification
  110                         | . function_specification
  113 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    PROCEDURE   shift, and go to state 8
    TYPE        shift, and go to state 9

    $default  reduce using rule 31 (declarative_part)

    declarative_item          go to state 10
    declarative_part          go to state 23
    function_specification    go to state 12
    object_declaration        go to state 13
    procedure_specification   go to state 14
    subprogram_body           go to state 15
    subprogram_specification  go to state 16
    type_declaration          go to state 17


State 11

    1 main: PROCEDURE IDENTIFIER IS declarative_part . BEGIN_ sequence_of_statements END IDENTIFIER ';'

    BEGIN_  shift, and go to state 24


State 12

  110 subprogram_specification: function_specification .

    $default  reduce using rule 110 (subprogram_specification)


State 13

   27 declarative_item: object_declaration .

    $default  reduce using rule 27 (declarative_item)


State 14

  109 subprogram_specification: procedure_specification .

    $default  reduce using rule 109 (subprogram_specification)


State 15

   29 declarative_item: subprogram_body .

    $default  reduce using rule 29 (declarative_item)


State 16

   28 declarative_item: subprogram_specification . ';'
  107 subprogram_body: subprogram_specification . IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  108                | subprogram_specification . IS declarative_part BEGIN_ sequence_of_statements END ';'

    IS   shift, and go to state 25
    ';'  shift, and go to state 26


State 17

   26 declarative_item: type_declaration .

    $default  reduce using rule 26 (declarative_item)


State 18

   49 formal_part: . '(' parameter_specification parameter_specification_list ')'
   50            | .  [RETURN]
   52 function_specification: FUNCTION IDENTIFIER . formal_part RETURN type_definition

    '('  shift, and go to state 27

    $default  reduce using rule 50 (formal_part)

    formal_part  go to state 28


State 19

   54 identifier_list: IDENTIFIER .

    $default  reduce using rule 54 (identifier_list)


State 20

   53 identifier_list: identifier_list . ',' IDENTIFIER
   67 object_declaration: IDENTIFIER identifier_list . ':' constant type_definition assign_expression ';'

    ':'  shift, and go to state 29
    ','  shift, and go to state 30


State 21

   49 formal_part: . '(' parameter_specification parameter_specification_list ')'
   50            | .  [IS, ';']
   81 procedure_specification: PROCEDURE IDENTIFIER . formal_part

    '('  shift, and go to state 27

    $default  reduce using rule 50 (formal_part)

    formal_part  go to state 31


State 22

  113 type_declaration: TYPE IDENTIFIER . IS type_definition ';'

    IS  shift, and go to state 32


State 23

   30 declarative_part: declarative_item declarative_part .

    $default  reduce using rule 30 (declarative_part)


State 24

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ . sequence_of_statements END IDENTIFIER ';'
    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   66 null_statement: . NULL_ ';'
   80 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   93 return_statement: . RETURN ';'
   94                 | . RETURN simple_expression ';'
   95 selected_component: . variable '.' IDENTIFIER
   96 sequence_of_statements: . statement
   97                       | . statement sequence_of_statements
  102 simple_statement: . null_statement
  103                 | . return_statement
  104                 | . procedure_call_statement
  105 statement: . simple_statement
  106          | . compound_statement
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    null_statement            go to state 45
    procedure_call_statement  go to state 46
    return_statement          go to state 47
    selected_component        go to state 48
    sequence_of_statements    go to state 49
    simple_statement          go to state 50
    statement                 go to state 51
    variable                  go to state 52


State 25

   26 declarative_item: . type_declaration
   27                 | . object_declaration
   28                 | . subprogram_specification ';'
   29                 | . subprogram_body
   30 declarative_part: . declarative_item declarative_part
   31                 | .  [BEGIN_]
   52 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   67 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   81 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  107 subprogram_body: . subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  107                | subprogram_specification IS . declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  108                | . subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END ';'
  108                | subprogram_specification IS . declarative_part BEGIN_ sequence_of_statements END ';'
  109 subprogram_specification: . procedure_specification
  110                         | . function_specification
  113 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    PROCEDURE   shift, and go to state 8
    TYPE        shift, and go to state 9

    $default  reduce using rule 31 (declarative_part)

    declarative_item          go to state 10
    declarative_part          go to state 53
    function_specification    go to state 12
    object_declaration        go to state 13
    procedure_specification   go to state 14
    subprogram_body           go to state 15
    subprogram_specification  go to state 16
    type_declaration          go to state 17


State 26

   28 declarative_item: subprogram_specification ';' .

    $default  reduce using rule 28 (declarative_item)


State 27

   49 formal_part: '(' . parameter_specification parameter_specification_list ')'
   68 parameter_specification: . IDENTIFIER identifier_list ':' mode type_definition assign_expression

    IDENTIFIER  shift, and go to state 54

    parameter_specification  go to state 55


State 28

   52 function_specification: FUNCTION IDENTIFIER formal_part . RETURN type_definition

    RETURN  shift, and go to state 56


State 29

   24 constant: . CONSTANT
   25         | .  [ARRAY, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]
   67 object_declaration: IDENTIFIER identifier_list ':' . constant type_definition assign_expression ';'

    CONSTANT  shift, and go to state 57

    $default  reduce using rule 25 (constant)

    constant  go to state 58


State 30

   53 identifier_list: identifier_list ',' . IDENTIFIER

    IDENTIFIER  shift, and go to state 59


State 31

   81 procedure_specification: PROCEDURE IDENTIFIER formal_part .

    $default  reduce using rule 81 (procedure_specification)


State 32

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   82 record_type_definition: . RECORD component_list END RECORD
  113 type_declaration: TYPE IDENTIFIER IS . type_definition ';'
  114 type_definition: . INTEGER_TYPE
  115                | . REAL_TYPE
  116                | . CHARACTER_TYPE
  117                | . BOOLEAN_TYPE
  118                | . array_type_definition
  119                | . record_type_definition

    ARRAY           shift, and go to state 60
    RECORD          shift, and go to state 61
    INTEGER_TYPE    shift, and go to state 62
    REAL_TYPE       shift, and go to state 63
    CHARACTER_TYPE  shift, and go to state 64
    BOOLEAN_TYPE    shift, and go to state 65

    array_type_definition   go to state 66
    record_type_definition  go to state 67
    type_definition         go to state 68


State 33

   13 case_statement: CASE . IDENTIFIER IS case_statement_alternative_list END CASE ';'

    IDENTIFIER  shift, and go to state 69


State 34

   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   56 if_statement: IF . expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   83 relation: . simple_expression
   84         | . simple_expression relational_operator simple_expression
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    expression             go to state 83
    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    relation               go to state 88
    selected_component     go to state 48
    simple_expression      go to state 89
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 35

    3 actual_parameter_part: . '(' ')'
    4                      | . '(' actual_parameter_list ')'
   57 indexed_component: IDENTIFIER . '[' expression expression_list ']'
   80 procedure_call_statement: IDENTIFIER . actual_parameter_part ';'
  122 variable: IDENTIFIER .  [ASSIGNMENT_OP, '.']

    '('  shift, and go to state 93
    '['  shift, and go to state 94

    $default  reduce using rule 122 (variable)

    actual_parameter_part  go to state 95


State 36

   66 null_statement: NULL_ . ';'

    ';'  shift, and go to state 96


State 37

   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   93 return_statement: RETURN . ';'
   94                 | RETURN . simple_expression ';'
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    ';'                shift, and go to state 97
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    selected_component     go to state 48
    simple_expression      go to state 98
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 38

   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: WHILE . expression LOOP sequence_of_statements END LOOP ';'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   83 relation: . simple_expression
   84         | . simple_expression relational_operator simple_expression
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    expression             go to state 99
    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    relation               go to state 88
    selected_component     go to state 48
    simple_expression      go to state 89
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 39

   23 compound_statement: assignment_statement .

    $default  reduce using rule 23 (compound_statement)


State 40

   22 compound_statement: case_statement .

    $default  reduce using rule 22 (compound_statement)


State 41

  106 statement: compound_statement .

    $default  reduce using rule 106 (statement)


State 42

   20 compound_statement: if_statement .

    $default  reduce using rule 20 (compound_statement)


State 43

  123 variable: indexed_component .

    $default  reduce using rule 123 (variable)


State 44

   21 compound_statement: loop_statement .

    $default  reduce using rule 21 (compound_statement)


State 45

  102 simple_statement: null_statement .

    $default  reduce using rule 102 (simple_statement)


State 46

  104 simple_statement: procedure_call_statement .

    $default  reduce using rule 104 (simple_statement)


State 47

  103 simple_statement: return_statement .

    $default  reduce using rule 103 (simple_statement)


State 48

  124 variable: selected_component .

    $default  reduce using rule 124 (variable)


State 49

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements . END IDENTIFIER ';'

    END  shift, and go to state 100


State 50

  105 statement: simple_statement .

    $default  reduce using rule 105 (statement)


State 51

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   66 null_statement: . NULL_ ';'
   80 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   93 return_statement: . RETURN ';'
   94                 | . RETURN simple_expression ';'
   95 selected_component: . variable '.' IDENTIFIER
   96 sequence_of_statements: . statement
   96                       | statement .  [ELSE, ELSIF, END, WHEN]
   97                       | . statement sequence_of_statements
   97                       | statement . sequence_of_statements
  102 simple_statement: . null_statement
  103                 | . return_statement
  104                 | . procedure_call_statement
  105 statement: . simple_statement
  106          | . compound_statement
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    $default  reduce using rule 96 (sequence_of_statements)

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    null_statement            go to state 45
    procedure_call_statement  go to state 46
    return_statement          go to state 47
    selected_component        go to state 48
    sequence_of_statements    go to state 101
    simple_statement          go to state 50
    statement                 go to state 51
    variable                  go to state 52


State 52

    8 assignment_statement: variable . ASSIGNMENT_OP expression ';'
   95 selected_component: variable . '.' IDENTIFIER

    ASSIGNMENT_OP  shift, and go to state 102
    '.'            shift, and go to state 103


State 53

  107 subprogram_body: subprogram_specification IS declarative_part . BEGIN_ sequence_of_statements END IDENTIFIER ';'
  108                | subprogram_specification IS declarative_part . BEGIN_ sequence_of_statements END ';'

    BEGIN_  shift, and go to state 104


State 54

   53 identifier_list: . identifier_list ',' IDENTIFIER
   54                | . IDENTIFIER
   55                | .  [':', ',']
   68 parameter_specification: IDENTIFIER . identifier_list ':' mode type_definition assign_expression

    IDENTIFIER  shift, and go to state 19

    $default  reduce using rule 55 (identifier_list)

    identifier_list  go to state 105


State 55

   49 formal_part: '(' parameter_specification . parameter_specification_list ')'
   69 parameter_specification_list: . ';' parameter_specification parameter_specification_list
   70                             | .  [')']

    ';'  shift, and go to state 106

    $default  reduce using rule 70 (parameter_specification_list)

    parameter_specification_list  go to state 107


State 56

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   52 function_specification: FUNCTION IDENTIFIER formal_part RETURN . type_definition
   82 record_type_definition: . RECORD component_list END RECORD
  114 type_definition: . INTEGER_TYPE
  115                | . REAL_TYPE
  116                | . CHARACTER_TYPE
  117                | . BOOLEAN_TYPE
  118                | . array_type_definition
  119                | . record_type_definition

    ARRAY           shift, and go to state 60
    RECORD          shift, and go to state 61
    INTEGER_TYPE    shift, and go to state 62
    REAL_TYPE       shift, and go to state 63
    CHARACTER_TYPE  shift, and go to state 64
    BOOLEAN_TYPE    shift, and go to state 65

    array_type_definition   go to state 66
    record_type_definition  go to state 67
    type_definition         go to state 108


State 57

   24 constant: CONSTANT .

    $default  reduce using rule 24 (constant)


State 58

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   67 object_declaration: IDENTIFIER identifier_list ':' constant . type_definition assign_expression ';'
   82 record_type_definition: . RECORD component_list END RECORD
  114 type_definition: . INTEGER_TYPE
  115                | . REAL_TYPE
  116                | . CHARACTER_TYPE
  117                | . BOOLEAN_TYPE
  118                | . array_type_definition
  119                | . record_type_definition

    ARRAY           shift, and go to state 60
    RECORD          shift, and go to state 61
    INTEGER_TYPE    shift, and go to state 62
    REAL_TYPE       shift, and go to state 63
    CHARACTER_TYPE  shift, and go to state 64
    BOOLEAN_TYPE    shift, and go to state 65

    array_type_definition   go to state 66
    record_type_definition  go to state 67
    type_definition         go to state 109


State 59

   53 identifier_list: identifier_list ',' IDENTIFIER .

    $default  reduce using rule 53 (identifier_list)


State 60

    5 array_type_definition: ARRAY . '(' expression expression_list ')' OF type_definition

    '('  shift, and go to state 110


State 61

   18 component_list: . component_list component_item
   19               | .
   82 record_type_definition: RECORD . component_list END RECORD

    $default  reduce using rule 19 (component_list)

    component_list  go to state 111


State 62

  114 type_definition: INTEGER_TYPE .

    $default  reduce using rule 114 (type_definition)


State 63

  115 type_definition: REAL_TYPE .

    $default  reduce using rule 115 (type_definition)


State 64

  116 type_definition: CHARACTER_TYPE .

    $default  reduce using rule 116 (type_definition)


State 65

  117 type_definition: BOOLEAN_TYPE .

    $default  reduce using rule 117 (type_definition)


State 66

  118 type_definition: array_type_definition .

    $default  reduce using rule 118 (type_definition)


State 67

  119 type_definition: record_type_definition .

    $default  reduce using rule 119 (type_definition)


State 68

  113 type_declaration: TYPE IDENTIFIER IS type_definition . ';'

    ';'  shift, and go to state 112


State 69

   13 case_statement: CASE IDENTIFIER . IS case_statement_alternative_list END CASE ';'

    IS  shift, and go to state 113


State 70

    3 actual_parameter_part: . '(' ')'
    4                      | . '(' actual_parameter_list ')'
   51 function_call: IDENTIFIER . actual_parameter_part
   57 indexed_component: IDENTIFIER . '[' expression expression_list ']'
  122 variable: IDENTIFIER .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', POWER_OP, ';', ')', '|', ',', ']', '=', '<', '>', '.']

    '('  shift, and go to state 93
    '['  shift, and go to state 94

    $default  reduce using rule 122 (variable)

    actual_parameter_part  go to state 114


State 71

   48 factor: NOT . primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   95 selected_component: . variable '.' IDENTIFIER
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NULL_              shift, and go to state 72
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81

    function_call       go to state 85
    indexed_component   go to state 43
    primary             go to state 115
    selected_component  go to state 48
    variable            go to state 92


State 72

   75 primary: NULL_ .

    $default  reduce using rule 75 (primary)


State 73

  120 unary_adding_operator: '+' .

    $default  reduce using rule 120 (unary_adding_operator)


State 74

  121 unary_adding_operator: '-' .

    $default  reduce using rule 121 (unary_adding_operator)


State 75

   64 multiplying_operator: '*' .

    $default  reduce using rule 64 (multiplying_operator)


State 76

   71 primary: INTEGER_LITERAL .

    $default  reduce using rule 71 (primary)


State 77

   72 primary: FLOAT_LITERAL .

    $default  reduce using rule 72 (primary)


State 78

   73 primary: CHARACTER_LITERAL .

    $default  reduce using rule 73 (primary)


State 79

   76 primary: STRING_LITERAL .

    $default  reduce using rule 76 (primary)


State 80

   74 primary: BOOLEAN_LITERAL .

    $default  reduce using rule 74 (primary)


State 81

   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   79        | '(' . expression ')'
   83 relation: . simple_expression
   84         | . simple_expression relational_operator simple_expression
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    expression             go to state 116
    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    relation               go to state 88
    selected_component     go to state 48
    simple_expression      go to state 89
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 82

   65 multiplying_operator: '/' .

    $default  reduce using rule 65 (multiplying_operator)


State 83

   56 if_statement: IF expression . THEN sequence_of_statements elsif_list else_statement END IF ';'

    THEN  shift, and go to state 117


State 84

  111 term: factor .

    $default  reduce using rule 111 (term)


State 85

   78 primary: function_call .

    $default  reduce using rule 78 (primary)


State 86

   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   95 selected_component: . variable '.' IDENTIFIER
  111 term: . factor
  112     | . multiplying_operator term
  112     | multiplying_operator . term
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    factor                go to state 84
    function_call         go to state 85
    indexed_component     go to state 43
    multiplying_operator  go to state 86
    primary               go to state 87
    selected_component    go to state 48
    term                  go to state 118
    variable              go to state 92


State 87

   46 factor: primary .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', ';', ')', '|', ',', ']', '=', '<', '>']
   47       | primary . POWER_OP primary

    POWER_OP  shift, and go to state 119

    $default  reduce using rule 46 (factor)


State 88

   43 expression: relation . relation_list
   58 logical_operator: . AND
   59                 | . OR
   85 relation_list: . logical_operator relation relation_list
   86              | .  [LOOP, THEN, ARROW, ';', ')', '|', ',', ']']

    AND  shift, and go to state 120
    OR   shift, and go to state 121

    $default  reduce using rule 86 (relation_list)

    logical_operator  go to state 122
    relation_list     go to state 123


State 89

   83 relation: simple_expression .  [AND, LOOP, OR, THEN, ARROW, ';', ')', '|', ',', ']']
   84         | simple_expression . relational_operator simple_expression
   87 relational_operator: . '='
   88                    | . '<'
   89                    | . '>'
   90                    | . NOT_EQUAL_OP
   91                    | . LESSER_EQUAL_OP
   92                    | . GREATER_EQUAL_OP

    NOT_EQUAL_OP      shift, and go to state 124
    GREATER_EQUAL_OP  shift, and go to state 125
    LESSER_EQUAL_OP   shift, and go to state 126
    '='               shift, and go to state 127
    '<'               shift, and go to state 128
    '>'               shift, and go to state 129

    $default  reduce using rule 83 (relation)

    relational_operator  go to state 130


State 90

    9 binary_adding_list: . binary_adding_operator term
   10                   | . binary_adding_operator term binary_adding_list
   11 binary_adding_operator: . '+'
   12                       | . '-'
  100 simple_expression: term . binary_adding_list
  101                  | term .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, ';', ')', '|', ',', ']', '=', '<', '>']

    '+'  shift, and go to state 131
    '-'  shift, and go to state 132

    $default  reduce using rule 101 (simple_expression)

    binary_adding_list      go to state 133
    binary_adding_operator  go to state 134


State 91

   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: unary_adding_operator . term binary_adding_list
   99                  | unary_adding_operator . term
  111 term: . factor
  112     | . multiplying_operator term
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    factor                go to state 84
    function_call         go to state 85
    indexed_component     go to state 43
    multiplying_operator  go to state 86
    primary               go to state 87
    selected_component    go to state 48
    term                  go to state 135
    variable              go to state 92


State 92

   77 primary: variable .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', POWER_OP, ';', ')', '|', ',', ']', '=', '<', '>']
   95 selected_component: variable . '.' IDENTIFIER

    '.'  shift, and go to state 103

    $default  reduce using rule 77 (primary)


State 93

    2 actual_parameter_list: . expression expression_list
    3 actual_parameter_part: '(' . ')'
    4                      | '(' . actual_parameter_list ')'
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   83 relation: . simple_expression
   84         | . simple_expression relational_operator simple_expression
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    ')'                shift, and go to state 136
    '/'                shift, and go to state 82

    actual_parameter_list  go to state 137
    expression             go to state 138
    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    relation               go to state 88
    selected_component     go to state 48
    simple_expression      go to state 89
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 94

   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   57                  | IDENTIFIER '[' . expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   83 relation: . simple_expression
   84         | . simple_expression relational_operator simple_expression
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    expression             go to state 139
    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    relation               go to state 88
    selected_component     go to state 48
    simple_expression      go to state 89
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 95

   80 procedure_call_statement: IDENTIFIER actual_parameter_part . ';'

    ';'  shift, and go to state 140


State 96

   66 null_statement: NULL_ ';' .

    $default  reduce using rule 66 (null_statement)


State 97

   93 return_statement: RETURN ';' .

    $default  reduce using rule 93 (return_statement)


State 98

   94 return_statement: RETURN simple_expression . ';'

    ';'  shift, and go to state 141


State 99

   60 loop_statement: WHILE expression . LOOP sequence_of_statements END LOOP ';'

    LOOP  shift, and go to state 142


State 100

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 143


State 101

   97 sequence_of_statements: statement sequence_of_statements .

    $default  reduce using rule 97 (sequence_of_statements)


State 102

    8 assignment_statement: variable ASSIGNMENT_OP . expression ';'
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   83 relation: . simple_expression
   84         | . simple_expression relational_operator simple_expression
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    expression             go to state 144
    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    relation               go to state 88
    selected_component     go to state 48
    simple_expression      go to state 89
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 103

   95 selected_component: variable '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 145


State 104

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   66 null_statement: . NULL_ ';'
   80 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   93 return_statement: . RETURN ';'
   94                 | . RETURN simple_expression ';'
   95 selected_component: . variable '.' IDENTIFIER
   96 sequence_of_statements: . statement
   97                       | . statement sequence_of_statements
  102 simple_statement: . null_statement
  103                 | . return_statement
  104                 | . procedure_call_statement
  105 statement: . simple_statement
  106          | . compound_statement
  107 subprogram_body: subprogram_specification IS declarative_part BEGIN_ . sequence_of_statements END IDENTIFIER ';'
  108                | subprogram_specification IS declarative_part BEGIN_ . sequence_of_statements END ';'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    null_statement            go to state 45
    procedure_call_statement  go to state 46
    return_statement          go to state 47
    selected_component        go to state 48
    sequence_of_statements    go to state 146
    simple_statement          go to state 50
    statement                 go to state 51
    variable                  go to state 52


State 105

   53 identifier_list: identifier_list . ',' IDENTIFIER
   68 parameter_specification: IDENTIFIER identifier_list . ':' mode type_definition assign_expression

    ':'  shift, and go to state 147
    ','  shift, and go to state 30


State 106

   68 parameter_specification: . IDENTIFIER identifier_list ':' mode type_definition assign_expression
   69 parameter_specification_list: ';' . parameter_specification parameter_specification_list

    IDENTIFIER  shift, and go to state 54

    parameter_specification  go to state 148


State 107

   49 formal_part: '(' parameter_specification parameter_specification_list . ')'

    ')'  shift, and go to state 149


State 108

   52 function_specification: FUNCTION IDENTIFIER formal_part RETURN type_definition .

    $default  reduce using rule 52 (function_specification)


State 109

    6 assign_expression: . ASSIGNMENT_OP expression
    7                  | .  [';']
   67 object_declaration: IDENTIFIER identifier_list ':' constant type_definition . assign_expression ';'

    ASSIGNMENT_OP  shift, and go to state 150

    $default  reduce using rule 7 (assign_expression)

    assign_expression  go to state 151


State 110

    5 array_type_definition: ARRAY '(' . expression expression_list ')' OF type_definition
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   83 relation: . simple_expression
   84         | . simple_expression relational_operator simple_expression
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    expression             go to state 152
    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    relation               go to state 88
    selected_component     go to state 48
    simple_expression      go to state 89
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 111

   17 component_item: . IDENTIFIER identifier_list ':' type_definition assign_expression ';'
   18 component_list: component_list . component_item
   82 record_type_definition: RECORD component_list . END RECORD

    END         shift, and go to state 153
    IDENTIFIER  shift, and go to state 154

    component_item  go to state 155


State 112

  113 type_declaration: TYPE IDENTIFIER IS type_definition ';' .

    $default  reduce using rule 113 (type_declaration)


State 113

   13 case_statement: CASE IDENTIFIER IS . case_statement_alternative_list END CASE ';'
   15 case_statement_alternative_list: . case_statement_alternative_list case_statement_alternative
   16                                | .

    $default  reduce using rule 16 (case_statement_alternative_list)

    case_statement_alternative_list  go to state 156


State 114

   51 function_call: IDENTIFIER actual_parameter_part .

    $default  reduce using rule 51 (function_call)


State 115

   48 factor: NOT primary .

    $default  reduce using rule 48 (factor)


State 116

   79 primary: '(' expression . ')'

    ')'  shift, and go to state 157


State 117

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   56             | IF expression THEN . sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   66 null_statement: . NULL_ ';'
   80 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   93 return_statement: . RETURN ';'
   94                 | . RETURN simple_expression ';'
   95 selected_component: . variable '.' IDENTIFIER
   96 sequence_of_statements: . statement
   97                       | . statement sequence_of_statements
  102 simple_statement: . null_statement
  103                 | . return_statement
  104                 | . procedure_call_statement
  105 statement: . simple_statement
  106          | . compound_statement
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    null_statement            go to state 45
    procedure_call_statement  go to state 46
    return_statement          go to state 47
    selected_component        go to state 48
    sequence_of_statements    go to state 158
    simple_statement          go to state 50
    statement                 go to state 51
    variable                  go to state 52


State 118

  112 term: multiplying_operator term .

    $default  reduce using rule 112 (term)


State 119

   47 factor: primary POWER_OP . primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   95 selected_component: . variable '.' IDENTIFIER
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NULL_              shift, and go to state 72
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81

    function_call       go to state 85
    indexed_component   go to state 43
    primary             go to state 159
    selected_component  go to state 48
    variable            go to state 92


State 120

   58 logical_operator: AND .

    $default  reduce using rule 58 (logical_operator)


State 121

   59 logical_operator: OR .

    $default  reduce using rule 59 (logical_operator)


State 122

   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   83 relation: . simple_expression
   84         | . simple_expression relational_operator simple_expression
   85 relation_list: logical_operator . relation relation_list
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    relation               go to state 160
    selected_component     go to state 48
    simple_expression      go to state 89
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 123

   43 expression: relation relation_list .

    $default  reduce using rule 43 (expression)


State 124

   90 relational_operator: NOT_EQUAL_OP .

    $default  reduce using rule 90 (relational_operator)


State 125

   92 relational_operator: GREATER_EQUAL_OP .

    $default  reduce using rule 92 (relational_operator)


State 126

   91 relational_operator: LESSER_EQUAL_OP .

    $default  reduce using rule 91 (relational_operator)


State 127

   87 relational_operator: '=' .

    $default  reduce using rule 87 (relational_operator)


State 128

   88 relational_operator: '<' .

    $default  reduce using rule 88 (relational_operator)


State 129

   89 relational_operator: '>' .

    $default  reduce using rule 89 (relational_operator)


State 130

   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   84 relation: simple_expression relational_operator . simple_expression
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    selected_component     go to state 48
    simple_expression      go to state 161
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 131

   11 binary_adding_operator: '+' .

    $default  reduce using rule 11 (binary_adding_operator)


State 132

   12 binary_adding_operator: '-' .

    $default  reduce using rule 12 (binary_adding_operator)


State 133

  100 simple_expression: term binary_adding_list .

    $default  reduce using rule 100 (simple_expression)


State 134

    9 binary_adding_list: binary_adding_operator . term
   10                   | binary_adding_operator . term binary_adding_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   95 selected_component: . variable '.' IDENTIFIER
  111 term: . factor
  112     | . multiplying_operator term
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    factor                go to state 84
    function_call         go to state 85
    indexed_component     go to state 43
    multiplying_operator  go to state 86
    primary               go to state 87
    selected_component    go to state 48
    term                  go to state 162
    variable              go to state 92


State 135

    9 binary_adding_list: . binary_adding_operator term
   10                   | . binary_adding_operator term binary_adding_list
   11 binary_adding_operator: . '+'
   12                       | . '-'
   98 simple_expression: unary_adding_operator term . binary_adding_list
   99                  | unary_adding_operator term .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, ';', ')', '|', ',', ']', '=', '<', '>']

    '+'  shift, and go to state 131
    '-'  shift, and go to state 132

    $default  reduce using rule 99 (simple_expression)

    binary_adding_list      go to state 163
    binary_adding_operator  go to state 134


State 136

    3 actual_parameter_part: '(' ')' .

    $default  reduce using rule 3 (actual_parameter_part)


State 137

    4 actual_parameter_part: '(' actual_parameter_list . ')'

    ')'  shift, and go to state 164


State 138

    2 actual_parameter_list: expression . expression_list
   44 expression_list: . ',' expression expression_list
   45                | .  [')']

    ','  shift, and go to state 165

    $default  reduce using rule 45 (expression_list)

    expression_list  go to state 166


State 139

   44 expression_list: . ',' expression expression_list
   45                | .  [']']
   57 indexed_component: IDENTIFIER '[' expression . expression_list ']'

    ','  shift, and go to state 165

    $default  reduce using rule 45 (expression_list)

    expression_list  go to state 167


State 140

   80 procedure_call_statement: IDENTIFIER actual_parameter_part ';' .

    $default  reduce using rule 80 (procedure_call_statement)


State 141

   94 return_statement: RETURN simple_expression ';' .

    $default  reduce using rule 94 (return_statement)


State 142

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   60               | WHILE expression LOOP . sequence_of_statements END LOOP ';'
   66 null_statement: . NULL_ ';'
   80 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   93 return_statement: . RETURN ';'
   94                 | . RETURN simple_expression ';'
   95 selected_component: . variable '.' IDENTIFIER
   96 sequence_of_statements: . statement
   97                       | . statement sequence_of_statements
  102 simple_statement: . null_statement
  103                 | . return_statement
  104                 | . procedure_call_statement
  105 statement: . simple_statement
  106          | . compound_statement
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    null_statement            go to state 45
    procedure_call_statement  go to state 46
    return_statement          go to state 47
    selected_component        go to state 48
    sequence_of_statements    go to state 168
    simple_statement          go to state 50
    statement                 go to state 51
    variable                  go to state 52


State 143

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER . ';'

    ';'  shift, and go to state 169


State 144

    8 assignment_statement: variable ASSIGNMENT_OP expression . ';'

    ';'  shift, and go to state 170


State 145

   95 selected_component: variable '.' IDENTIFIER .

    $default  reduce using rule 95 (selected_component)


State 146

  107 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements . END IDENTIFIER ';'
  108                | subprogram_specification IS declarative_part BEGIN_ sequence_of_statements . END ';'

    END  shift, and go to state 171


State 147

   61 mode: . OUT
   62     | . IN OUT
   63     | .  [ARRAY, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]
   68 parameter_specification: IDENTIFIER identifier_list ':' . mode type_definition assign_expression

    IN   shift, and go to state 172
    OUT  shift, and go to state 173

    $default  reduce using rule 63 (mode)

    mode  go to state 174


State 148

   69 parameter_specification_list: . ';' parameter_specification parameter_specification_list
   69                             | ';' parameter_specification . parameter_specification_list
   70                             | .  [')']

    ';'  shift, and go to state 106

    $default  reduce using rule 70 (parameter_specification_list)

    parameter_specification_list  go to state 175


State 149

   49 formal_part: '(' parameter_specification parameter_specification_list ')' .

    $default  reduce using rule 49 (formal_part)


State 150

    6 assign_expression: ASSIGNMENT_OP . expression
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   83 relation: . simple_expression
   84         | . simple_expression relational_operator simple_expression
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    expression             go to state 176
    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    relation               go to state 88
    selected_component     go to state 48
    simple_expression      go to state 89
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 151

   67 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression . ';'

    ';'  shift, and go to state 177


State 152

    5 array_type_definition: ARRAY '(' expression . expression_list ')' OF type_definition
   44 expression_list: . ',' expression expression_list
   45                | .  [')']

    ','  shift, and go to state 165

    $default  reduce using rule 45 (expression_list)

    expression_list  go to state 178


State 153

   82 record_type_definition: RECORD component_list END . RECORD

    RECORD  shift, and go to state 179


State 154

   17 component_item: IDENTIFIER . identifier_list ':' type_definition assign_expression ';'
   53 identifier_list: . identifier_list ',' IDENTIFIER
   54                | . IDENTIFIER
   55                | .  [':', ',']

    IDENTIFIER  shift, and go to state 19

    $default  reduce using rule 55 (identifier_list)

    identifier_list  go to state 180


State 155

   18 component_list: component_list component_item .

    $default  reduce using rule 18 (component_list)


State 156

   13 case_statement: CASE IDENTIFIER IS case_statement_alternative_list . END CASE ';'
   14 case_statement_alternative: . WHEN discrete_choice_list ARROW sequence_of_statements
   15 case_statement_alternative_list: case_statement_alternative_list . case_statement_alternative

    END   shift, and go to state 181
    WHEN  shift, and go to state 182

    case_statement_alternative  go to state 183


State 157

   79 primary: '(' expression ')' .

    $default  reduce using rule 79 (primary)


State 158

   38 elsif_list: . elsif_list elsif_statement
   39           | .
   56 if_statement: IF expression THEN sequence_of_statements . elsif_list else_statement END IF ';'

    $default  reduce using rule 39 (elsif_list)

    elsif_list  go to state 184


State 159

   47 factor: primary POWER_OP primary .

    $default  reduce using rule 47 (factor)


State 160

   58 logical_operator: . AND
   59                 | . OR
   85 relation_list: . logical_operator relation relation_list
   85              | logical_operator relation . relation_list
   86              | .  [LOOP, THEN, ARROW, ';', ')', '|', ',', ']']

    AND  shift, and go to state 120
    OR   shift, and go to state 121

    $default  reduce using rule 86 (relation_list)

    logical_operator  go to state 122
    relation_list     go to state 185


State 161

   84 relation: simple_expression relational_operator simple_expression .

    $default  reduce using rule 84 (relation)


State 162

    9 binary_adding_list: . binary_adding_operator term
    9                   | binary_adding_operator term .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, ';', ')', '|', ',', ']', '=', '<', '>']
   10                   | . binary_adding_operator term binary_adding_list
   10                   | binary_adding_operator term . binary_adding_list
   11 binary_adding_operator: . '+'
   12                       | . '-'

    '+'  shift, and go to state 131
    '-'  shift, and go to state 132

    $default  reduce using rule 9 (binary_adding_list)

    binary_adding_list      go to state 186
    binary_adding_operator  go to state 134


State 163

   98 simple_expression: unary_adding_operator term binary_adding_list .

    $default  reduce using rule 98 (simple_expression)


State 164

    4 actual_parameter_part: '(' actual_parameter_list ')' .

    $default  reduce using rule 4 (actual_parameter_part)


State 165

   43 expression: . relation relation_list
   44 expression_list: ',' . expression expression_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   83 relation: . simple_expression
   84         | . simple_expression relational_operator simple_expression
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    expression             go to state 187
    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    relation               go to state 88
    selected_component     go to state 48
    simple_expression      go to state 89
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 166

    2 actual_parameter_list: expression expression_list .

    $default  reduce using rule 2 (actual_parameter_list)


State 167

   57 indexed_component: IDENTIFIER '[' expression expression_list . ']'

    ']'  shift, and go to state 188


State 168

   60 loop_statement: WHILE expression LOOP sequence_of_statements . END LOOP ';'

    END  shift, and go to state 189


State 169

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';' .

    $default  reduce using rule 1 (main)


State 170

    8 assignment_statement: variable ASSIGNMENT_OP expression ';' .

    $default  reduce using rule 8 (assignment_statement)


State 171

  107 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END . IDENTIFIER ';'
  108                | subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END . ';'

    IDENTIFIER  shift, and go to state 190
    ';'         shift, and go to state 191


State 172

   62 mode: IN . OUT

    OUT  shift, and go to state 192


State 173

   61 mode: OUT .

    $default  reduce using rule 61 (mode)


State 174

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   68 parameter_specification: IDENTIFIER identifier_list ':' mode . type_definition assign_expression
   82 record_type_definition: . RECORD component_list END RECORD
  114 type_definition: . INTEGER_TYPE
  115                | . REAL_TYPE
  116                | . CHARACTER_TYPE
  117                | . BOOLEAN_TYPE
  118                | . array_type_definition
  119                | . record_type_definition

    ARRAY           shift, and go to state 60
    RECORD          shift, and go to state 61
    INTEGER_TYPE    shift, and go to state 62
    REAL_TYPE       shift, and go to state 63
    CHARACTER_TYPE  shift, and go to state 64
    BOOLEAN_TYPE    shift, and go to state 65

    array_type_definition   go to state 66
    record_type_definition  go to state 67
    type_definition         go to state 193


State 175

   69 parameter_specification_list: ';' parameter_specification parameter_specification_list .

    $default  reduce using rule 69 (parameter_specification_list)


State 176

    6 assign_expression: ASSIGNMENT_OP expression .

    $default  reduce using rule 6 (assign_expression)


State 177

   67 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression ';' .

    $default  reduce using rule 67 (object_declaration)


State 178

    5 array_type_definition: ARRAY '(' expression expression_list . ')' OF type_definition

    ')'  shift, and go to state 194


State 179

   82 record_type_definition: RECORD component_list END RECORD .

    $default  reduce using rule 82 (record_type_definition)


State 180

   17 component_item: IDENTIFIER identifier_list . ':' type_definition assign_expression ';'
   53 identifier_list: identifier_list . ',' IDENTIFIER

    ':'  shift, and go to state 195
    ','  shift, and go to state 30


State 181

   13 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END . CASE ';'

    CASE  shift, and go to state 196


State 182

   14 case_statement_alternative: WHEN . discrete_choice_list ARROW sequence_of_statements
   32 discrete_choice: . expression
   33                | . INTEGER_TYPE
   34                | . OTHERS
   35 discrete_choice_list: . discrete_choice_list '|' discrete_choice
   36                     | . discrete_choice
   37                     | .  [ARROW, '|']
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   83 relation: . simple_expression
   84         | . simple_expression relational_operator simple_expression
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    OTHERS             shift, and go to state 197
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_TYPE       shift, and go to state 198
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    $default  reduce using rule 37 (discrete_choice_list)

    discrete_choice        go to state 199
    discrete_choice_list   go to state 200
    expression             go to state 201
    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    relation               go to state 88
    selected_component     go to state 48
    simple_expression      go to state 89
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 183

   15 case_statement_alternative_list: case_statement_alternative_list case_statement_alternative .

    $default  reduce using rule 15 (case_statement_alternative_list)


State 184

   38 elsif_list: elsif_list . elsif_statement
   40 else_statement: . ELSE expression THEN sequence_of_statements
   41               | .  [END]
   42 elsif_statement: . ELSIF expression THEN sequence_of_statements
   56 if_statement: IF expression THEN sequence_of_statements elsif_list . else_statement END IF ';'

    ELSE   shift, and go to state 202
    ELSIF  shift, and go to state 203

    $default  reduce using rule 41 (else_statement)

    else_statement   go to state 204
    elsif_statement  go to state 205


State 185

   85 relation_list: logical_operator relation relation_list .

    $default  reduce using rule 85 (relation_list)


State 186

   10 binary_adding_list: binary_adding_operator term binary_adding_list .

    $default  reduce using rule 10 (binary_adding_list)


State 187

   44 expression_list: . ',' expression expression_list
   44                | ',' expression . expression_list
   45                | .  [')', ']']

    ','  shift, and go to state 165

    $default  reduce using rule 45 (expression_list)

    expression_list  go to state 206


State 188

   57 indexed_component: IDENTIFIER '[' expression expression_list ']' .

    $default  reduce using rule 57 (indexed_component)


State 189

   60 loop_statement: WHILE expression LOOP sequence_of_statements END . LOOP ';'

    LOOP  shift, and go to state 207


State 190

  107 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER . ';'

    ';'  shift, and go to state 208


State 191

  108 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END ';' .

    $default  reduce using rule 108 (subprogram_body)


State 192

   62 mode: IN OUT .

    $default  reduce using rule 62 (mode)


State 193

    6 assign_expression: . ASSIGNMENT_OP expression
    7                  | .  [';', ')']
   68 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition . assign_expression

    ASSIGNMENT_OP  shift, and go to state 150

    $default  reduce using rule 7 (assign_expression)

    assign_expression  go to state 209


State 194

    5 array_type_definition: ARRAY '(' expression expression_list ')' . OF type_definition

    OF  shift, and go to state 210


State 195

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   17 component_item: IDENTIFIER identifier_list ':' . type_definition assign_expression ';'
   82 record_type_definition: . RECORD component_list END RECORD
  114 type_definition: . INTEGER_TYPE
  115                | . REAL_TYPE
  116                | . CHARACTER_TYPE
  117                | . BOOLEAN_TYPE
  118                | . array_type_definition
  119                | . record_type_definition

    ARRAY           shift, and go to state 60
    RECORD          shift, and go to state 61
    INTEGER_TYPE    shift, and go to state 62
    REAL_TYPE       shift, and go to state 63
    CHARACTER_TYPE  shift, and go to state 64
    BOOLEAN_TYPE    shift, and go to state 65

    array_type_definition   go to state 66
    record_type_definition  go to state 67
    type_definition         go to state 211


State 196

   13 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE . ';'

    ';'  shift, and go to state 212


State 197

   34 discrete_choice: OTHERS .

    $default  reduce using rule 34 (discrete_choice)


State 198

   33 discrete_choice: INTEGER_TYPE .

    $default  reduce using rule 33 (discrete_choice)


State 199

   36 discrete_choice_list: discrete_choice .

    $default  reduce using rule 36 (discrete_choice_list)


State 200

   14 case_statement_alternative: WHEN discrete_choice_list . ARROW sequence_of_statements
   35 discrete_choice_list: discrete_choice_list . '|' discrete_choice

    ARROW  shift, and go to state 213
    '|'    shift, and go to state 214


State 201

   32 discrete_choice: expression .

    $default  reduce using rule 32 (discrete_choice)


State 202

   40 else_statement: ELSE . expression THEN sequence_of_statements
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   83 relation: . simple_expression
   84         | . simple_expression relational_operator simple_expression
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    expression             go to state 215
    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    relation               go to state 88
    selected_component     go to state 48
    simple_expression      go to state 89
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 203

   42 elsif_statement: ELSIF . expression THEN sequence_of_statements
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   83 relation: . simple_expression
   84         | . simple_expression relational_operator simple_expression
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    expression             go to state 216
    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    relation               go to state 88
    selected_component     go to state 48
    simple_expression      go to state 89
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 204

   56 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement . END IF ';'

    END  shift, and go to state 217


State 205

   38 elsif_list: elsif_list elsif_statement .

    $default  reduce using rule 38 (elsif_list)


State 206

   44 expression_list: ',' expression expression_list .

    $default  reduce using rule 44 (expression_list)


State 207

   60 loop_statement: WHILE expression LOOP sequence_of_statements END LOOP . ';'

    ';'  shift, and go to state 218


State 208

  107 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';' .

    $default  reduce using rule 107 (subprogram_body)


State 209

   68 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition assign_expression .

    $default  reduce using rule 68 (parameter_specification)


State 210

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
    5                      | ARRAY '(' expression expression_list ')' OF . type_definition
   82 record_type_definition: . RECORD component_list END RECORD
  114 type_definition: . INTEGER_TYPE
  115                | . REAL_TYPE
  116                | . CHARACTER_TYPE
  117                | . BOOLEAN_TYPE
  118                | . array_type_definition
  119                | . record_type_definition

    ARRAY           shift, and go to state 60
    RECORD          shift, and go to state 61
    INTEGER_TYPE    shift, and go to state 62
    REAL_TYPE       shift, and go to state 63
    CHARACTER_TYPE  shift, and go to state 64
    BOOLEAN_TYPE    shift, and go to state 65

    array_type_definition   go to state 66
    record_type_definition  go to state 67
    type_definition         go to state 219


State 211

    6 assign_expression: . ASSIGNMENT_OP expression
    7                  | .  [';']
   17 component_item: IDENTIFIER identifier_list ':' type_definition . assign_expression ';'

    ASSIGNMENT_OP  shift, and go to state 150

    $default  reduce using rule 7 (assign_expression)

    assign_expression  go to state 220


State 212

   13 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE ';' .

    $default  reduce using rule 13 (case_statement)


State 213

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   14 case_statement_alternative: WHEN discrete_choice_list ARROW . sequence_of_statements
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   66 null_statement: . NULL_ ';'
   80 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   93 return_statement: . RETURN ';'
   94                 | . RETURN simple_expression ';'
   95 selected_component: . variable '.' IDENTIFIER
   96 sequence_of_statements: . statement
   97                       | . statement sequence_of_statements
  102 simple_statement: . null_statement
  103                 | . return_statement
  104                 | . procedure_call_statement
  105 statement: . simple_statement
  106          | . compound_statement
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    null_statement            go to state 45
    procedure_call_statement  go to state 46
    return_statement          go to state 47
    selected_component        go to state 48
    sequence_of_statements    go to state 221
    simple_statement          go to state 50
    statement                 go to state 51
    variable                  go to state 52


State 214

   32 discrete_choice: . expression
   33                | . INTEGER_TYPE
   34                | . OTHERS
   35 discrete_choice_list: discrete_choice_list '|' . discrete_choice
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   64 multiplying_operator: . '*'
   65                     | . '/'
   71 primary: . INTEGER_LITERAL
   72        | . FLOAT_LITERAL
   73        | . CHARACTER_LITERAL
   74        | . BOOLEAN_LITERAL
   75        | . NULL_
   76        | . STRING_LITERAL
   77        | . variable
   78        | . function_call
   79        | . '(' expression ')'
   83 relation: . simple_expression
   84         | . simple_expression relational_operator simple_expression
   95 selected_component: . variable '.' IDENTIFIER
   98 simple_expression: . unary_adding_operator term binary_adding_list
   99                  | . unary_adding_operator term
  100                  | . term binary_adding_list
  101                  | . term
  111 term: . factor
  112     | . multiplying_operator term
  120 unary_adding_operator: . '+'
  121                      | . '-'
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    IDENTIFIER         shift, and go to state 70
    NOT                shift, and go to state 71
    NULL_              shift, and go to state 72
    OTHERS             shift, and go to state 197
    '+'                shift, and go to state 73
    '-'                shift, and go to state 74
    '*'                shift, and go to state 75
    INTEGER_TYPE       shift, and go to state 198
    INTEGER_LITERAL    shift, and go to state 76
    FLOAT_LITERAL      shift, and go to state 77
    CHARACTER_LITERAL  shift, and go to state 78
    STRING_LITERAL     shift, and go to state 79
    BOOLEAN_LITERAL    shift, and go to state 80
    '('                shift, and go to state 81
    '/'                shift, and go to state 82

    discrete_choice        go to state 222
    expression             go to state 201
    factor                 go to state 84
    function_call          go to state 85
    indexed_component      go to state 43
    multiplying_operator   go to state 86
    primary                go to state 87
    relation               go to state 88
    selected_component     go to state 48
    simple_expression      go to state 89
    term                   go to state 90
    unary_adding_operator  go to state 91
    variable               go to state 92


State 215

   40 else_statement: ELSE expression . THEN sequence_of_statements

    THEN  shift, and go to state 223


State 216

   42 elsif_statement: ELSIF expression . THEN sequence_of_statements

    THEN  shift, and go to state 224


State 217

   56 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END . IF ';'

    IF  shift, and go to state 225


State 218

   60 loop_statement: WHILE expression LOOP sequence_of_statements END LOOP ';' .

    $default  reduce using rule 60 (loop_statement)


State 219

    5 array_type_definition: ARRAY '(' expression expression_list ')' OF type_definition .

    $default  reduce using rule 5 (array_type_definition)


State 220

   17 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression . ';'

    ';'  shift, and go to state 226


State 221

   14 case_statement_alternative: WHEN discrete_choice_list ARROW sequence_of_statements .

    $default  reduce using rule 14 (case_statement_alternative)


State 222

   35 discrete_choice_list: discrete_choice_list '|' discrete_choice .

    $default  reduce using rule 35 (discrete_choice_list)


State 223

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   40 else_statement: ELSE expression THEN . sequence_of_statements
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   66 null_statement: . NULL_ ';'
   80 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   93 return_statement: . RETURN ';'
   94                 | . RETURN simple_expression ';'
   95 selected_component: . variable '.' IDENTIFIER
   96 sequence_of_statements: . statement
   97                       | . statement sequence_of_statements
  102 simple_statement: . null_statement
  103                 | . return_statement
  104                 | . procedure_call_statement
  105 statement: . simple_statement
  106          | . compound_statement
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    null_statement            go to state 45
    procedure_call_statement  go to state 46
    return_statement          go to state 47
    selected_component        go to state 48
    sequence_of_statements    go to state 227
    simple_statement          go to state 50
    statement                 go to state 51
    variable                  go to state 52


State 224

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   42 elsif_statement: ELSIF expression THEN . sequence_of_statements
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   66 null_statement: . NULL_ ';'
   80 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   93 return_statement: . RETURN ';'
   94                 | . RETURN simple_expression ';'
   95 selected_component: . variable '.' IDENTIFIER
   96 sequence_of_statements: . statement
   97                       | . statement sequence_of_statements
  102 simple_statement: . null_statement
  103                 | . return_statement
  104                 | . procedure_call_statement
  105 statement: . simple_statement
  106          | . compound_statement
  122 variable: . IDENTIFIER
  123         | . indexed_component
  124         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    null_statement            go to state 45
    procedure_call_statement  go to state 46
    return_statement          go to state 47
    selected_component        go to state 48
    sequence_of_statements    go to state 228
    simple_statement          go to state 50
    statement                 go to state 51
    variable                  go to state 52


State 225

   56 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END IF . ';'

    ';'  shift, and go to state 229


State 226

   17 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression ';' .

    $default  reduce using rule 17 (component_item)


State 227

   40 else_statement: ELSE expression THEN sequence_of_statements .

    $default  reduce using rule 40 (else_statement)


State 228

   42 elsif_statement: ELSIF expression THEN sequence_of_statements .

    $default  reduce using rule 42 (elsif_statement)


State 229

   56 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END IF ';' .

    $default  reduce using rule 56 (if_statement)
