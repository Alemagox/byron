Terminals unused in grammar

   CONCAT


Grammar

    0 $accept: main $end

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    2 actual_parameter_list: expression expression_list

    3 actual_parameter_part: '(' ')'
    4                      | '(' actual_parameter_list ')'

    5 array_type_definition: ARRAY '(' expression expression_list ')' OF type_definition

    6 assign_expression: ASSIGNMENT_OP expression
    7                  | /* empty */

    8 assignment_statement: variable ASSIGNMENT_OP expression ';'

    9 binary_adding_list: binary_adding_operator term
   10                   | binary_adding_operator term binary_adding_list

   11 binary_adding_operator: '+'
   12                       | '-'

   13 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'

   14 case_statement_alternative: WHEN discrete_choice_list ARROW sequence_of_statements

   15 case_statement_alternative_list: case_statement_alternative_list case_statement_alternative
   16                                | /* empty */

   17 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression ';'

   18 component_list: component_list component_item
   19               | /* empty */

   20 compound_statement: if_statement
   21                   | loop_statement
   22                   | case_statement
   23                   | assignment_statement

   24 constant: CONSTANT
   25         | /* empty */

   26 declarative_item: type_declaration
   27                 | object_declaration
   28                 | subprogram_specification ';'
   29                 | subprogram_body

   30 declarative_part: declarative_item declarative_part
   31                 | /* empty */

   32 discrete_choice: expression
   33                | INTEGER_TYPE
   34                | OTHERS

   35 discrete_choice_list: discrete_choice_list '|' discrete_choice
   36                     | discrete_choice
   37                     | /* empty */

   38 elsif_list: elsif_list elsif_statement
   39           | /* empty */

   40 else_statement: ELSE sequence_of_statements
   41               | /* empty */

   42 elsif_statement: ELSIF expression THEN sequence_of_statements

   43 expression: relation relation_list

   44 expression_list: ',' expression expression_list
   45                | /* empty */

   46 factor: primary
   47       | primary POWER_OP primary
   48       | NOT primary

   49 formal_part: '(' parameter_specification parameter_specification_list ')'
   50            | /* empty */

   51 function_call: IDENTIFIER actual_parameter_part
   52              | IDENTIFIER LENGTH

   53 function_specification: FUNCTION IDENTIFIER formal_part RETURN type_definition

   54 identifier_list: ',' IDENTIFIER identifier_list
   55                | /* empty */

   56 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'

   57 indexed_component: IDENTIFIER '[' expression expression_list ']'

   58 logical_operator: AND
   59                 | OR

   60 loop_statement: WHILE expression LOOP sequence_of_statements END LOOP ';'

   61 mode: OUT
   62     | IN OUT
   63     | IN
   64     | /* empty */

   65 multiplying_operator: '*'
   66                     | '/'

   67 null_statement: NULL_ ';'

   68 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'

   69 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition assign_expression

   70 parameter_specification_list: ';' parameter_specification parameter_specification_list
   71                             | /* empty */

   72 primary: INTEGER_LITERAL
   73        | FLOAT_LITERAL
   74        | CHARACTER_LITERAL
   75        | BOOLEAN_LITERAL
   76        | NULL_
   77        | STRING_LITERAL
   78        | variable
   79        | function_call
   80        | '(' expression ')'

   81 procedure_call_statement: IDENTIFIER actual_parameter_part ';'
   82                         | PUT '(' STRING_LITERAL ')' ';'
   83                         | PUT '(' variable ')' ';'
   84                         | GET '(' variable ')' ';'
   85                         | NEW_LINE ';'

   86 procedure_specification: PROCEDURE IDENTIFIER formal_part

   87 record_type_definition: RECORD component_list END RECORD

   88 relation: simple_expression
   89         | simple_expression relational_operator simple_expression

   90 relation_list: logical_operator relation relation_list
   91              | /* empty */

   92 relational_operator: '='
   93                    | '<'
   94                    | '>'
   95                    | NOT_EQUAL_OP
   96                    | LESSER_EQUAL_OP
   97                    | GREATER_EQUAL_OP

   98 return_statement: RETURN ';'
   99                 | RETURN simple_expression ';'

  100 selected_component: variable '.' IDENTIFIER

  101 sequence_of_statements: statement
  102                       | statement sequence_of_statements

  103 simple_expression: unary_adding_operator term binary_adding_list
  104                  | unary_adding_operator term
  105                  | term binary_adding_list
  106                  | term

  107 simple_statement: null_statement
  108                 | return_statement
  109                 | procedure_call_statement

  110 statement: simple_statement
  111          | compound_statement

  112 subprogram_body_: subprogram_specification IS

  113 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  114                | subprogram_body_ declarative_part BEGIN_ sequence_of_statements END ';'

  115 subprogram_specification: procedure_specification
  116                         | function_specification

  117 term: factor
  118     | term multiplying_operator factor

  119 type_declaration: TYPE IDENTIFIER IS type_definition ';'

  120 type_definition: INTEGER_TYPE
  121                | REAL_TYPE
  122                | CHARACTER_TYPE
  123                | BOOLEAN_TYPE
  124                | array_type_definition
  125                | record_type_definition
  126                | IDENTIFIER

  127 unary_adding_operator: '+'
  128                      | '-'

  129 variable: IDENTIFIER
  130         | indexed_component
  131         | selected_component


Terminals, with rules where they appear

$end (0) 0
'(' (40) 3 4 5 49 80 82 83 84
')' (41) 3 4 5 49 80 82 83 84
'*' (42) 65
'+' (43) 11 127
',' (44) 44 54
'-' (45) 12 128
'.' (46) 100
'/' (47) 66
':' (58) 17 68 69
';' (59) 1 8 13 17 28 56 60 67 68 70 81 82 83 84 85 98 99 113 114 119
'<' (60) 93
'=' (61) 92
'>' (62) 94
'[' (91) 57
']' (93) 57
'|' (124) 35
error (256)
AND (258) 58
ARRAY (259) 5
BEGIN_ (260) 1 113 114
CASE (261) 13
CONSTANT (262) 24
ELSE (263) 40
ELSIF (264) 42
END (265) 1 13 56 60 87 113 114
FUNCTION (266) 53
IF (267) 56
IDENTIFIER (268) 1 13 17 51 52 53 54 57 68 69 81 86 100 113 119 126
    129
IN (269) 62 63
IS (270) 1 13 112 119
LOOP (271) 60
NOT (272) 48
NULL_ (273) 67 76
OF (274) 5
OR (275) 59
OTHERS (276) 34
OUT (277) 61 62
PROCEDURE (278) 1 86
RECORD (279) 87
RETURN (280) 53 98 99
THEN (281) 42 56
TYPE (282) 119
WHEN (283) 14
WHILE (284) 60
ARROW (285) 14
ASSIGNMENT_OP (286) 6 8
NOT_EQUAL_OP (287) 95
GREATER_EQUAL_OP (288) 97
LESSER_EQUAL_OP (289) 96
POWER_OP (290) 47
PUT (291) 82 83
GET (292) 84
LENGTH (293) 52
NEW_LINE (294) 85
CONCAT (295)
INTEGER_TYPE (296) 33 120
REAL_TYPE (297) 121
CHARACTER_TYPE (298) 122
BOOLEAN_TYPE (299) 123
INTEGER_LITERAL (300) 72
FLOAT_LITERAL (301) 73
CHARACTER_LITERAL (302) 74
STRING_LITERAL (303) 77 82
BOOLEAN_LITERAL (304) 75


Nonterminals, with rules where they appear

$accept (66)
    on left: 0
main (67)
    on left: 1, on right: 0
actual_parameter_list (68)
    on left: 2, on right: 4
actual_parameter_part (69)
    on left: 3 4, on right: 51 81
array_type_definition (70)
    on left: 5, on right: 124
assign_expression (71)
    on left: 6 7, on right: 17 68 69
assignment_statement (72)
    on left: 8, on right: 23
binary_adding_list (73)
    on left: 9 10, on right: 10 103 105
binary_adding_operator (74)
    on left: 11 12, on right: 9 10
case_statement (75)
    on left: 13, on right: 22
case_statement_alternative (76)
    on left: 14, on right: 15
case_statement_alternative_list (77)
    on left: 15 16, on right: 13 15
component_item (78)
    on left: 17, on right: 18
component_list (79)
    on left: 18 19, on right: 18 87
compound_statement (80)
    on left: 20 21 22 23, on right: 111
constant (81)
    on left: 24 25, on right: 68
declarative_item (82)
    on left: 26 27 28 29, on right: 30
declarative_part (83)
    on left: 30 31, on right: 1 30 113 114
discrete_choice (84)
    on left: 32 33 34, on right: 35 36
discrete_choice_list (85)
    on left: 35 36 37, on right: 14 35
elsif_list (86)
    on left: 38 39, on right: 38 56
else_statement (87)
    on left: 40 41, on right: 56
elsif_statement (88)
    on left: 42, on right: 38
expression (89)
    on left: 43, on right: 2 5 6 8 32 42 44 56 57 60 80
expression_list (90)
    on left: 44 45, on right: 2 5 44 57
factor (91)
    on left: 46 47 48, on right: 117 118
formal_part (92)
    on left: 49 50, on right: 53 86
function_call (93)
    on left: 51 52, on right: 79
function_specification (94)
    on left: 53, on right: 116
identifier_list (95)
    on left: 54 55, on right: 17 54 68 69
if_statement (96)
    on left: 56, on right: 20
indexed_component (97)
    on left: 57, on right: 130
logical_operator (98)
    on left: 58 59, on right: 90
loop_statement (99)
    on left: 60, on right: 21
mode (100)
    on left: 61 62 63 64, on right: 69
multiplying_operator (101)
    on left: 65 66, on right: 118
null_statement (102)
    on left: 67, on right: 107
object_declaration (103)
    on left: 68, on right: 27
parameter_specification (104)
    on left: 69, on right: 49 70
parameter_specification_list (105)
    on left: 70 71, on right: 49 70
primary (106)
    on left: 72 73 74 75 76 77 78 79 80, on right: 46 47 48
procedure_call_statement (107)
    on left: 81 82 83 84 85, on right: 109
procedure_specification (108)
    on left: 86, on right: 115
record_type_definition (109)
    on left: 87, on right: 125
relation (110)
    on left: 88 89, on right: 43 90
relation_list (111)
    on left: 90 91, on right: 43 90
relational_operator (112)
    on left: 92 93 94 95 96 97, on right: 89
return_statement (113)
    on left: 98 99, on right: 108
selected_component (114)
    on left: 100, on right: 131
sequence_of_statements (115)
    on left: 101 102, on right: 1 14 40 42 56 60 102 113 114
simple_expression (116)
    on left: 103 104 105 106, on right: 88 89 99
simple_statement (117)
    on left: 107 108 109, on right: 110
statement (118)
    on left: 110 111, on right: 101 102
subprogram_body_ (119)
    on left: 112, on right: 113 114
subprogram_body (120)
    on left: 113 114, on right: 29
subprogram_specification (121)
    on left: 115 116, on right: 28 112
term (122)
    on left: 117 118, on right: 9 10 103 104 105 106 118
type_declaration (123)
    on left: 119, on right: 26
type_definition (124)
    on left: 120 121 122 123 124 125 126, on right: 5 17 53 68 69 119
unary_adding_operator (125)
    on left: 127 128, on right: 103 104
variable (126)
    on left: 129 130 131, on right: 8 78 83 84 100


state 0

    0 $accept: . main $end
    1 main: . PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    PROCEDURE  shift, and go to state 1

    main  go to state 2


state 1

    1 main: PROCEDURE . IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 3


state 2

    0 $accept: main . $end

    $end  shift, and go to state 4


state 3

    1 main: PROCEDURE IDENTIFIER . IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    IS  shift, and go to state 5


state 4

    0 $accept: main $end .

    $default  accept


state 5

    1 main: PROCEDURE IDENTIFIER IS . declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
   26 declarative_item: . type_declaration
   27                 | . object_declaration
   28                 | . subprogram_specification ';'
   29                 | . subprogram_body
   30 declarative_part: . declarative_item declarative_part
   31                 | .  [BEGIN_]
   53 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   68 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   86 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  112 subprogram_body_: . subprogram_specification IS
  113 subprogram_body: . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  114                | . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END ';'
  115 subprogram_specification: . procedure_specification
  116                         | . function_specification
  119 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    PROCEDURE   shift, and go to state 8
    TYPE        shift, and go to state 9

    $default  reduce using rule 31 (declarative_part)

    declarative_item          go to state 10
    declarative_part          go to state 11
    function_specification    go to state 12
    object_declaration        go to state 13
    procedure_specification   go to state 14
    subprogram_body_          go to state 15
    subprogram_body           go to state 16
    subprogram_specification  go to state 17
    type_declaration          go to state 18


state 6

   53 function_specification: FUNCTION . IDENTIFIER formal_part RETURN type_definition

    IDENTIFIER  shift, and go to state 19


state 7

   54 identifier_list: . ',' IDENTIFIER identifier_list
   55                | .  [':']
   68 object_declaration: IDENTIFIER . identifier_list ':' constant type_definition assign_expression ';'

    ','  shift, and go to state 20

    $default  reduce using rule 55 (identifier_list)

    identifier_list  go to state 21


state 8

   86 procedure_specification: PROCEDURE . IDENTIFIER formal_part

    IDENTIFIER  shift, and go to state 22


state 9

  119 type_declaration: TYPE . IDENTIFIER IS type_definition ';'

    IDENTIFIER  shift, and go to state 23


state 10

   26 declarative_item: . type_declaration
   27                 | . object_declaration
   28                 | . subprogram_specification ';'
   29                 | . subprogram_body
   30 declarative_part: . declarative_item declarative_part
   30                 | declarative_item . declarative_part
   31                 | .  [BEGIN_]
   53 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   68 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   86 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  112 subprogram_body_: . subprogram_specification IS
  113 subprogram_body: . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  114                | . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END ';'
  115 subprogram_specification: . procedure_specification
  116                         | . function_specification
  119 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    PROCEDURE   shift, and go to state 8
    TYPE        shift, and go to state 9

    $default  reduce using rule 31 (declarative_part)

    declarative_item          go to state 10
    declarative_part          go to state 24
    function_specification    go to state 12
    object_declaration        go to state 13
    procedure_specification   go to state 14
    subprogram_body_          go to state 15
    subprogram_body           go to state 16
    subprogram_specification  go to state 17
    type_declaration          go to state 18


state 11

    1 main: PROCEDURE IDENTIFIER IS declarative_part . BEGIN_ sequence_of_statements END IDENTIFIER ';'

    BEGIN_  shift, and go to state 25


state 12

  116 subprogram_specification: function_specification .

    $default  reduce using rule 116 (subprogram_specification)


state 13

   27 declarative_item: object_declaration .

    $default  reduce using rule 27 (declarative_item)


state 14

  115 subprogram_specification: procedure_specification .

    $default  reduce using rule 115 (subprogram_specification)


state 15

   26 declarative_item: . type_declaration
   27                 | . object_declaration
   28                 | . subprogram_specification ';'
   29                 | . subprogram_body
   30 declarative_part: . declarative_item declarative_part
   31                 | .  [BEGIN_]
   53 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   68 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   86 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  112 subprogram_body_: . subprogram_specification IS
  113 subprogram_body: . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  113                | subprogram_body_ . declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  114                | . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END ';'
  114                | subprogram_body_ . declarative_part BEGIN_ sequence_of_statements END ';'
  115 subprogram_specification: . procedure_specification
  116                         | . function_specification
  119 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    PROCEDURE   shift, and go to state 8
    TYPE        shift, and go to state 9

    $default  reduce using rule 31 (declarative_part)

    declarative_item          go to state 10
    declarative_part          go to state 26
    function_specification    go to state 12
    object_declaration        go to state 13
    procedure_specification   go to state 14
    subprogram_body_          go to state 15
    subprogram_body           go to state 16
    subprogram_specification  go to state 17
    type_declaration          go to state 18


state 16

   29 declarative_item: subprogram_body .

    $default  reduce using rule 29 (declarative_item)


state 17

   28 declarative_item: subprogram_specification . ';'
  112 subprogram_body_: subprogram_specification . IS

    IS   shift, and go to state 27
    ';'  shift, and go to state 28


state 18

   26 declarative_item: type_declaration .

    $default  reduce using rule 26 (declarative_item)


state 19

   49 formal_part: . '(' parameter_specification parameter_specification_list ')'
   50            | .  [RETURN]
   53 function_specification: FUNCTION IDENTIFIER . formal_part RETURN type_definition

    '('  shift, and go to state 29

    $default  reduce using rule 50 (formal_part)

    formal_part  go to state 30


state 20

   54 identifier_list: ',' . IDENTIFIER identifier_list

    IDENTIFIER  shift, and go to state 31


state 21

   68 object_declaration: IDENTIFIER identifier_list . ':' constant type_definition assign_expression ';'

    ':'  shift, and go to state 32


state 22

   49 formal_part: . '(' parameter_specification parameter_specification_list ')'
   50            | .  [IS, ';']
   86 procedure_specification: PROCEDURE IDENTIFIER . formal_part

    '('  shift, and go to state 29

    $default  reduce using rule 50 (formal_part)

    formal_part  go to state 33


state 23

  119 type_declaration: TYPE IDENTIFIER . IS type_definition ';'

    IS  shift, and go to state 34


state 24

   30 declarative_part: declarative_item declarative_part .

    $default  reduce using rule 30 (declarative_part)


state 25

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ . sequence_of_statements END IDENTIFIER ';'
    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   67 null_statement: . NULL_ ';'
   81 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   82                         | . PUT '(' STRING_LITERAL ')' ';'
   83                         | . PUT '(' variable ')' ';'
   84                         | . GET '(' variable ')' ';'
   85                         | . NEW_LINE ';'
   98 return_statement: . RETURN ';'
   99                 | . RETURN simple_expression ';'
  100 selected_component: . variable '.' IDENTIFIER
  101 sequence_of_statements: . statement
  102                       | . statement sequence_of_statements
  107 simple_statement: . null_statement
  108                 | . return_statement
  109                 | . procedure_call_statement
  110 statement: . simple_statement
  111          | . compound_statement
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 35
    IF          shift, and go to state 36
    IDENTIFIER  shift, and go to state 37
    NULL_       shift, and go to state 38
    RETURN      shift, and go to state 39
    WHILE       shift, and go to state 40
    PUT         shift, and go to state 41
    GET         shift, and go to state 42
    NEW_LINE    shift, and go to state 43

    assignment_statement      go to state 44
    case_statement            go to state 45
    compound_statement        go to state 46
    if_statement              go to state 47
    indexed_component         go to state 48
    loop_statement            go to state 49
    null_statement            go to state 50
    procedure_call_statement  go to state 51
    return_statement          go to state 52
    selected_component        go to state 53
    sequence_of_statements    go to state 54
    simple_statement          go to state 55
    statement                 go to state 56
    variable                  go to state 57


state 26

  113 subprogram_body: subprogram_body_ declarative_part . BEGIN_ sequence_of_statements END IDENTIFIER ';'
  114                | subprogram_body_ declarative_part . BEGIN_ sequence_of_statements END ';'

    BEGIN_  shift, and go to state 58


state 27

  112 subprogram_body_: subprogram_specification IS .

    $default  reduce using rule 112 (subprogram_body_)


state 28

   28 declarative_item: subprogram_specification ';' .

    $default  reduce using rule 28 (declarative_item)


state 29

   49 formal_part: '(' . parameter_specification parameter_specification_list ')'
   69 parameter_specification: . IDENTIFIER identifier_list ':' mode type_definition assign_expression

    IDENTIFIER  shift, and go to state 59

    parameter_specification  go to state 60


state 30

   53 function_specification: FUNCTION IDENTIFIER formal_part . RETURN type_definition

    RETURN  shift, and go to state 61


state 31

   54 identifier_list: . ',' IDENTIFIER identifier_list
   54                | ',' IDENTIFIER . identifier_list
   55                | .  [':']

    ','  shift, and go to state 20

    $default  reduce using rule 55 (identifier_list)

    identifier_list  go to state 62


state 32

   24 constant: . CONSTANT
   25         | .  [ARRAY, IDENTIFIER, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]
   68 object_declaration: IDENTIFIER identifier_list ':' . constant type_definition assign_expression ';'

    CONSTANT  shift, and go to state 63

    $default  reduce using rule 25 (constant)

    constant  go to state 64


state 33

   86 procedure_specification: PROCEDURE IDENTIFIER formal_part .

    $default  reduce using rule 86 (procedure_specification)


state 34

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   87 record_type_definition: . RECORD component_list END RECORD
  119 type_declaration: TYPE IDENTIFIER IS . type_definition ';'
  120 type_definition: . INTEGER_TYPE
  121                | . REAL_TYPE
  122                | . CHARACTER_TYPE
  123                | . BOOLEAN_TYPE
  124                | . array_type_definition
  125                | . record_type_definition
  126                | . IDENTIFIER

    ARRAY           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    RECORD          shift, and go to state 67
    INTEGER_TYPE    shift, and go to state 68
    REAL_TYPE       shift, and go to state 69
    CHARACTER_TYPE  shift, and go to state 70
    BOOLEAN_TYPE    shift, and go to state 71

    array_type_definition   go to state 72
    record_type_definition  go to state 73
    type_definition         go to state 74


state 35

   13 case_statement: CASE . IDENTIFIER IS case_statement_alternative_list END CASE ';'

    IDENTIFIER  shift, and go to state 75


state 36

   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   56 if_statement: IF . expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
   88 relation: . simple_expression
   89         | . simple_expression relational_operator simple_expression
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: . unary_adding_operator term binary_adding_list
  104                  | . unary_adding_operator term
  105                  | . term binary_adding_list
  106                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    '+'                shift, and go to state 79
    '-'                shift, and go to state 80
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    expression             go to state 87
    factor                 go to state 88
    function_call          go to state 89
    indexed_component      go to state 48
    primary                go to state 90
    relation               go to state 91
    selected_component     go to state 53
    simple_expression      go to state 92
    term                   go to state 93
    unary_adding_operator  go to state 94
    variable               go to state 95


state 37

    3 actual_parameter_part: . '(' ')'
    4                      | . '(' actual_parameter_list ')'
   57 indexed_component: IDENTIFIER . '[' expression expression_list ']'
   81 procedure_call_statement: IDENTIFIER . actual_parameter_part ';'
  129 variable: IDENTIFIER .  [ASSIGNMENT_OP, '.']

    '('  shift, and go to state 96
    '['  shift, and go to state 97

    $default  reduce using rule 129 (variable)

    actual_parameter_part  go to state 98


state 38

   67 null_statement: NULL_ . ';'

    ';'  shift, and go to state 99


state 39

   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
   98 return_statement: RETURN . ';'
   99                 | RETURN . simple_expression ';'
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: . unary_adding_operator term binary_adding_list
  104                  | . unary_adding_operator term
  105                  | . term binary_adding_list
  106                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    '+'                shift, and go to state 79
    '-'                shift, and go to state 80
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    ';'                shift, and go to state 100
    '('                shift, and go to state 86

    factor                 go to state 88
    function_call          go to state 89
    indexed_component      go to state 48
    primary                go to state 90
    selected_component     go to state 53
    simple_expression      go to state 101
    term                   go to state 93
    unary_adding_operator  go to state 94
    variable               go to state 95


state 40

   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: WHILE . expression LOOP sequence_of_statements END LOOP ';'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
   88 relation: . simple_expression
   89         | . simple_expression relational_operator simple_expression
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: . unary_adding_operator term binary_adding_list
  104                  | . unary_adding_operator term
  105                  | . term binary_adding_list
  106                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    '+'                shift, and go to state 79
    '-'                shift, and go to state 80
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    expression             go to state 102
    factor                 go to state 88
    function_call          go to state 89
    indexed_component      go to state 48
    primary                go to state 90
    relation               go to state 91
    selected_component     go to state 53
    simple_expression      go to state 92
    term                   go to state 93
    unary_adding_operator  go to state 94
    variable               go to state 95


state 41

   82 procedure_call_statement: PUT . '(' STRING_LITERAL ')' ';'
   83                         | PUT . '(' variable ')' ';'

    '('  shift, and go to state 103


state 42

   84 procedure_call_statement: GET . '(' variable ')' ';'

    '('  shift, and go to state 104


state 43

   85 procedure_call_statement: NEW_LINE . ';'

    ';'  shift, and go to state 105


state 44

   23 compound_statement: assignment_statement .

    $default  reduce using rule 23 (compound_statement)


state 45

   22 compound_statement: case_statement .

    $default  reduce using rule 22 (compound_statement)


state 46

  111 statement: compound_statement .

    $default  reduce using rule 111 (statement)


state 47

   20 compound_statement: if_statement .

    $default  reduce using rule 20 (compound_statement)


state 48

  130 variable: indexed_component .

    $default  reduce using rule 130 (variable)


state 49

   21 compound_statement: loop_statement .

    $default  reduce using rule 21 (compound_statement)


state 50

  107 simple_statement: null_statement .

    $default  reduce using rule 107 (simple_statement)


state 51

  109 simple_statement: procedure_call_statement .

    $default  reduce using rule 109 (simple_statement)


state 52

  108 simple_statement: return_statement .

    $default  reduce using rule 108 (simple_statement)


state 53

  131 variable: selected_component .

    $default  reduce using rule 131 (variable)


state 54

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements . END IDENTIFIER ';'

    END  shift, and go to state 106


state 55

  110 statement: simple_statement .

    $default  reduce using rule 110 (statement)


state 56

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   67 null_statement: . NULL_ ';'
   81 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   82                         | . PUT '(' STRING_LITERAL ')' ';'
   83                         | . PUT '(' variable ')' ';'
   84                         | . GET '(' variable ')' ';'
   85                         | . NEW_LINE ';'
   98 return_statement: . RETURN ';'
   99                 | . RETURN simple_expression ';'
  100 selected_component: . variable '.' IDENTIFIER
  101 sequence_of_statements: . statement
  101                       | statement .  [ELSE, ELSIF, END, WHEN]
  102                       | . statement sequence_of_statements
  102                       | statement . sequence_of_statements
  107 simple_statement: . null_statement
  108                 | . return_statement
  109                 | . procedure_call_statement
  110 statement: . simple_statement
  111          | . compound_statement
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 35
    IF          shift, and go to state 36
    IDENTIFIER  shift, and go to state 37
    NULL_       shift, and go to state 38
    RETURN      shift, and go to state 39
    WHILE       shift, and go to state 40
    PUT         shift, and go to state 41
    GET         shift, and go to state 42
    NEW_LINE    shift, and go to state 43

    $default  reduce using rule 101 (sequence_of_statements)

    assignment_statement      go to state 44
    case_statement            go to state 45
    compound_statement        go to state 46
    if_statement              go to state 47
    indexed_component         go to state 48
    loop_statement            go to state 49
    null_statement            go to state 50
    procedure_call_statement  go to state 51
    return_statement          go to state 52
    selected_component        go to state 53
    sequence_of_statements    go to state 107
    simple_statement          go to state 55
    statement                 go to state 56
    variable                  go to state 57


state 57

    8 assignment_statement: variable . ASSIGNMENT_OP expression ';'
  100 selected_component: variable . '.' IDENTIFIER

    ASSIGNMENT_OP  shift, and go to state 108
    '.'            shift, and go to state 109


state 58

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   67 null_statement: . NULL_ ';'
   81 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   82                         | . PUT '(' STRING_LITERAL ')' ';'
   83                         | . PUT '(' variable ')' ';'
   84                         | . GET '(' variable ')' ';'
   85                         | . NEW_LINE ';'
   98 return_statement: . RETURN ';'
   99                 | . RETURN simple_expression ';'
  100 selected_component: . variable '.' IDENTIFIER
  101 sequence_of_statements: . statement
  102                       | . statement sequence_of_statements
  107 simple_statement: . null_statement
  108                 | . return_statement
  109                 | . procedure_call_statement
  110 statement: . simple_statement
  111          | . compound_statement
  113 subprogram_body: subprogram_body_ declarative_part BEGIN_ . sequence_of_statements END IDENTIFIER ';'
  114                | subprogram_body_ declarative_part BEGIN_ . sequence_of_statements END ';'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 35
    IF          shift, and go to state 36
    IDENTIFIER  shift, and go to state 37
    NULL_       shift, and go to state 38
    RETURN      shift, and go to state 39
    WHILE       shift, and go to state 40
    PUT         shift, and go to state 41
    GET         shift, and go to state 42
    NEW_LINE    shift, and go to state 43

    assignment_statement      go to state 44
    case_statement            go to state 45
    compound_statement        go to state 46
    if_statement              go to state 47
    indexed_component         go to state 48
    loop_statement            go to state 49
    null_statement            go to state 50
    procedure_call_statement  go to state 51
    return_statement          go to state 52
    selected_component        go to state 53
    sequence_of_statements    go to state 110
    simple_statement          go to state 55
    statement                 go to state 56
    variable                  go to state 57


state 59

   54 identifier_list: . ',' IDENTIFIER identifier_list
   55                | .  [':']
   69 parameter_specification: IDENTIFIER . identifier_list ':' mode type_definition assign_expression

    ','  shift, and go to state 20

    $default  reduce using rule 55 (identifier_list)

    identifier_list  go to state 111


state 60

   49 formal_part: '(' parameter_specification . parameter_specification_list ')'
   70 parameter_specification_list: . ';' parameter_specification parameter_specification_list
   71                             | .  [')']

    ';'  shift, and go to state 112

    $default  reduce using rule 71 (parameter_specification_list)

    parameter_specification_list  go to state 113


state 61

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   53 function_specification: FUNCTION IDENTIFIER formal_part RETURN . type_definition
   87 record_type_definition: . RECORD component_list END RECORD
  120 type_definition: . INTEGER_TYPE
  121                | . REAL_TYPE
  122                | . CHARACTER_TYPE
  123                | . BOOLEAN_TYPE
  124                | . array_type_definition
  125                | . record_type_definition
  126                | . IDENTIFIER

    ARRAY           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    RECORD          shift, and go to state 67
    INTEGER_TYPE    shift, and go to state 68
    REAL_TYPE       shift, and go to state 69
    CHARACTER_TYPE  shift, and go to state 70
    BOOLEAN_TYPE    shift, and go to state 71

    array_type_definition   go to state 72
    record_type_definition  go to state 73
    type_definition         go to state 114


state 62

   54 identifier_list: ',' IDENTIFIER identifier_list .

    $default  reduce using rule 54 (identifier_list)


state 63

   24 constant: CONSTANT .

    $default  reduce using rule 24 (constant)


state 64

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   68 object_declaration: IDENTIFIER identifier_list ':' constant . type_definition assign_expression ';'
   87 record_type_definition: . RECORD component_list END RECORD
  120 type_definition: . INTEGER_TYPE
  121                | . REAL_TYPE
  122                | . CHARACTER_TYPE
  123                | . BOOLEAN_TYPE
  124                | . array_type_definition
  125                | . record_type_definition
  126                | . IDENTIFIER

    ARRAY           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    RECORD          shift, and go to state 67
    INTEGER_TYPE    shift, and go to state 68
    REAL_TYPE       shift, and go to state 69
    CHARACTER_TYPE  shift, and go to state 70
    BOOLEAN_TYPE    shift, and go to state 71

    array_type_definition   go to state 72
    record_type_definition  go to state 73
    type_definition         go to state 115


state 65

    5 array_type_definition: ARRAY . '(' expression expression_list ')' OF type_definition

    '('  shift, and go to state 116


state 66

  126 type_definition: IDENTIFIER .

    $default  reduce using rule 126 (type_definition)


state 67

   18 component_list: . component_list component_item
   19               | .
   87 record_type_definition: RECORD . component_list END RECORD

    $default  reduce using rule 19 (component_list)

    component_list  go to state 117


state 68

  120 type_definition: INTEGER_TYPE .

    $default  reduce using rule 120 (type_definition)


state 69

  121 type_definition: REAL_TYPE .

    $default  reduce using rule 121 (type_definition)


state 70

  122 type_definition: CHARACTER_TYPE .

    $default  reduce using rule 122 (type_definition)


state 71

  123 type_definition: BOOLEAN_TYPE .

    $default  reduce using rule 123 (type_definition)


state 72

  124 type_definition: array_type_definition .

    $default  reduce using rule 124 (type_definition)


state 73

  125 type_definition: record_type_definition .

    $default  reduce using rule 125 (type_definition)


state 74

  119 type_declaration: TYPE IDENTIFIER IS type_definition . ';'

    ';'  shift, and go to state 118


state 75

   13 case_statement: CASE IDENTIFIER . IS case_statement_alternative_list END CASE ';'

    IS  shift, and go to state 119


state 76

    3 actual_parameter_part: . '(' ')'
    4                      | . '(' actual_parameter_list ')'
   51 function_call: IDENTIFIER . actual_parameter_part
   52              | IDENTIFIER . LENGTH
   57 indexed_component: IDENTIFIER . '[' expression expression_list ']'
  129 variable: IDENTIFIER .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', '*', POWER_OP, ';', ')', '|', ',', ']', '/', '=', '<', '>', '.']

    LENGTH  shift, and go to state 120
    '('     shift, and go to state 96
    '['     shift, and go to state 97

    $default  reduce using rule 129 (variable)

    actual_parameter_part  go to state 121


state 77

   48 factor: NOT . primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
  100 selected_component: . variable '.' IDENTIFIER
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NULL_              shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    function_call       go to state 89
    indexed_component   go to state 48
    primary             go to state 122
    selected_component  go to state 53
    variable            go to state 95


state 78

   76 primary: NULL_ .

    $default  reduce using rule 76 (primary)


state 79

  127 unary_adding_operator: '+' .

    $default  reduce using rule 127 (unary_adding_operator)


state 80

  128 unary_adding_operator: '-' .

    $default  reduce using rule 128 (unary_adding_operator)


state 81

   72 primary: INTEGER_LITERAL .

    $default  reduce using rule 72 (primary)


state 82

   73 primary: FLOAT_LITERAL .

    $default  reduce using rule 73 (primary)


state 83

   74 primary: CHARACTER_LITERAL .

    $default  reduce using rule 74 (primary)


state 84

   77 primary: STRING_LITERAL .

    $default  reduce using rule 77 (primary)


state 85

   75 primary: BOOLEAN_LITERAL .

    $default  reduce using rule 75 (primary)


state 86

   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
   80        | '(' . expression ')'
   88 relation: . simple_expression
   89         | . simple_expression relational_operator simple_expression
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: . unary_adding_operator term binary_adding_list
  104                  | . unary_adding_operator term
  105                  | . term binary_adding_list
  106                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    '+'                shift, and go to state 79
    '-'                shift, and go to state 80
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    expression             go to state 123
    factor                 go to state 88
    function_call          go to state 89
    indexed_component      go to state 48
    primary                go to state 90
    relation               go to state 91
    selected_component     go to state 53
    simple_expression      go to state 92
    term                   go to state 93
    unary_adding_operator  go to state 94
    variable               go to state 95


state 87

   56 if_statement: IF expression . THEN sequence_of_statements elsif_list else_statement END IF ';'

    THEN  shift, and go to state 124


state 88

  117 term: factor .

    $default  reduce using rule 117 (term)


state 89

   79 primary: function_call .

    $default  reduce using rule 79 (primary)


state 90

   46 factor: primary .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', '*', ';', ')', '|', ',', ']', '/', '=', '<', '>']
   47       | primary . POWER_OP primary

    POWER_OP  shift, and go to state 125

    $default  reduce using rule 46 (factor)


state 91

   43 expression: relation . relation_list
   58 logical_operator: . AND
   59                 | . OR
   90 relation_list: . logical_operator relation relation_list
   91              | .  [LOOP, THEN, ARROW, ';', ')', '|', ',', ']']

    AND  shift, and go to state 126
    OR   shift, and go to state 127

    $default  reduce using rule 91 (relation_list)

    logical_operator  go to state 128
    relation_list     go to state 129


state 92

   88 relation: simple_expression .  [AND, LOOP, OR, THEN, ARROW, ';', ')', '|', ',', ']']
   89         | simple_expression . relational_operator simple_expression
   92 relational_operator: . '='
   93                    | . '<'
   94                    | . '>'
   95                    | . NOT_EQUAL_OP
   96                    | . LESSER_EQUAL_OP
   97                    | . GREATER_EQUAL_OP

    NOT_EQUAL_OP      shift, and go to state 130
    GREATER_EQUAL_OP  shift, and go to state 131
    LESSER_EQUAL_OP   shift, and go to state 132
    '='               shift, and go to state 133
    '<'               shift, and go to state 134
    '>'               shift, and go to state 135

    $default  reduce using rule 88 (relation)

    relational_operator  go to state 136


state 93

    9 binary_adding_list: . binary_adding_operator term
   10                   | . binary_adding_operator term binary_adding_list
   11 binary_adding_operator: . '+'
   12                       | . '-'
   65 multiplying_operator: . '*'
   66                     | . '/'
  105 simple_expression: term . binary_adding_list
  106                  | term .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, ';', ')', '|', ',', ']', '=', '<', '>']
  118 term: term . multiplying_operator factor

    '+'  shift, and go to state 137
    '-'  shift, and go to state 138
    '*'  shift, and go to state 139
    '/'  shift, and go to state 140

    $default  reduce using rule 106 (simple_expression)

    binary_adding_list      go to state 141
    binary_adding_operator  go to state 142
    multiplying_operator    go to state 143


state 94

   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: unary_adding_operator . term binary_adding_list
  104                  | unary_adding_operator . term
  117 term: . factor
  118     | . term multiplying_operator factor
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    factor              go to state 88
    function_call       go to state 89
    indexed_component   go to state 48
    primary             go to state 90
    selected_component  go to state 53
    term                go to state 144
    variable            go to state 95


state 95

   78 primary: variable .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', '*', POWER_OP, ';', ')', '|', ',', ']', '/', '=', '<', '>']
  100 selected_component: variable . '.' IDENTIFIER

    '.'  shift, and go to state 109

    $default  reduce using rule 78 (primary)


state 96

    2 actual_parameter_list: . expression expression_list
    3 actual_parameter_part: '(' . ')'
    4                      | '(' . actual_parameter_list ')'
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
   88 relation: . simple_expression
   89         | . simple_expression relational_operator simple_expression
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: . unary_adding_operator term binary_adding_list
  104                  | . unary_adding_operator term
  105                  | . term binary_adding_list
  106                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    '+'                shift, and go to state 79
    '-'                shift, and go to state 80
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86
    ')'                shift, and go to state 145

    actual_parameter_list  go to state 146
    expression             go to state 147
    factor                 go to state 88
    function_call          go to state 89
    indexed_component      go to state 48
    primary                go to state 90
    relation               go to state 91
    selected_component     go to state 53
    simple_expression      go to state 92
    term                   go to state 93
    unary_adding_operator  go to state 94
    variable               go to state 95


state 97

   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   57                  | IDENTIFIER '[' . expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
   88 relation: . simple_expression
   89         | . simple_expression relational_operator simple_expression
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: . unary_adding_operator term binary_adding_list
  104                  | . unary_adding_operator term
  105                  | . term binary_adding_list
  106                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    '+'                shift, and go to state 79
    '-'                shift, and go to state 80
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    expression             go to state 148
    factor                 go to state 88
    function_call          go to state 89
    indexed_component      go to state 48
    primary                go to state 90
    relation               go to state 91
    selected_component     go to state 53
    simple_expression      go to state 92
    term                   go to state 93
    unary_adding_operator  go to state 94
    variable               go to state 95


state 98

   81 procedure_call_statement: IDENTIFIER actual_parameter_part . ';'

    ';'  shift, and go to state 149


state 99

   67 null_statement: NULL_ ';' .

    $default  reduce using rule 67 (null_statement)


state 100

   98 return_statement: RETURN ';' .

    $default  reduce using rule 98 (return_statement)


state 101

   99 return_statement: RETURN simple_expression . ';'

    ';'  shift, and go to state 150


state 102

   60 loop_statement: WHILE expression . LOOP sequence_of_statements END LOOP ';'

    LOOP  shift, and go to state 151


state 103

   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   82 procedure_call_statement: PUT '(' . STRING_LITERAL ')' ';'
   83                         | PUT '(' . variable ')' ';'
  100 selected_component: . variable '.' IDENTIFIER
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER      shift, and go to state 152
    STRING_LITERAL  shift, and go to state 153

    indexed_component   go to state 48
    selected_component  go to state 53
    variable            go to state 154


state 104

   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   84 procedure_call_statement: GET '(' . variable ')' ';'
  100 selected_component: . variable '.' IDENTIFIER
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER  shift, and go to state 152

    indexed_component   go to state 48
    selected_component  go to state 53
    variable            go to state 155


state 105

   85 procedure_call_statement: NEW_LINE ';' .

    $default  reduce using rule 85 (procedure_call_statement)


state 106

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 156


state 107

  102 sequence_of_statements: statement sequence_of_statements .

    $default  reduce using rule 102 (sequence_of_statements)


state 108

    8 assignment_statement: variable ASSIGNMENT_OP . expression ';'
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
   88 relation: . simple_expression
   89         | . simple_expression relational_operator simple_expression
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: . unary_adding_operator term binary_adding_list
  104                  | . unary_adding_operator term
  105                  | . term binary_adding_list
  106                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    '+'                shift, and go to state 79
    '-'                shift, and go to state 80
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    expression             go to state 157
    factor                 go to state 88
    function_call          go to state 89
    indexed_component      go to state 48
    primary                go to state 90
    relation               go to state 91
    selected_component     go to state 53
    simple_expression      go to state 92
    term                   go to state 93
    unary_adding_operator  go to state 94
    variable               go to state 95


state 109

  100 selected_component: variable '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 158


state 110

  113 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements . END IDENTIFIER ';'
  114                | subprogram_body_ declarative_part BEGIN_ sequence_of_statements . END ';'

    END  shift, and go to state 159


state 111

   69 parameter_specification: IDENTIFIER identifier_list . ':' mode type_definition assign_expression

    ':'  shift, and go to state 160


state 112

   69 parameter_specification: . IDENTIFIER identifier_list ':' mode type_definition assign_expression
   70 parameter_specification_list: ';' . parameter_specification parameter_specification_list

    IDENTIFIER  shift, and go to state 59

    parameter_specification  go to state 161


state 113

   49 formal_part: '(' parameter_specification parameter_specification_list . ')'

    ')'  shift, and go to state 162


state 114

   53 function_specification: FUNCTION IDENTIFIER formal_part RETURN type_definition .

    $default  reduce using rule 53 (function_specification)


state 115

    6 assign_expression: . ASSIGNMENT_OP expression
    7                  | .  [';']
   68 object_declaration: IDENTIFIER identifier_list ':' constant type_definition . assign_expression ';'

    ASSIGNMENT_OP  shift, and go to state 163

    $default  reduce using rule 7 (assign_expression)

    assign_expression  go to state 164


state 116

    5 array_type_definition: ARRAY '(' . expression expression_list ')' OF type_definition
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
   88 relation: . simple_expression
   89         | . simple_expression relational_operator simple_expression
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: . unary_adding_operator term binary_adding_list
  104                  | . unary_adding_operator term
  105                  | . term binary_adding_list
  106                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    '+'                shift, and go to state 79
    '-'                shift, and go to state 80
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    expression             go to state 165
    factor                 go to state 88
    function_call          go to state 89
    indexed_component      go to state 48
    primary                go to state 90
    relation               go to state 91
    selected_component     go to state 53
    simple_expression      go to state 92
    term                   go to state 93
    unary_adding_operator  go to state 94
    variable               go to state 95


state 117

   17 component_item: . IDENTIFIER identifier_list ':' type_definition assign_expression ';'
   18 component_list: component_list . component_item
   87 record_type_definition: RECORD component_list . END RECORD

    END         shift, and go to state 166
    IDENTIFIER  shift, and go to state 167

    component_item  go to state 168


state 118

  119 type_declaration: TYPE IDENTIFIER IS type_definition ';' .

    $default  reduce using rule 119 (type_declaration)


state 119

   13 case_statement: CASE IDENTIFIER IS . case_statement_alternative_list END CASE ';'
   15 case_statement_alternative_list: . case_statement_alternative_list case_statement_alternative
   16                                | .

    $default  reduce using rule 16 (case_statement_alternative_list)

    case_statement_alternative_list  go to state 169


state 120

   52 function_call: IDENTIFIER LENGTH .

    $default  reduce using rule 52 (function_call)


state 121

   51 function_call: IDENTIFIER actual_parameter_part .

    $default  reduce using rule 51 (function_call)


state 122

   48 factor: NOT primary .

    $default  reduce using rule 48 (factor)


state 123

   80 primary: '(' expression . ')'

    ')'  shift, and go to state 170


state 124

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   56             | IF expression THEN . sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   67 null_statement: . NULL_ ';'
   81 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   82                         | . PUT '(' STRING_LITERAL ')' ';'
   83                         | . PUT '(' variable ')' ';'
   84                         | . GET '(' variable ')' ';'
   85                         | . NEW_LINE ';'
   98 return_statement: . RETURN ';'
   99                 | . RETURN simple_expression ';'
  100 selected_component: . variable '.' IDENTIFIER
  101 sequence_of_statements: . statement
  102                       | . statement sequence_of_statements
  107 simple_statement: . null_statement
  108                 | . return_statement
  109                 | . procedure_call_statement
  110 statement: . simple_statement
  111          | . compound_statement
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 35
    IF          shift, and go to state 36
    IDENTIFIER  shift, and go to state 37
    NULL_       shift, and go to state 38
    RETURN      shift, and go to state 39
    WHILE       shift, and go to state 40
    PUT         shift, and go to state 41
    GET         shift, and go to state 42
    NEW_LINE    shift, and go to state 43

    assignment_statement      go to state 44
    case_statement            go to state 45
    compound_statement        go to state 46
    if_statement              go to state 47
    indexed_component         go to state 48
    loop_statement            go to state 49
    null_statement            go to state 50
    procedure_call_statement  go to state 51
    return_statement          go to state 52
    selected_component        go to state 53
    sequence_of_statements    go to state 171
    simple_statement          go to state 55
    statement                 go to state 56
    variable                  go to state 57


state 125

   47 factor: primary POWER_OP . primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
  100 selected_component: . variable '.' IDENTIFIER
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NULL_              shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    function_call       go to state 89
    indexed_component   go to state 48
    primary             go to state 172
    selected_component  go to state 53
    variable            go to state 95


state 126

   58 logical_operator: AND .

    $default  reduce using rule 58 (logical_operator)


state 127

   59 logical_operator: OR .

    $default  reduce using rule 59 (logical_operator)


state 128

   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
   88 relation: . simple_expression
   89         | . simple_expression relational_operator simple_expression
   90 relation_list: logical_operator . relation relation_list
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: . unary_adding_operator term binary_adding_list
  104                  | . unary_adding_operator term
  105                  | . term binary_adding_list
  106                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    '+'                shift, and go to state 79
    '-'                shift, and go to state 80
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    factor                 go to state 88
    function_call          go to state 89
    indexed_component      go to state 48
    primary                go to state 90
    relation               go to state 173
    selected_component     go to state 53
    simple_expression      go to state 92
    term                   go to state 93
    unary_adding_operator  go to state 94
    variable               go to state 95


state 129

   43 expression: relation relation_list .

    $default  reduce using rule 43 (expression)


state 130

   95 relational_operator: NOT_EQUAL_OP .

    $default  reduce using rule 95 (relational_operator)


state 131

   97 relational_operator: GREATER_EQUAL_OP .

    $default  reduce using rule 97 (relational_operator)


state 132

   96 relational_operator: LESSER_EQUAL_OP .

    $default  reduce using rule 96 (relational_operator)


state 133

   92 relational_operator: '=' .

    $default  reduce using rule 92 (relational_operator)


state 134

   93 relational_operator: '<' .

    $default  reduce using rule 93 (relational_operator)


state 135

   94 relational_operator: '>' .

    $default  reduce using rule 94 (relational_operator)


state 136

   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
   89 relation: simple_expression relational_operator . simple_expression
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: . unary_adding_operator term binary_adding_list
  104                  | . unary_adding_operator term
  105                  | . term binary_adding_list
  106                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    '+'                shift, and go to state 79
    '-'                shift, and go to state 80
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    factor                 go to state 88
    function_call          go to state 89
    indexed_component      go to state 48
    primary                go to state 90
    selected_component     go to state 53
    simple_expression      go to state 174
    term                   go to state 93
    unary_adding_operator  go to state 94
    variable               go to state 95


state 137

   11 binary_adding_operator: '+' .

    $default  reduce using rule 11 (binary_adding_operator)


state 138

   12 binary_adding_operator: '-' .

    $default  reduce using rule 12 (binary_adding_operator)


state 139

   65 multiplying_operator: '*' .

    $default  reduce using rule 65 (multiplying_operator)


state 140

   66 multiplying_operator: '/' .

    $default  reduce using rule 66 (multiplying_operator)


state 141

  105 simple_expression: term binary_adding_list .

    $default  reduce using rule 105 (simple_expression)


state 142

    9 binary_adding_list: binary_adding_operator . term
   10                   | binary_adding_operator . term binary_adding_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
  100 selected_component: . variable '.' IDENTIFIER
  117 term: . factor
  118     | . term multiplying_operator factor
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    factor              go to state 88
    function_call       go to state 89
    indexed_component   go to state 48
    primary             go to state 90
    selected_component  go to state 53
    term                go to state 175
    variable            go to state 95


state 143

   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
  100 selected_component: . variable '.' IDENTIFIER
  118 term: term multiplying_operator . factor
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    factor              go to state 176
    function_call       go to state 89
    indexed_component   go to state 48
    primary             go to state 90
    selected_component  go to state 53
    variable            go to state 95


state 144

    9 binary_adding_list: . binary_adding_operator term
   10                   | . binary_adding_operator term binary_adding_list
   11 binary_adding_operator: . '+'
   12                       | . '-'
   65 multiplying_operator: . '*'
   66                     | . '/'
  103 simple_expression: unary_adding_operator term . binary_adding_list
  104                  | unary_adding_operator term .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, ';', ')', '|', ',', ']', '=', '<', '>']
  118 term: term . multiplying_operator factor

    '+'  shift, and go to state 137
    '-'  shift, and go to state 138
    '*'  shift, and go to state 139
    '/'  shift, and go to state 140

    $default  reduce using rule 104 (simple_expression)

    binary_adding_list      go to state 177
    binary_adding_operator  go to state 142
    multiplying_operator    go to state 143


state 145

    3 actual_parameter_part: '(' ')' .

    $default  reduce using rule 3 (actual_parameter_part)


state 146

    4 actual_parameter_part: '(' actual_parameter_list . ')'

    ')'  shift, and go to state 178


state 147

    2 actual_parameter_list: expression . expression_list
   44 expression_list: . ',' expression expression_list
   45                | .  [')']

    ','  shift, and go to state 179

    $default  reduce using rule 45 (expression_list)

    expression_list  go to state 180


state 148

   44 expression_list: . ',' expression expression_list
   45                | .  [']']
   57 indexed_component: IDENTIFIER '[' expression . expression_list ']'

    ','  shift, and go to state 179

    $default  reduce using rule 45 (expression_list)

    expression_list  go to state 181


state 149

   81 procedure_call_statement: IDENTIFIER actual_parameter_part ';' .

    $default  reduce using rule 81 (procedure_call_statement)


state 150

   99 return_statement: RETURN simple_expression ';' .

    $default  reduce using rule 99 (return_statement)


state 151

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   60               | WHILE expression LOOP . sequence_of_statements END LOOP ';'
   67 null_statement: . NULL_ ';'
   81 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   82                         | . PUT '(' STRING_LITERAL ')' ';'
   83                         | . PUT '(' variable ')' ';'
   84                         | . GET '(' variable ')' ';'
   85                         | . NEW_LINE ';'
   98 return_statement: . RETURN ';'
   99                 | . RETURN simple_expression ';'
  100 selected_component: . variable '.' IDENTIFIER
  101 sequence_of_statements: . statement
  102                       | . statement sequence_of_statements
  107 simple_statement: . null_statement
  108                 | . return_statement
  109                 | . procedure_call_statement
  110 statement: . simple_statement
  111          | . compound_statement
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 35
    IF          shift, and go to state 36
    IDENTIFIER  shift, and go to state 37
    NULL_       shift, and go to state 38
    RETURN      shift, and go to state 39
    WHILE       shift, and go to state 40
    PUT         shift, and go to state 41
    GET         shift, and go to state 42
    NEW_LINE    shift, and go to state 43

    assignment_statement      go to state 44
    case_statement            go to state 45
    compound_statement        go to state 46
    if_statement              go to state 47
    indexed_component         go to state 48
    loop_statement            go to state 49
    null_statement            go to state 50
    procedure_call_statement  go to state 51
    return_statement          go to state 52
    selected_component        go to state 53
    sequence_of_statements    go to state 182
    simple_statement          go to state 55
    statement                 go to state 56
    variable                  go to state 57


state 152

   57 indexed_component: IDENTIFIER . '[' expression expression_list ']'
  129 variable: IDENTIFIER .  [')', '.']

    '['  shift, and go to state 97

    $default  reduce using rule 129 (variable)


state 153

   82 procedure_call_statement: PUT '(' STRING_LITERAL . ')' ';'

    ')'  shift, and go to state 183


state 154

   83 procedure_call_statement: PUT '(' variable . ')' ';'
  100 selected_component: variable . '.' IDENTIFIER

    ')'  shift, and go to state 184
    '.'  shift, and go to state 109


state 155

   84 procedure_call_statement: GET '(' variable . ')' ';'
  100 selected_component: variable . '.' IDENTIFIER

    ')'  shift, and go to state 185
    '.'  shift, and go to state 109


state 156

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER . ';'

    ';'  shift, and go to state 186


state 157

    8 assignment_statement: variable ASSIGNMENT_OP expression . ';'

    ';'  shift, and go to state 187


state 158

  100 selected_component: variable '.' IDENTIFIER .

    $default  reduce using rule 100 (selected_component)


state 159

  113 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements END . IDENTIFIER ';'
  114                | subprogram_body_ declarative_part BEGIN_ sequence_of_statements END . ';'

    IDENTIFIER  shift, and go to state 188
    ';'         shift, and go to state 189


state 160

   61 mode: . OUT
   62     | . IN OUT
   63     | . IN
   64     | .  [ARRAY, IDENTIFIER, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]
   69 parameter_specification: IDENTIFIER identifier_list ':' . mode type_definition assign_expression

    IN   shift, and go to state 190
    OUT  shift, and go to state 191

    $default  reduce using rule 64 (mode)

    mode  go to state 192


state 161

   70 parameter_specification_list: . ';' parameter_specification parameter_specification_list
   70                             | ';' parameter_specification . parameter_specification_list
   71                             | .  [')']

    ';'  shift, and go to state 112

    $default  reduce using rule 71 (parameter_specification_list)

    parameter_specification_list  go to state 193


state 162

   49 formal_part: '(' parameter_specification parameter_specification_list ')' .

    $default  reduce using rule 49 (formal_part)


state 163

    6 assign_expression: ASSIGNMENT_OP . expression
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
   88 relation: . simple_expression
   89         | . simple_expression relational_operator simple_expression
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: . unary_adding_operator term binary_adding_list
  104                  | . unary_adding_operator term
  105                  | . term binary_adding_list
  106                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    '+'                shift, and go to state 79
    '-'                shift, and go to state 80
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    expression             go to state 194
    factor                 go to state 88
    function_call          go to state 89
    indexed_component      go to state 48
    primary                go to state 90
    relation               go to state 91
    selected_component     go to state 53
    simple_expression      go to state 92
    term                   go to state 93
    unary_adding_operator  go to state 94
    variable               go to state 95


state 164

   68 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression . ';'

    ';'  shift, and go to state 195


state 165

    5 array_type_definition: ARRAY '(' expression . expression_list ')' OF type_definition
   44 expression_list: . ',' expression expression_list
   45                | .  [')']

    ','  shift, and go to state 179

    $default  reduce using rule 45 (expression_list)

    expression_list  go to state 196


state 166

   87 record_type_definition: RECORD component_list END . RECORD

    RECORD  shift, and go to state 197


state 167

   17 component_item: IDENTIFIER . identifier_list ':' type_definition assign_expression ';'
   54 identifier_list: . ',' IDENTIFIER identifier_list
   55                | .  [':']

    ','  shift, and go to state 20

    $default  reduce using rule 55 (identifier_list)

    identifier_list  go to state 198


state 168

   18 component_list: component_list component_item .

    $default  reduce using rule 18 (component_list)


state 169

   13 case_statement: CASE IDENTIFIER IS case_statement_alternative_list . END CASE ';'
   14 case_statement_alternative: . WHEN discrete_choice_list ARROW sequence_of_statements
   15 case_statement_alternative_list: case_statement_alternative_list . case_statement_alternative

    END   shift, and go to state 199
    WHEN  shift, and go to state 200

    case_statement_alternative  go to state 201


state 170

   80 primary: '(' expression ')' .

    $default  reduce using rule 80 (primary)


state 171

   38 elsif_list: . elsif_list elsif_statement
   39           | .
   56 if_statement: IF expression THEN sequence_of_statements . elsif_list else_statement END IF ';'

    $default  reduce using rule 39 (elsif_list)

    elsif_list  go to state 202


state 172

   47 factor: primary POWER_OP primary .

    $default  reduce using rule 47 (factor)


state 173

   58 logical_operator: . AND
   59                 | . OR
   90 relation_list: . logical_operator relation relation_list
   90              | logical_operator relation . relation_list
   91              | .  [LOOP, THEN, ARROW, ';', ')', '|', ',', ']']

    AND  shift, and go to state 126
    OR   shift, and go to state 127

    $default  reduce using rule 91 (relation_list)

    logical_operator  go to state 128
    relation_list     go to state 203


state 174

   89 relation: simple_expression relational_operator simple_expression .

    $default  reduce using rule 89 (relation)


state 175

    9 binary_adding_list: . binary_adding_operator term
    9                   | binary_adding_operator term .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, ';', ')', '|', ',', ']', '=', '<', '>']
   10                   | . binary_adding_operator term binary_adding_list
   10                   | binary_adding_operator term . binary_adding_list
   11 binary_adding_operator: . '+'
   12                       | . '-'
   65 multiplying_operator: . '*'
   66                     | . '/'
  118 term: term . multiplying_operator factor

    '+'  shift, and go to state 137
    '-'  shift, and go to state 138
    '*'  shift, and go to state 139
    '/'  shift, and go to state 140

    $default  reduce using rule 9 (binary_adding_list)

    binary_adding_list      go to state 204
    binary_adding_operator  go to state 142
    multiplying_operator    go to state 143


state 176

  118 term: term multiplying_operator factor .

    $default  reduce using rule 118 (term)


state 177

  103 simple_expression: unary_adding_operator term binary_adding_list .

    $default  reduce using rule 103 (simple_expression)


state 178

    4 actual_parameter_part: '(' actual_parameter_list ')' .

    $default  reduce using rule 4 (actual_parameter_part)


state 179

   43 expression: . relation relation_list
   44 expression_list: ',' . expression expression_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
   88 relation: . simple_expression
   89         | . simple_expression relational_operator simple_expression
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: . unary_adding_operator term binary_adding_list
  104                  | . unary_adding_operator term
  105                  | . term binary_adding_list
  106                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    '+'                shift, and go to state 79
    '-'                shift, and go to state 80
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    expression             go to state 205
    factor                 go to state 88
    function_call          go to state 89
    indexed_component      go to state 48
    primary                go to state 90
    relation               go to state 91
    selected_component     go to state 53
    simple_expression      go to state 92
    term                   go to state 93
    unary_adding_operator  go to state 94
    variable               go to state 95


state 180

    2 actual_parameter_list: expression expression_list .

    $default  reduce using rule 2 (actual_parameter_list)


state 181

   57 indexed_component: IDENTIFIER '[' expression expression_list . ']'

    ']'  shift, and go to state 206


state 182

   60 loop_statement: WHILE expression LOOP sequence_of_statements . END LOOP ';'

    END  shift, and go to state 207


state 183

   82 procedure_call_statement: PUT '(' STRING_LITERAL ')' . ';'

    ';'  shift, and go to state 208


state 184

   83 procedure_call_statement: PUT '(' variable ')' . ';'

    ';'  shift, and go to state 209


state 185

   84 procedure_call_statement: GET '(' variable ')' . ';'

    ';'  shift, and go to state 210


state 186

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';' .

    $default  reduce using rule 1 (main)


state 187

    8 assignment_statement: variable ASSIGNMENT_OP expression ';' .

    $default  reduce using rule 8 (assignment_statement)


state 188

  113 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER . ';'

    ';'  shift, and go to state 211


state 189

  114 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements END ';' .

    $default  reduce using rule 114 (subprogram_body)


state 190

   62 mode: IN . OUT
   63     | IN .  [ARRAY, IDENTIFIER, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]

    OUT  shift, and go to state 212

    $default  reduce using rule 63 (mode)


state 191

   61 mode: OUT .

    $default  reduce using rule 61 (mode)


state 192

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   69 parameter_specification: IDENTIFIER identifier_list ':' mode . type_definition assign_expression
   87 record_type_definition: . RECORD component_list END RECORD
  120 type_definition: . INTEGER_TYPE
  121                | . REAL_TYPE
  122                | . CHARACTER_TYPE
  123                | . BOOLEAN_TYPE
  124                | . array_type_definition
  125                | . record_type_definition
  126                | . IDENTIFIER

    ARRAY           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    RECORD          shift, and go to state 67
    INTEGER_TYPE    shift, and go to state 68
    REAL_TYPE       shift, and go to state 69
    CHARACTER_TYPE  shift, and go to state 70
    BOOLEAN_TYPE    shift, and go to state 71

    array_type_definition   go to state 72
    record_type_definition  go to state 73
    type_definition         go to state 213


state 193

   70 parameter_specification_list: ';' parameter_specification parameter_specification_list .

    $default  reduce using rule 70 (parameter_specification_list)


state 194

    6 assign_expression: ASSIGNMENT_OP expression .

    $default  reduce using rule 6 (assign_expression)


state 195

   68 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression ';' .

    $default  reduce using rule 68 (object_declaration)


state 196

    5 array_type_definition: ARRAY '(' expression expression_list . ')' OF type_definition

    ')'  shift, and go to state 214


state 197

   87 record_type_definition: RECORD component_list END RECORD .

    $default  reduce using rule 87 (record_type_definition)


state 198

   17 component_item: IDENTIFIER identifier_list . ':' type_definition assign_expression ';'

    ':'  shift, and go to state 215


state 199

   13 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END . CASE ';'

    CASE  shift, and go to state 216


state 200

   14 case_statement_alternative: WHEN . discrete_choice_list ARROW sequence_of_statements
   32 discrete_choice: . expression
   33                | . INTEGER_TYPE
   34                | . OTHERS
   35 discrete_choice_list: . discrete_choice_list '|' discrete_choice
   36                     | . discrete_choice
   37                     | .  [ARROW, '|']
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
   88 relation: . simple_expression
   89         | . simple_expression relational_operator simple_expression
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: . unary_adding_operator term binary_adding_list
  104                  | . unary_adding_operator term
  105                  | . term binary_adding_list
  106                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    OTHERS             shift, and go to state 217
    '+'                shift, and go to state 79
    '-'                shift, and go to state 80
    INTEGER_TYPE       shift, and go to state 218
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    $default  reduce using rule 37 (discrete_choice_list)

    discrete_choice        go to state 219
    discrete_choice_list   go to state 220
    expression             go to state 221
    factor                 go to state 88
    function_call          go to state 89
    indexed_component      go to state 48
    primary                go to state 90
    relation               go to state 91
    selected_component     go to state 53
    simple_expression      go to state 92
    term                   go to state 93
    unary_adding_operator  go to state 94
    variable               go to state 95


state 201

   15 case_statement_alternative_list: case_statement_alternative_list case_statement_alternative .

    $default  reduce using rule 15 (case_statement_alternative_list)


state 202

   38 elsif_list: elsif_list . elsif_statement
   40 else_statement: . ELSE sequence_of_statements
   41               | .  [END]
   42 elsif_statement: . ELSIF expression THEN sequence_of_statements
   56 if_statement: IF expression THEN sequence_of_statements elsif_list . else_statement END IF ';'

    ELSE   shift, and go to state 222
    ELSIF  shift, and go to state 223

    $default  reduce using rule 41 (else_statement)

    else_statement   go to state 224
    elsif_statement  go to state 225


state 203

   90 relation_list: logical_operator relation relation_list .

    $default  reduce using rule 90 (relation_list)


state 204

   10 binary_adding_list: binary_adding_operator term binary_adding_list .

    $default  reduce using rule 10 (binary_adding_list)


state 205

   44 expression_list: . ',' expression expression_list
   44                | ',' expression . expression_list
   45                | .  [')', ']']

    ','  shift, and go to state 179

    $default  reduce using rule 45 (expression_list)

    expression_list  go to state 226


state 206

   57 indexed_component: IDENTIFIER '[' expression expression_list ']' .

    $default  reduce using rule 57 (indexed_component)


state 207

   60 loop_statement: WHILE expression LOOP sequence_of_statements END . LOOP ';'

    LOOP  shift, and go to state 227


state 208

   82 procedure_call_statement: PUT '(' STRING_LITERAL ')' ';' .

    $default  reduce using rule 82 (procedure_call_statement)


state 209

   83 procedure_call_statement: PUT '(' variable ')' ';' .

    $default  reduce using rule 83 (procedure_call_statement)


state 210

   84 procedure_call_statement: GET '(' variable ')' ';' .

    $default  reduce using rule 84 (procedure_call_statement)


state 211

  113 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';' .

    $default  reduce using rule 113 (subprogram_body)


state 212

   62 mode: IN OUT .

    $default  reduce using rule 62 (mode)


state 213

    6 assign_expression: . ASSIGNMENT_OP expression
    7                  | .  [';', ')']
   69 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition . assign_expression

    ASSIGNMENT_OP  shift, and go to state 163

    $default  reduce using rule 7 (assign_expression)

    assign_expression  go to state 228


state 214

    5 array_type_definition: ARRAY '(' expression expression_list ')' . OF type_definition

    OF  shift, and go to state 229


state 215

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   17 component_item: IDENTIFIER identifier_list ':' . type_definition assign_expression ';'
   87 record_type_definition: . RECORD component_list END RECORD
  120 type_definition: . INTEGER_TYPE
  121                | . REAL_TYPE
  122                | . CHARACTER_TYPE
  123                | . BOOLEAN_TYPE
  124                | . array_type_definition
  125                | . record_type_definition
  126                | . IDENTIFIER

    ARRAY           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    RECORD          shift, and go to state 67
    INTEGER_TYPE    shift, and go to state 68
    REAL_TYPE       shift, and go to state 69
    CHARACTER_TYPE  shift, and go to state 70
    BOOLEAN_TYPE    shift, and go to state 71

    array_type_definition   go to state 72
    record_type_definition  go to state 73
    type_definition         go to state 230


state 216

   13 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE . ';'

    ';'  shift, and go to state 231


state 217

   34 discrete_choice: OTHERS .

    $default  reduce using rule 34 (discrete_choice)


state 218

   33 discrete_choice: INTEGER_TYPE .

    $default  reduce using rule 33 (discrete_choice)


state 219

   36 discrete_choice_list: discrete_choice .

    $default  reduce using rule 36 (discrete_choice_list)


state 220

   14 case_statement_alternative: WHEN discrete_choice_list . ARROW sequence_of_statements
   35 discrete_choice_list: discrete_choice_list . '|' discrete_choice

    ARROW  shift, and go to state 232
    '|'    shift, and go to state 233


state 221

   32 discrete_choice: expression .

    $default  reduce using rule 32 (discrete_choice)


state 222

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   40 else_statement: ELSE . sequence_of_statements
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   67 null_statement: . NULL_ ';'
   81 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   82                         | . PUT '(' STRING_LITERAL ')' ';'
   83                         | . PUT '(' variable ')' ';'
   84                         | . GET '(' variable ')' ';'
   85                         | . NEW_LINE ';'
   98 return_statement: . RETURN ';'
   99                 | . RETURN simple_expression ';'
  100 selected_component: . variable '.' IDENTIFIER
  101 sequence_of_statements: . statement
  102                       | . statement sequence_of_statements
  107 simple_statement: . null_statement
  108                 | . return_statement
  109                 | . procedure_call_statement
  110 statement: . simple_statement
  111          | . compound_statement
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 35
    IF          shift, and go to state 36
    IDENTIFIER  shift, and go to state 37
    NULL_       shift, and go to state 38
    RETURN      shift, and go to state 39
    WHILE       shift, and go to state 40
    PUT         shift, and go to state 41
    GET         shift, and go to state 42
    NEW_LINE    shift, and go to state 43

    assignment_statement      go to state 44
    case_statement            go to state 45
    compound_statement        go to state 46
    if_statement              go to state 47
    indexed_component         go to state 48
    loop_statement            go to state 49
    null_statement            go to state 50
    procedure_call_statement  go to state 51
    return_statement          go to state 52
    selected_component        go to state 53
    sequence_of_statements    go to state 234
    simple_statement          go to state 55
    statement                 go to state 56
    variable                  go to state 57


state 223

   42 elsif_statement: ELSIF . expression THEN sequence_of_statements
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
   88 relation: . simple_expression
   89         | . simple_expression relational_operator simple_expression
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: . unary_adding_operator term binary_adding_list
  104                  | . unary_adding_operator term
  105                  | . term binary_adding_list
  106                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    '+'                shift, and go to state 79
    '-'                shift, and go to state 80
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    expression             go to state 235
    factor                 go to state 88
    function_call          go to state 89
    indexed_component      go to state 48
    primary                go to state 90
    relation               go to state 91
    selected_component     go to state 53
    simple_expression      go to state 92
    term                   go to state 93
    unary_adding_operator  go to state 94
    variable               go to state 95


state 224

   56 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement . END IF ';'

    END  shift, and go to state 236


state 225

   38 elsif_list: elsif_list elsif_statement .

    $default  reduce using rule 38 (elsif_list)


state 226

   44 expression_list: ',' expression expression_list .

    $default  reduce using rule 44 (expression_list)


state 227

   60 loop_statement: WHILE expression LOOP sequence_of_statements END LOOP . ';'

    ';'  shift, and go to state 237


state 228

   69 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition assign_expression .

    $default  reduce using rule 69 (parameter_specification)


state 229

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
    5                      | ARRAY '(' expression expression_list ')' OF . type_definition
   87 record_type_definition: . RECORD component_list END RECORD
  120 type_definition: . INTEGER_TYPE
  121                | . REAL_TYPE
  122                | . CHARACTER_TYPE
  123                | . BOOLEAN_TYPE
  124                | . array_type_definition
  125                | . record_type_definition
  126                | . IDENTIFIER

    ARRAY           shift, and go to state 65
    IDENTIFIER      shift, and go to state 66
    RECORD          shift, and go to state 67
    INTEGER_TYPE    shift, and go to state 68
    REAL_TYPE       shift, and go to state 69
    CHARACTER_TYPE  shift, and go to state 70
    BOOLEAN_TYPE    shift, and go to state 71

    array_type_definition   go to state 72
    record_type_definition  go to state 73
    type_definition         go to state 238


state 230

    6 assign_expression: . ASSIGNMENT_OP expression
    7                  | .  [';']
   17 component_item: IDENTIFIER identifier_list ':' type_definition . assign_expression ';'

    ASSIGNMENT_OP  shift, and go to state 163

    $default  reduce using rule 7 (assign_expression)

    assign_expression  go to state 239


state 231

   13 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE ';' .

    $default  reduce using rule 13 (case_statement)


state 232

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   14 case_statement_alternative: WHEN discrete_choice_list ARROW . sequence_of_statements
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   67 null_statement: . NULL_ ';'
   81 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   82                         | . PUT '(' STRING_LITERAL ')' ';'
   83                         | . PUT '(' variable ')' ';'
   84                         | . GET '(' variable ')' ';'
   85                         | . NEW_LINE ';'
   98 return_statement: . RETURN ';'
   99                 | . RETURN simple_expression ';'
  100 selected_component: . variable '.' IDENTIFIER
  101 sequence_of_statements: . statement
  102                       | . statement sequence_of_statements
  107 simple_statement: . null_statement
  108                 | . return_statement
  109                 | . procedure_call_statement
  110 statement: . simple_statement
  111          | . compound_statement
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 35
    IF          shift, and go to state 36
    IDENTIFIER  shift, and go to state 37
    NULL_       shift, and go to state 38
    RETURN      shift, and go to state 39
    WHILE       shift, and go to state 40
    PUT         shift, and go to state 41
    GET         shift, and go to state 42
    NEW_LINE    shift, and go to state 43

    assignment_statement      go to state 44
    case_statement            go to state 45
    compound_statement        go to state 46
    if_statement              go to state 47
    indexed_component         go to state 48
    loop_statement            go to state 49
    null_statement            go to state 50
    procedure_call_statement  go to state 51
    return_statement          go to state 52
    selected_component        go to state 53
    sequence_of_statements    go to state 240
    simple_statement          go to state 55
    statement                 go to state 56
    variable                  go to state 57


state 233

   32 discrete_choice: . expression
   33                | . INTEGER_TYPE
   34                | . OTHERS
   35 discrete_choice_list: discrete_choice_list '|' . discrete_choice
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   72 primary: . INTEGER_LITERAL
   73        | . FLOAT_LITERAL
   74        | . CHARACTER_LITERAL
   75        | . BOOLEAN_LITERAL
   76        | . NULL_
   77        | . STRING_LITERAL
   78        | . variable
   79        | . function_call
   80        | . '(' expression ')'
   88 relation: . simple_expression
   89         | . simple_expression relational_operator simple_expression
  100 selected_component: . variable '.' IDENTIFIER
  103 simple_expression: . unary_adding_operator term binary_adding_list
  104                  | . unary_adding_operator term
  105                  | . term binary_adding_list
  106                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 76
    NOT                shift, and go to state 77
    NULL_              shift, and go to state 78
    OTHERS             shift, and go to state 217
    '+'                shift, and go to state 79
    '-'                shift, and go to state 80
    INTEGER_TYPE       shift, and go to state 218
    INTEGER_LITERAL    shift, and go to state 81
    FLOAT_LITERAL      shift, and go to state 82
    CHARACTER_LITERAL  shift, and go to state 83
    STRING_LITERAL     shift, and go to state 84
    BOOLEAN_LITERAL    shift, and go to state 85
    '('                shift, and go to state 86

    discrete_choice        go to state 241
    expression             go to state 221
    factor                 go to state 88
    function_call          go to state 89
    indexed_component      go to state 48
    primary                go to state 90
    relation               go to state 91
    selected_component     go to state 53
    simple_expression      go to state 92
    term                   go to state 93
    unary_adding_operator  go to state 94
    variable               go to state 95


state 234

   40 else_statement: ELSE sequence_of_statements .

    $default  reduce using rule 40 (else_statement)


state 235

   42 elsif_statement: ELSIF expression . THEN sequence_of_statements

    THEN  shift, and go to state 242


state 236

   56 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END . IF ';'

    IF  shift, and go to state 243


state 237

   60 loop_statement: WHILE expression LOOP sequence_of_statements END LOOP ';' .

    $default  reduce using rule 60 (loop_statement)


state 238

    5 array_type_definition: ARRAY '(' expression expression_list ')' OF type_definition .

    $default  reduce using rule 5 (array_type_definition)


state 239

   17 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression . ';'

    ';'  shift, and go to state 244


state 240

   14 case_statement_alternative: WHEN discrete_choice_list ARROW sequence_of_statements .

    $default  reduce using rule 14 (case_statement_alternative)


state 241

   35 discrete_choice_list: discrete_choice_list '|' discrete_choice .

    $default  reduce using rule 35 (discrete_choice_list)


state 242

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   42 elsif_statement: ELSIF expression THEN . sequence_of_statements
   56 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   60 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   67 null_statement: . NULL_ ';'
   81 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   82                         | . PUT '(' STRING_LITERAL ')' ';'
   83                         | . PUT '(' variable ')' ';'
   84                         | . GET '(' variable ')' ';'
   85                         | . NEW_LINE ';'
   98 return_statement: . RETURN ';'
   99                 | . RETURN simple_expression ';'
  100 selected_component: . variable '.' IDENTIFIER
  101 sequence_of_statements: . statement
  102                       | . statement sequence_of_statements
  107 simple_statement: . null_statement
  108                 | . return_statement
  109                 | . procedure_call_statement
  110 statement: . simple_statement
  111          | . compound_statement
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 35
    IF          shift, and go to state 36
    IDENTIFIER  shift, and go to state 37
    NULL_       shift, and go to state 38
    RETURN      shift, and go to state 39
    WHILE       shift, and go to state 40
    PUT         shift, and go to state 41
    GET         shift, and go to state 42
    NEW_LINE    shift, and go to state 43

    assignment_statement      go to state 44
    case_statement            go to state 45
    compound_statement        go to state 46
    if_statement              go to state 47
    indexed_component         go to state 48
    loop_statement            go to state 49
    null_statement            go to state 50
    procedure_call_statement  go to state 51
    return_statement          go to state 52
    selected_component        go to state 53
    sequence_of_statements    go to state 245
    simple_statement          go to state 55
    statement                 go to state 56
    variable                  go to state 57


state 243

   56 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END IF . ';'

    ';'  shift, and go to state 246


state 244

   17 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression ';' .

    $default  reduce using rule 17 (component_item)


state 245

   42 elsif_statement: ELSIF expression THEN sequence_of_statements .

    $default  reduce using rule 42 (elsif_statement)


state 246

   56 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END IF ';' .

    $default  reduce using rule 56 (if_statement)
