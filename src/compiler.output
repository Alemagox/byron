Terminals unused in grammar

   DO
   PUT
   GET
   LENGTH
   NEW_LINE
   CONCAT
   CHARACTER_LITERAL


State 70 conflicts: 1 shift/reduce
State 128 conflicts: 2 shift/reduce


Grammar

    0 $accept: main $end

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    2 actual_parameter_part: '(' explicit_actual_parameter_list ')'
    3                      | %empty

    4 after_end_program_name: IDENTIFIER
    5                       | %empty

    6 array_type_definition: ARRAY '(' expression expression_list ')' OF type_definition

    7 assign_expression: ASSIGNMENT_OP expression
    8                  | %empty

    9 assignment_statement: name ASSIGNMENT_OP expression ';'

   10 binary_adding_list: term
   11                   | term binary_adding_operator binary_adding_list

   12 binary_adding_operator: '+'
   13                       | '-'

   14 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'

   15 case_statement_alternative: WHEN discrete_choice_list ARROW sequence_of_statements

   16 case_statement_alternative_list: case_statement_alternative_list case_statement_alternative
   17                                | %empty

   18 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression ';'

   19 component_list: component_list component_item
   20               | %empty

   21 compound_statement: if_statement
   22                   | loop_statement
   23                   | case_statement
   24                   | assignment_statement

   25 constant: CONSTANT
   26         | %empty

   27 declarative_item: type_declaration
   28                 | object_declaration
   29                 | subprogram_specification ';'
   30                 | subprogram_body

   31 declarative_part: declarative_item declarative_part
   32                 | %empty

   33 discrete_choice: expression
   34                | INTEGER_TYPE
   35                | OTHERS

   36 discrete_choice_list: discrete_choice_list '|' discrete_choice
   37                     | discrete_choice
   38                     | %empty

   39 elsif_list: elsif_statement elsif_list
   40           | %empty

   41 else_statement: ELSE expression THEN sequence_of_statements
   42               | %empty

   43 elsif_statement: ELSIF expression THEN sequence_of_statements

   44 explicit_actual_parameter: expression name

   45 explicit_actual_parameter_list: explicit_actual_parameter_list ',' explicit_actual_parameter
   46                               | explicit_actual_parameter
   47                               | %empty

   48 expression: relation relation_list

   49 expression_list: expression_list ',' expression
   50                | expression
   51                | %empty

   52 factor: primary
   53       | primary POWER_OP primary
   54       | NOT primary

   55 formal_part: '(' parameter_specification parameter_specification_list ')'
   56            | %empty

   57 function_specification: FUNCTION IDENTIFIER formal_part RETURN type_definition

   58 identifier_list: identifier_list ',' IDENTIFIER
   59                | IDENTIFIER
   60                | %empty

   61 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'

   62 indexed_component: IDENTIFIER '(' expression expression_list ')'

   63 logical_operator: AND
   64                 | OR

   65 loop_statement: WHILE expression LOOP sequence_of_statements END LOOP ';'

   66 mode: OUT
   67     | IN OUT
   68     | %empty

   69 multiplying_operator_list: '*'
   70                          | '/'
   71                          | %empty

   72 name: IDENTIFIER actual_parameter_part
   73     | indexed_component
   74     | selected_component

   75 null_statement: NULL_ ';'

   76 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'

   77 optional_simple_expression: simple_expression
   78                           | %empty

   79 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition assign_expression

   80 parameter_specification_list: ';' parameter_specification parameter_specification_list
   81                             | %empty

   82 primary: INTEGER_LITERAL
   83        | FLOAT_LITERAL
   84        | BOOLEAN_LITERAL
   85        | NULL_
   86        | STRING_LITERAL
   87        | name
   88        | '(' expression ')'

   89 procedure_call_statement: IDENTIFIER actual_parameter_part ';'

   90 procedure_specification: PROCEDURE IDENTIFIER formal_part

   91 record_type_definition: RECORD component_list END RECORD

   92 relation: simple_expression
   93         | simple_expression relational_operator simple_expression

   94 relation_list: logical_operator relation relation_list
   95              | %empty

   96 relational_operator: '='
   97                    | '<'
   98                    | '>'
   99                    | NOT_EQUAL_OP
  100                    | LESSER_EQUAL_OP
  101                    | GREATER_EQUAL_OP

  102 return_statement: RETURN optional_simple_expression ';'

  103 selected_component: name '.' IDENTIFIER

  104 sequence_of_statements: statement
  105                       | statement sequence_of_statements

  106 simple_expression: unary_adding_operator term binary_adding_list
  107                  | term binary_adding_list

  108 simple_statement: null_statement
  109                 | return_statement
  110                 | procedure_call_statement

  111 statement: simple_statement
  112          | compound_statement

  113 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END after_end_program_name ';'

  114 subprogram_specification: procedure_specification
  115                         | function_specification

  116 term: factor multiplying_operator_list

  117 type_declaration: TYPE IDENTIFIER IS type_definition ';'

  118 type_definition: INTEGER_TYPE
  119                | REAL_TYPE
  120                | CHARACTER_TYPE
  121                | BOOLEAN_TYPE
  122                | array_type_definition
  123                | record_type_definition

  124 unary_adding_operator: '+'
  125                      | '-'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 6 55 62 88
')' (41) 2 6 55 62 88
'*' (42) 69
'+' (43) 12 124
',' (44) 45 49 58
'-' (45) 13 125
'.' (46) 103
'/' (47) 70
':' (58) 18 76 79
';' (59) 1 9 14 18 29 61 65 75 76 80 89 102 113 117
'<' (60) 97
'=' (61) 96
'>' (62) 98
'|' (124) 36
error (256)
AND (258) 63
ARRAY (259) 6
BEGIN_ (260) 1 113
CASE (261) 14
CONSTANT (262) 25
DO (263)
ELSE (264) 41
ELSIF (265) 43
END (266) 1 14 61 65 91 113
FUNCTION (267) 57
IF (268) 61
IDENTIFIER (269) 1 4 14 18 57 58 59 62 72 76 79 89 90 103 117
IN (270) 67
IS (271) 1 14 113 117
LOOP (272) 65
NOT (273) 54
NULL_ (274) 75 85
OF (275) 6
OR (276) 64
OTHERS (277) 35
OUT (278) 66 67
PROCEDURE (279) 1 90
RECORD (280) 91
RETURN (281) 57 102
THEN (282) 41 43 61
TYPE (283) 117
WHEN (284) 15
WHILE (285) 65
ARROW (286) 15
ASSIGNMENT_OP (287) 7 9
NOT_EQUAL_OP (288) 99
GREATER_EQUAL_OP (289) 101
LESSER_EQUAL_OP (290) 100
POWER_OP (291) 53
PUT (292)
GET (293)
LENGTH (294)
NEW_LINE (295)
CONCAT (296)
INTEGER_TYPE (297) 34 118
REAL_TYPE (298) 119
CHARACTER_TYPE (299) 120
BOOLEAN_TYPE (300) 121
INTEGER_LITERAL (301) 82
FLOAT_LITERAL (302) 83
CHARACTER_LITERAL (303)
STRING_LITERAL (304) 86
BOOLEAN_LITERAL (305) 84


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
main (66)
    on left: 1, on right: 0
actual_parameter_part (67)
    on left: 2 3, on right: 72 89
after_end_program_name (68)
    on left: 4 5, on right: 113
array_type_definition (69)
    on left: 6, on right: 122
assign_expression (70)
    on left: 7 8, on right: 18 76 79
assignment_statement (71)
    on left: 9, on right: 24
binary_adding_list (72)
    on left: 10 11, on right: 11 106 107
binary_adding_operator (73)
    on left: 12 13, on right: 11
case_statement (74)
    on left: 14, on right: 23
case_statement_alternative (75)
    on left: 15, on right: 16
case_statement_alternative_list (76)
    on left: 16 17, on right: 14 16
component_item (77)
    on left: 18, on right: 19
component_list (78)
    on left: 19 20, on right: 19 91
compound_statement (79)
    on left: 21 22 23 24, on right: 112
constant (80)
    on left: 25 26, on right: 76
declarative_item (81)
    on left: 27 28 29 30, on right: 31
declarative_part (82)
    on left: 31 32, on right: 1 31 113
discrete_choice (83)
    on left: 33 34 35, on right: 36 37
discrete_choice_list (84)
    on left: 36 37 38, on right: 15 36
elsif_list (85)
    on left: 39 40, on right: 39 61
else_statement (86)
    on left: 41 42, on right: 61
elsif_statement (87)
    on left: 43, on right: 39
explicit_actual_parameter (88)
    on left: 44, on right: 45 46
explicit_actual_parameter_list (89)
    on left: 45 46 47, on right: 2 45
expression (90)
    on left: 48, on right: 6 7 9 33 41 43 44 49 50 61 62 65 88
expression_list (91)
    on left: 49 50 51, on right: 6 49 62
factor (92)
    on left: 52 53 54, on right: 116
formal_part (93)
    on left: 55 56, on right: 57 90
function_specification (94)
    on left: 57, on right: 115
identifier_list (95)
    on left: 58 59 60, on right: 18 58 76 79
if_statement (96)
    on left: 61, on right: 21
indexed_component (97)
    on left: 62, on right: 73
logical_operator (98)
    on left: 63 64, on right: 94
loop_statement (99)
    on left: 65, on right: 22
mode (100)
    on left: 66 67 68, on right: 79
multiplying_operator_list (101)
    on left: 69 70 71, on right: 116
name (102)
    on left: 72 73 74, on right: 9 44 87 103
null_statement (103)
    on left: 75, on right: 108
object_declaration (104)
    on left: 76, on right: 28
optional_simple_expression (105)
    on left: 77 78, on right: 102
parameter_specification (106)
    on left: 79, on right: 55 80
parameter_specification_list (107)
    on left: 80 81, on right: 55 80
primary (108)
    on left: 82 83 84 85 86 87 88, on right: 52 53 54
procedure_call_statement (109)
    on left: 89, on right: 110
procedure_specification (110)
    on left: 90, on right: 114
record_type_definition (111)
    on left: 91, on right: 123
relation (112)
    on left: 92 93, on right: 48 94
relation_list (113)
    on left: 94 95, on right: 48 94
relational_operator (114)
    on left: 96 97 98 99 100 101, on right: 93
return_statement (115)
    on left: 102, on right: 109
selected_component (116)
    on left: 103, on right: 74
sequence_of_statements (117)
    on left: 104 105, on right: 1 15 41 43 61 65 105 113
simple_expression (118)
    on left: 106 107, on right: 77 92 93
simple_statement (119)
    on left: 108 109 110, on right: 111
statement (120)
    on left: 111 112, on right: 104 105
subprogram_body (121)
    on left: 113, on right: 30
subprogram_specification (122)
    on left: 114 115, on right: 29 113
term (123)
    on left: 116, on right: 10 11 106 107
type_declaration (124)
    on left: 117, on right: 27
type_definition (125)
    on left: 118 119 120 121 122 123, on right: 6 18 57 76 79 117
unary_adding_operator (126)
    on left: 124 125, on right: 106


State 0

    0 $accept: . main $end
    1 main: . PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    PROCEDURE  shift, and go to state 1

    main  go to state 2


State 1

    1 main: PROCEDURE . IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 3


State 2

    0 $accept: main . $end

    $end  shift, and go to state 4


State 3

    1 main: PROCEDURE IDENTIFIER . IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    IS  shift, and go to state 5


State 4

    0 $accept: main $end .

    $default  accept


State 5

    1 main: PROCEDURE IDENTIFIER IS . declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
   27 declarative_item: . type_declaration
   28                 | . object_declaration
   29                 | . subprogram_specification ';'
   30                 | . subprogram_body
   31 declarative_part: . declarative_item declarative_part
   32                 | .  [BEGIN_]
   57 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   76 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   90 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  113 subprogram_body: . subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END after_end_program_name ';'
  114 subprogram_specification: . procedure_specification
  115                         | . function_specification
  117 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    PROCEDURE   shift, and go to state 8
    TYPE        shift, and go to state 9

    $default  reduce using rule 32 (declarative_part)

    declarative_item          go to state 10
    declarative_part          go to state 11
    function_specification    go to state 12
    object_declaration        go to state 13
    procedure_specification   go to state 14
    subprogram_body           go to state 15
    subprogram_specification  go to state 16
    type_declaration          go to state 17


State 6

   57 function_specification: FUNCTION . IDENTIFIER formal_part RETURN type_definition

    IDENTIFIER  shift, and go to state 18


State 7

   58 identifier_list: . identifier_list ',' IDENTIFIER
   59                | . IDENTIFIER
   60                | .  [':', ',']
   76 object_declaration: IDENTIFIER . identifier_list ':' constant type_definition assign_expression ';'

    IDENTIFIER  shift, and go to state 19

    $default  reduce using rule 60 (identifier_list)

    identifier_list  go to state 20


State 8

   90 procedure_specification: PROCEDURE . IDENTIFIER formal_part

    IDENTIFIER  shift, and go to state 21


State 9

  117 type_declaration: TYPE . IDENTIFIER IS type_definition ';'

    IDENTIFIER  shift, and go to state 22


State 10

   27 declarative_item: . type_declaration
   28                 | . object_declaration
   29                 | . subprogram_specification ';'
   30                 | . subprogram_body
   31 declarative_part: . declarative_item declarative_part
   31                 | declarative_item . declarative_part
   32                 | .  [BEGIN_]
   57 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   76 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   90 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  113 subprogram_body: . subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END after_end_program_name ';'
  114 subprogram_specification: . procedure_specification
  115                         | . function_specification
  117 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    PROCEDURE   shift, and go to state 8
    TYPE        shift, and go to state 9

    $default  reduce using rule 32 (declarative_part)

    declarative_item          go to state 10
    declarative_part          go to state 23
    function_specification    go to state 12
    object_declaration        go to state 13
    procedure_specification   go to state 14
    subprogram_body           go to state 15
    subprogram_specification  go to state 16
    type_declaration          go to state 17


State 11

    1 main: PROCEDURE IDENTIFIER IS declarative_part . BEGIN_ sequence_of_statements END IDENTIFIER ';'

    BEGIN_  shift, and go to state 24


State 12

  115 subprogram_specification: function_specification .

    $default  reduce using rule 115 (subprogram_specification)


State 13

   28 declarative_item: object_declaration .

    $default  reduce using rule 28 (declarative_item)


State 14

  114 subprogram_specification: procedure_specification .

    $default  reduce using rule 114 (subprogram_specification)


State 15

   30 declarative_item: subprogram_body .

    $default  reduce using rule 30 (declarative_item)


State 16

   29 declarative_item: subprogram_specification . ';'
  113 subprogram_body: subprogram_specification . IS declarative_part BEGIN_ sequence_of_statements END after_end_program_name ';'

    IS   shift, and go to state 25
    ';'  shift, and go to state 26


State 17

   27 declarative_item: type_declaration .

    $default  reduce using rule 27 (declarative_item)


State 18

   55 formal_part: . '(' parameter_specification parameter_specification_list ')'
   56            | .  [RETURN]
   57 function_specification: FUNCTION IDENTIFIER . formal_part RETURN type_definition

    '('  shift, and go to state 27

    $default  reduce using rule 56 (formal_part)

    formal_part  go to state 28


State 19

   59 identifier_list: IDENTIFIER .

    $default  reduce using rule 59 (identifier_list)


State 20

   58 identifier_list: identifier_list . ',' IDENTIFIER
   76 object_declaration: IDENTIFIER identifier_list . ':' constant type_definition assign_expression ';'

    ':'  shift, and go to state 29
    ','  shift, and go to state 30


State 21

   55 formal_part: . '(' parameter_specification parameter_specification_list ')'
   56            | .  [IS, ';']
   90 procedure_specification: PROCEDURE IDENTIFIER . formal_part

    '('  shift, and go to state 27

    $default  reduce using rule 56 (formal_part)

    formal_part  go to state 31


State 22

  117 type_declaration: TYPE IDENTIFIER . IS type_definition ';'

    IS  shift, and go to state 32


State 23

   31 declarative_part: declarative_item declarative_part .

    $default  reduce using rule 31 (declarative_part)


State 24

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ . sequence_of_statements END IDENTIFIER ';'
    9 assignment_statement: . name ASSIGNMENT_OP expression ';'
   14 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   21 compound_statement: . if_statement
   22                   | . loop_statement
   23                   | . case_statement
   24                   | . assignment_statement
   61 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   65 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   75 null_statement: . NULL_ ';'
   89 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
  102 return_statement: . RETURN optional_simple_expression ';'
  103 selected_component: . name '.' IDENTIFIER
  104 sequence_of_statements: . statement
  105                       | . statement sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    name                      go to state 45
    null_statement            go to state 46
    procedure_call_statement  go to state 47
    return_statement          go to state 48
    selected_component        go to state 49
    sequence_of_statements    go to state 50
    simple_statement          go to state 51
    statement                 go to state 52


State 25

   27 declarative_item: . type_declaration
   28                 | . object_declaration
   29                 | . subprogram_specification ';'
   30                 | . subprogram_body
   31 declarative_part: . declarative_item declarative_part
   32                 | .  [BEGIN_]
   57 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   76 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   90 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  113 subprogram_body: . subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END after_end_program_name ';'
  113                | subprogram_specification IS . declarative_part BEGIN_ sequence_of_statements END after_end_program_name ';'
  114 subprogram_specification: . procedure_specification
  115                         | . function_specification
  117 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    PROCEDURE   shift, and go to state 8
    TYPE        shift, and go to state 9

    $default  reduce using rule 32 (declarative_part)

    declarative_item          go to state 10
    declarative_part          go to state 53
    function_specification    go to state 12
    object_declaration        go to state 13
    procedure_specification   go to state 14
    subprogram_body           go to state 15
    subprogram_specification  go to state 16
    type_declaration          go to state 17


State 26

   29 declarative_item: subprogram_specification ';' .

    $default  reduce using rule 29 (declarative_item)


State 27

   55 formal_part: '(' . parameter_specification parameter_specification_list ')'
   79 parameter_specification: . IDENTIFIER identifier_list ':' mode type_definition assign_expression

    IDENTIFIER  shift, and go to state 54

    parameter_specification  go to state 55


State 28

   57 function_specification: FUNCTION IDENTIFIER formal_part . RETURN type_definition

    RETURN  shift, and go to state 56


State 29

   25 constant: . CONSTANT
   26         | .  [ARRAY, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]
   76 object_declaration: IDENTIFIER identifier_list ':' . constant type_definition assign_expression ';'

    CONSTANT  shift, and go to state 57

    $default  reduce using rule 26 (constant)

    constant  go to state 58


State 30

   58 identifier_list: identifier_list ',' . IDENTIFIER

    IDENTIFIER  shift, and go to state 59


State 31

   90 procedure_specification: PROCEDURE IDENTIFIER formal_part .

    $default  reduce using rule 90 (procedure_specification)


State 32

    6 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   91 record_type_definition: . RECORD component_list END RECORD
  117 type_declaration: TYPE IDENTIFIER IS . type_definition ';'
  118 type_definition: . INTEGER_TYPE
  119                | . REAL_TYPE
  120                | . CHARACTER_TYPE
  121                | . BOOLEAN_TYPE
  122                | . array_type_definition
  123                | . record_type_definition

    ARRAY           shift, and go to state 60
    RECORD          shift, and go to state 61
    INTEGER_TYPE    shift, and go to state 62
    REAL_TYPE       shift, and go to state 63
    CHARACTER_TYPE  shift, and go to state 64
    BOOLEAN_TYPE    shift, and go to state 65

    array_type_definition   go to state 66
    record_type_definition  go to state 67
    type_definition         go to state 68


State 33

   14 case_statement: CASE . IDENTIFIER IS case_statement_alternative_list END CASE ';'

    IDENTIFIER  shift, and go to state 69


State 34

   48 expression: . relation relation_list
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   61 if_statement: IF . expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    expression             go to state 80
    factor                 go to state 81
    indexed_component      go to state 43
    name                   go to state 82
    primary                go to state 83
    relation               go to state 84
    selected_component     go to state 49
    simple_expression      go to state 85
    term                   go to state 86
    unary_adding_operator  go to state 87


State 35

    2 actual_parameter_part: . '(' explicit_actual_parameter_list ')'
    3                      | .  [ASSIGNMENT_OP, ';', '.']
   62 indexed_component: IDENTIFIER . '(' expression expression_list ')'
   72 name: IDENTIFIER . actual_parameter_part
   89 procedure_call_statement: IDENTIFIER . actual_parameter_part ';'

    '('  shift, and go to state 88

    $default  reduce using rule 3 (actual_parameter_part)

    actual_parameter_part  go to state 89


State 36

   75 null_statement: NULL_ . ';'

    ';'  shift, and go to state 90


State 37

   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   77 optional_simple_expression: . simple_expression
   78                           | .  [';']
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
  102 return_statement: RETURN . optional_simple_expression ';'
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    $default  reduce using rule 78 (optional_simple_expression)

    factor                      go to state 81
    indexed_component           go to state 43
    name                        go to state 82
    optional_simple_expression  go to state 91
    primary                     go to state 83
    selected_component          go to state 49
    simple_expression           go to state 92
    term                        go to state 86
    unary_adding_operator       go to state 87


State 38

   48 expression: . relation relation_list
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   65 loop_statement: WHILE . expression LOOP sequence_of_statements END LOOP ';'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    expression             go to state 93
    factor                 go to state 81
    indexed_component      go to state 43
    name                   go to state 82
    primary                go to state 83
    relation               go to state 84
    selected_component     go to state 49
    simple_expression      go to state 85
    term                   go to state 86
    unary_adding_operator  go to state 87


State 39

   24 compound_statement: assignment_statement .

    $default  reduce using rule 24 (compound_statement)


State 40

   23 compound_statement: case_statement .

    $default  reduce using rule 23 (compound_statement)


State 41

  112 statement: compound_statement .

    $default  reduce using rule 112 (statement)


State 42

   21 compound_statement: if_statement .

    $default  reduce using rule 21 (compound_statement)


State 43

   73 name: indexed_component .

    $default  reduce using rule 73 (name)


State 44

   22 compound_statement: loop_statement .

    $default  reduce using rule 22 (compound_statement)


State 45

    9 assignment_statement: name . ASSIGNMENT_OP expression ';'
  103 selected_component: name . '.' IDENTIFIER

    ASSIGNMENT_OP  shift, and go to state 94
    '.'            shift, and go to state 95


State 46

  108 simple_statement: null_statement .

    $default  reduce using rule 108 (simple_statement)


State 47

  110 simple_statement: procedure_call_statement .

    $default  reduce using rule 110 (simple_statement)


State 48

  109 simple_statement: return_statement .

    $default  reduce using rule 109 (simple_statement)


State 49

   74 name: selected_component .

    $default  reduce using rule 74 (name)


State 50

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements . END IDENTIFIER ';'

    END  shift, and go to state 96


State 51

  111 statement: simple_statement .

    $default  reduce using rule 111 (statement)


State 52

    9 assignment_statement: . name ASSIGNMENT_OP expression ';'
   14 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   21 compound_statement: . if_statement
   22                   | . loop_statement
   23                   | . case_statement
   24                   | . assignment_statement
   61 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   65 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   75 null_statement: . NULL_ ';'
   89 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
  102 return_statement: . RETURN optional_simple_expression ';'
  103 selected_component: . name '.' IDENTIFIER
  104 sequence_of_statements: . statement
  104                       | statement .  [ELSE, ELSIF, END, WHEN]
  105                       | . statement sequence_of_statements
  105                       | statement . sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    $default  reduce using rule 104 (sequence_of_statements)

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    name                      go to state 45
    null_statement            go to state 46
    procedure_call_statement  go to state 47
    return_statement          go to state 48
    selected_component        go to state 49
    sequence_of_statements    go to state 97
    simple_statement          go to state 51
    statement                 go to state 52


State 53

  113 subprogram_body: subprogram_specification IS declarative_part . BEGIN_ sequence_of_statements END after_end_program_name ';'

    BEGIN_  shift, and go to state 98


State 54

   58 identifier_list: . identifier_list ',' IDENTIFIER
   59                | . IDENTIFIER
   60                | .  [':', ',']
   79 parameter_specification: IDENTIFIER . identifier_list ':' mode type_definition assign_expression

    IDENTIFIER  shift, and go to state 19

    $default  reduce using rule 60 (identifier_list)

    identifier_list  go to state 99


State 55

   55 formal_part: '(' parameter_specification . parameter_specification_list ')'
   80 parameter_specification_list: . ';' parameter_specification parameter_specification_list
   81                             | .  [')']

    ';'  shift, and go to state 100

    $default  reduce using rule 81 (parameter_specification_list)

    parameter_specification_list  go to state 101


State 56

    6 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   57 function_specification: FUNCTION IDENTIFIER formal_part RETURN . type_definition
   91 record_type_definition: . RECORD component_list END RECORD
  118 type_definition: . INTEGER_TYPE
  119                | . REAL_TYPE
  120                | . CHARACTER_TYPE
  121                | . BOOLEAN_TYPE
  122                | . array_type_definition
  123                | . record_type_definition

    ARRAY           shift, and go to state 60
    RECORD          shift, and go to state 61
    INTEGER_TYPE    shift, and go to state 62
    REAL_TYPE       shift, and go to state 63
    CHARACTER_TYPE  shift, and go to state 64
    BOOLEAN_TYPE    shift, and go to state 65

    array_type_definition   go to state 66
    record_type_definition  go to state 67
    type_definition         go to state 102


State 57

   25 constant: CONSTANT .

    $default  reduce using rule 25 (constant)


State 58

    6 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   76 object_declaration: IDENTIFIER identifier_list ':' constant . type_definition assign_expression ';'
   91 record_type_definition: . RECORD component_list END RECORD
  118 type_definition: . INTEGER_TYPE
  119                | . REAL_TYPE
  120                | . CHARACTER_TYPE
  121                | . BOOLEAN_TYPE
  122                | . array_type_definition
  123                | . record_type_definition

    ARRAY           shift, and go to state 60
    RECORD          shift, and go to state 61
    INTEGER_TYPE    shift, and go to state 62
    REAL_TYPE       shift, and go to state 63
    CHARACTER_TYPE  shift, and go to state 64
    BOOLEAN_TYPE    shift, and go to state 65

    array_type_definition   go to state 66
    record_type_definition  go to state 67
    type_definition         go to state 103


State 59

   58 identifier_list: identifier_list ',' IDENTIFIER .

    $default  reduce using rule 58 (identifier_list)


State 60

    6 array_type_definition: ARRAY . '(' expression expression_list ')' OF type_definition

    '('  shift, and go to state 104


State 61

   19 component_list: . component_list component_item
   20               | .
   91 record_type_definition: RECORD . component_list END RECORD

    $default  reduce using rule 20 (component_list)

    component_list  go to state 105


State 62

  118 type_definition: INTEGER_TYPE .

    $default  reduce using rule 118 (type_definition)


State 63

  119 type_definition: REAL_TYPE .

    $default  reduce using rule 119 (type_definition)


State 64

  120 type_definition: CHARACTER_TYPE .

    $default  reduce using rule 120 (type_definition)


State 65

  121 type_definition: BOOLEAN_TYPE .

    $default  reduce using rule 121 (type_definition)


State 66

  122 type_definition: array_type_definition .

    $default  reduce using rule 122 (type_definition)


State 67

  123 type_definition: record_type_definition .

    $default  reduce using rule 123 (type_definition)


State 68

  117 type_declaration: TYPE IDENTIFIER IS type_definition . ';'

    ';'  shift, and go to state 106


State 69

   14 case_statement: CASE IDENTIFIER . IS case_statement_alternative_list END CASE ';'

    IS  shift, and go to state 107


State 70

    2 actual_parameter_part: . '(' explicit_actual_parameter_list ')'
    3                      | .  [AND, IDENTIFIER, LOOP, NOT, NULL_, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', '*', POWER_OP, INTEGER_LITERAL, FLOAT_LITERAL, STRING_LITERAL, BOOLEAN_LITERAL, ';', '(', ')', '|', ',', '/', '=', '<', '>', '.']
   62 indexed_component: IDENTIFIER . '(' expression expression_list ')'
   72 name: IDENTIFIER . actual_parameter_part

    '('  shift, and go to state 88

    '('       [reduce using rule 3 (actual_parameter_part)]
    $default  reduce using rule 3 (actual_parameter_part)

    actual_parameter_part  go to state 108


State 71

   54 factor: NOT . primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
  103 selected_component: . name '.' IDENTIFIER

    IDENTIFIER       shift, and go to state 70
    NULL_            shift, and go to state 72
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    indexed_component   go to state 43
    name                go to state 82
    primary             go to state 109
    selected_component  go to state 49


State 72

   85 primary: NULL_ .

    $default  reduce using rule 85 (primary)


State 73

  124 unary_adding_operator: '+' .

    $default  reduce using rule 124 (unary_adding_operator)


State 74

  125 unary_adding_operator: '-' .

    $default  reduce using rule 125 (unary_adding_operator)


State 75

   82 primary: INTEGER_LITERAL .

    $default  reduce using rule 82 (primary)


State 76

   83 primary: FLOAT_LITERAL .

    $default  reduce using rule 83 (primary)


State 77

   86 primary: STRING_LITERAL .

    $default  reduce using rule 86 (primary)


State 78

   84 primary: BOOLEAN_LITERAL .

    $default  reduce using rule 84 (primary)


State 79

   48 expression: . relation relation_list
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   88        | '(' . expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    expression             go to state 110
    factor                 go to state 81
    indexed_component      go to state 43
    name                   go to state 82
    primary                go to state 83
    relation               go to state 84
    selected_component     go to state 49
    simple_expression      go to state 85
    term                   go to state 86
    unary_adding_operator  go to state 87


State 80

   61 if_statement: IF expression . THEN sequence_of_statements elsif_list else_statement END IF ';'

    THEN  shift, and go to state 111


State 81

   69 multiplying_operator_list: . '*'
   70                          | . '/'
   71                          | .  [AND, IDENTIFIER, LOOP, NOT, NULL_, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', INTEGER_LITERAL, FLOAT_LITERAL, STRING_LITERAL, BOOLEAN_LITERAL, ';', '(', ')', '|', ',', '=', '<', '>']
  116 term: factor . multiplying_operator_list

    '*'  shift, and go to state 112
    '/'  shift, and go to state 113

    $default  reduce using rule 71 (multiplying_operator_list)

    multiplying_operator_list  go to state 114


State 82

   87 primary: name .  [AND, IDENTIFIER, LOOP, NOT, NULL_, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', '*', POWER_OP, INTEGER_LITERAL, FLOAT_LITERAL, STRING_LITERAL, BOOLEAN_LITERAL, ';', '(', ')', '|', ',', '/', '=', '<', '>']
  103 selected_component: name . '.' IDENTIFIER

    '.'  shift, and go to state 95

    $default  reduce using rule 87 (primary)


State 83

   52 factor: primary .  [AND, IDENTIFIER, LOOP, NOT, NULL_, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', '*', INTEGER_LITERAL, FLOAT_LITERAL, STRING_LITERAL, BOOLEAN_LITERAL, ';', '(', ')', '|', ',', '/', '=', '<', '>']
   53       | primary . POWER_OP primary

    POWER_OP  shift, and go to state 115

    $default  reduce using rule 52 (factor)


State 84

   48 expression: relation . relation_list
   63 logical_operator: . AND
   64                 | . OR
   94 relation_list: . logical_operator relation relation_list
   95              | .  [IDENTIFIER, LOOP, NOT, NULL_, THEN, ARROW, '+', '-', INTEGER_LITERAL, FLOAT_LITERAL, STRING_LITERAL, BOOLEAN_LITERAL, ';', '(', ')', '|', ',']

    AND  shift, and go to state 116
    OR   shift, and go to state 117

    $default  reduce using rule 95 (relation_list)

    logical_operator  go to state 118
    relation_list     go to state 119


State 85

   92 relation: simple_expression .  [AND, IDENTIFIER, LOOP, NOT, NULL_, OR, THEN, ARROW, '+', '-', INTEGER_LITERAL, FLOAT_LITERAL, STRING_LITERAL, BOOLEAN_LITERAL, ';', '(', ')', '|', ',']
   93         | simple_expression . relational_operator simple_expression
   96 relational_operator: . '='
   97                    | . '<'
   98                    | . '>'
   99                    | . NOT_EQUAL_OP
  100                    | . LESSER_EQUAL_OP
  101                    | . GREATER_EQUAL_OP

    NOT_EQUAL_OP      shift, and go to state 120
    GREATER_EQUAL_OP  shift, and go to state 121
    LESSER_EQUAL_OP   shift, and go to state 122
    '='               shift, and go to state 123
    '<'               shift, and go to state 124
    '>'               shift, and go to state 125

    $default  reduce using rule 92 (relation)

    relational_operator  go to state 126


State 86

   10 binary_adding_list: . term
   11                   | . term binary_adding_operator binary_adding_list
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
  103 selected_component: . name '.' IDENTIFIER
  107 simple_expression: term . binary_adding_list
  116 term: . factor multiplying_operator_list

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    binary_adding_list  go to state 127
    factor              go to state 81
    indexed_component   go to state 43
    name                go to state 82
    primary             go to state 83
    selected_component  go to state 49
    term                go to state 128


State 87

   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: unary_adding_operator . term binary_adding_list
  116 term: . factor multiplying_operator_list

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    factor              go to state 81
    indexed_component   go to state 43
    name                go to state 82
    primary             go to state 83
    selected_component  go to state 49
    term                go to state 129


State 88

    2 actual_parameter_part: '(' . explicit_actual_parameter_list ')'
   44 explicit_actual_parameter: . expression name
   45 explicit_actual_parameter_list: . explicit_actual_parameter_list ',' explicit_actual_parameter
   46                               | . explicit_actual_parameter
   47                               | .  [')', ',']
   48 expression: . relation relation_list
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   62                  | IDENTIFIER '(' . expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    $default  reduce using rule 47 (explicit_actual_parameter_list)

    explicit_actual_parameter       go to state 130
    explicit_actual_parameter_list  go to state 131
    expression                      go to state 132
    factor                          go to state 81
    indexed_component               go to state 43
    name                            go to state 82
    primary                         go to state 83
    relation                        go to state 84
    selected_component              go to state 49
    simple_expression               go to state 85
    term                            go to state 86
    unary_adding_operator           go to state 87


State 89

   72 name: IDENTIFIER actual_parameter_part .  [ASSIGNMENT_OP, '.']
   89 procedure_call_statement: IDENTIFIER actual_parameter_part . ';'

    ';'  shift, and go to state 133

    $default  reduce using rule 72 (name)


State 90

   75 null_statement: NULL_ ';' .

    $default  reduce using rule 75 (null_statement)


State 91

  102 return_statement: RETURN optional_simple_expression . ';'

    ';'  shift, and go to state 134


State 92

   77 optional_simple_expression: simple_expression .

    $default  reduce using rule 77 (optional_simple_expression)


State 93

   65 loop_statement: WHILE expression . LOOP sequence_of_statements END LOOP ';'

    LOOP  shift, and go to state 135


State 94

    9 assignment_statement: name ASSIGNMENT_OP . expression ';'
   48 expression: . relation relation_list
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    expression             go to state 136
    factor                 go to state 81
    indexed_component      go to state 43
    name                   go to state 82
    primary                go to state 83
    relation               go to state 84
    selected_component     go to state 49
    simple_expression      go to state 85
    term                   go to state 86
    unary_adding_operator  go to state 87


State 95

  103 selected_component: name '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 137


State 96

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 138


State 97

  105 sequence_of_statements: statement sequence_of_statements .

    $default  reduce using rule 105 (sequence_of_statements)


State 98

    9 assignment_statement: . name ASSIGNMENT_OP expression ';'
   14 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   21 compound_statement: . if_statement
   22                   | . loop_statement
   23                   | . case_statement
   24                   | . assignment_statement
   61 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   65 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   75 null_statement: . NULL_ ';'
   89 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
  102 return_statement: . RETURN optional_simple_expression ';'
  103 selected_component: . name '.' IDENTIFIER
  104 sequence_of_statements: . statement
  105                       | . statement sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement
  113 subprogram_body: subprogram_specification IS declarative_part BEGIN_ . sequence_of_statements END after_end_program_name ';'

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    name                      go to state 45
    null_statement            go to state 46
    procedure_call_statement  go to state 47
    return_statement          go to state 48
    selected_component        go to state 49
    sequence_of_statements    go to state 139
    simple_statement          go to state 51
    statement                 go to state 52


State 99

   58 identifier_list: identifier_list . ',' IDENTIFIER
   79 parameter_specification: IDENTIFIER identifier_list . ':' mode type_definition assign_expression

    ':'  shift, and go to state 140
    ','  shift, and go to state 30


State 100

   79 parameter_specification: . IDENTIFIER identifier_list ':' mode type_definition assign_expression
   80 parameter_specification_list: ';' . parameter_specification parameter_specification_list

    IDENTIFIER  shift, and go to state 54

    parameter_specification  go to state 141


State 101

   55 formal_part: '(' parameter_specification parameter_specification_list . ')'

    ')'  shift, and go to state 142


State 102

   57 function_specification: FUNCTION IDENTIFIER formal_part RETURN type_definition .

    $default  reduce using rule 57 (function_specification)


State 103

    7 assign_expression: . ASSIGNMENT_OP expression
    8                  | .  [';']
   76 object_declaration: IDENTIFIER identifier_list ':' constant type_definition . assign_expression ';'

    ASSIGNMENT_OP  shift, and go to state 143

    $default  reduce using rule 8 (assign_expression)

    assign_expression  go to state 144


State 104

    6 array_type_definition: ARRAY '(' . expression expression_list ')' OF type_definition
   48 expression: . relation relation_list
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    expression             go to state 145
    factor                 go to state 81
    indexed_component      go to state 43
    name                   go to state 82
    primary                go to state 83
    relation               go to state 84
    selected_component     go to state 49
    simple_expression      go to state 85
    term                   go to state 86
    unary_adding_operator  go to state 87


State 105

   18 component_item: . IDENTIFIER identifier_list ':' type_definition assign_expression ';'
   19 component_list: component_list . component_item
   91 record_type_definition: RECORD component_list . END RECORD

    END         shift, and go to state 146
    IDENTIFIER  shift, and go to state 147

    component_item  go to state 148


State 106

  117 type_declaration: TYPE IDENTIFIER IS type_definition ';' .

    $default  reduce using rule 117 (type_declaration)


State 107

   14 case_statement: CASE IDENTIFIER IS . case_statement_alternative_list END CASE ';'
   16 case_statement_alternative_list: . case_statement_alternative_list case_statement_alternative
   17                                | .

    $default  reduce using rule 17 (case_statement_alternative_list)

    case_statement_alternative_list  go to state 149


State 108

   72 name: IDENTIFIER actual_parameter_part .

    $default  reduce using rule 72 (name)


State 109

   54 factor: NOT primary .

    $default  reduce using rule 54 (factor)


State 110

   88 primary: '(' expression . ')'

    ')'  shift, and go to state 150


State 111

    9 assignment_statement: . name ASSIGNMENT_OP expression ';'
   14 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   21 compound_statement: . if_statement
   22                   | . loop_statement
   23                   | . case_statement
   24                   | . assignment_statement
   61 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   61             | IF expression THEN . sequence_of_statements elsif_list else_statement END IF ';'
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   65 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   75 null_statement: . NULL_ ';'
   89 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
  102 return_statement: . RETURN optional_simple_expression ';'
  103 selected_component: . name '.' IDENTIFIER
  104 sequence_of_statements: . statement
  105                       | . statement sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    name                      go to state 45
    null_statement            go to state 46
    procedure_call_statement  go to state 47
    return_statement          go to state 48
    selected_component        go to state 49
    sequence_of_statements    go to state 151
    simple_statement          go to state 51
    statement                 go to state 52


State 112

   69 multiplying_operator_list: '*' .

    $default  reduce using rule 69 (multiplying_operator_list)


State 113

   70 multiplying_operator_list: '/' .

    $default  reduce using rule 70 (multiplying_operator_list)


State 114

  116 term: factor multiplying_operator_list .

    $default  reduce using rule 116 (term)


State 115

   53 factor: primary POWER_OP . primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
  103 selected_component: . name '.' IDENTIFIER

    IDENTIFIER       shift, and go to state 70
    NULL_            shift, and go to state 72
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    indexed_component   go to state 43
    name                go to state 82
    primary             go to state 152
    selected_component  go to state 49


State 116

   63 logical_operator: AND .

    $default  reduce using rule 63 (logical_operator)


State 117

   64 logical_operator: OR .

    $default  reduce using rule 64 (logical_operator)


State 118

   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
   94 relation_list: logical_operator . relation relation_list
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    factor                 go to state 81
    indexed_component      go to state 43
    name                   go to state 82
    primary                go to state 83
    relation               go to state 153
    selected_component     go to state 49
    simple_expression      go to state 85
    term                   go to state 86
    unary_adding_operator  go to state 87


State 119

   48 expression: relation relation_list .

    $default  reduce using rule 48 (expression)


State 120

   99 relational_operator: NOT_EQUAL_OP .

    $default  reduce using rule 99 (relational_operator)


State 121

  101 relational_operator: GREATER_EQUAL_OP .

    $default  reduce using rule 101 (relational_operator)


State 122

  100 relational_operator: LESSER_EQUAL_OP .

    $default  reduce using rule 100 (relational_operator)


State 123

   96 relational_operator: '=' .

    $default  reduce using rule 96 (relational_operator)


State 124

   97 relational_operator: '<' .

    $default  reduce using rule 97 (relational_operator)


State 125

   98 relational_operator: '>' .

    $default  reduce using rule 98 (relational_operator)


State 126

   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   93 relation: simple_expression relational_operator . simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    factor                 go to state 81
    indexed_component      go to state 43
    name                   go to state 82
    primary                go to state 83
    selected_component     go to state 49
    simple_expression      go to state 154
    term                   go to state 86
    unary_adding_operator  go to state 87


State 127

  107 simple_expression: term binary_adding_list .

    $default  reduce using rule 107 (simple_expression)


State 128

   10 binary_adding_list: term .  [AND, IDENTIFIER, LOOP, NOT, NULL_, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', INTEGER_LITERAL, FLOAT_LITERAL, STRING_LITERAL, BOOLEAN_LITERAL, ';', '(', ')', '|', ',', '=', '<', '>']
   11                   | term . binary_adding_operator binary_adding_list
   12 binary_adding_operator: . '+'
   13                       | . '-'

    '+'  shift, and go to state 155
    '-'  shift, and go to state 156

    '+'       [reduce using rule 10 (binary_adding_list)]
    '-'       [reduce using rule 10 (binary_adding_list)]
    $default  reduce using rule 10 (binary_adding_list)

    binary_adding_operator  go to state 157


State 129

   10 binary_adding_list: . term
   11                   | . term binary_adding_operator binary_adding_list
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: unary_adding_operator term . binary_adding_list
  116 term: . factor multiplying_operator_list

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    binary_adding_list  go to state 158
    factor              go to state 81
    indexed_component   go to state 43
    name                go to state 82
    primary             go to state 83
    selected_component  go to state 49
    term                go to state 128


State 130

   46 explicit_actual_parameter_list: explicit_actual_parameter .

    $default  reduce using rule 46 (explicit_actual_parameter_list)


State 131

    2 actual_parameter_part: '(' explicit_actual_parameter_list . ')'
   45 explicit_actual_parameter_list: explicit_actual_parameter_list . ',' explicit_actual_parameter

    ')'  shift, and go to state 159
    ','  shift, and go to state 160


State 132

   44 explicit_actual_parameter: expression . name
   48 expression: . relation relation_list
   49 expression_list: . expression_list ',' expression
   50                | . expression
   51                | .  [')', ',']
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   62                  | IDENTIFIER '(' expression . expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    $default  reduce using rule 51 (expression_list)

    expression             go to state 161
    expression_list        go to state 162
    factor                 go to state 81
    indexed_component      go to state 43
    name                   go to state 163
    primary                go to state 83
    relation               go to state 84
    selected_component     go to state 49
    simple_expression      go to state 85
    term                   go to state 86
    unary_adding_operator  go to state 87


State 133

   89 procedure_call_statement: IDENTIFIER actual_parameter_part ';' .

    $default  reduce using rule 89 (procedure_call_statement)


State 134

  102 return_statement: RETURN optional_simple_expression ';' .

    $default  reduce using rule 102 (return_statement)


State 135

    9 assignment_statement: . name ASSIGNMENT_OP expression ';'
   14 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   21 compound_statement: . if_statement
   22                   | . loop_statement
   23                   | . case_statement
   24                   | . assignment_statement
   61 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   65 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   65               | WHILE expression LOOP . sequence_of_statements END LOOP ';'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   75 null_statement: . NULL_ ';'
   89 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
  102 return_statement: . RETURN optional_simple_expression ';'
  103 selected_component: . name '.' IDENTIFIER
  104 sequence_of_statements: . statement
  105                       | . statement sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    name                      go to state 45
    null_statement            go to state 46
    procedure_call_statement  go to state 47
    return_statement          go to state 48
    selected_component        go to state 49
    sequence_of_statements    go to state 164
    simple_statement          go to state 51
    statement                 go to state 52


State 136

    9 assignment_statement: name ASSIGNMENT_OP expression . ';'

    ';'  shift, and go to state 165


State 137

  103 selected_component: name '.' IDENTIFIER .

    $default  reduce using rule 103 (selected_component)


State 138

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER . ';'

    ';'  shift, and go to state 166


State 139

  113 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements . END after_end_program_name ';'

    END  shift, and go to state 167


State 140

   66 mode: . OUT
   67     | . IN OUT
   68     | .  [ARRAY, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]
   79 parameter_specification: IDENTIFIER identifier_list ':' . mode type_definition assign_expression

    IN   shift, and go to state 168
    OUT  shift, and go to state 169

    $default  reduce using rule 68 (mode)

    mode  go to state 170


State 141

   80 parameter_specification_list: . ';' parameter_specification parameter_specification_list
   80                             | ';' parameter_specification . parameter_specification_list
   81                             | .  [')']

    ';'  shift, and go to state 100

    $default  reduce using rule 81 (parameter_specification_list)

    parameter_specification_list  go to state 171


State 142

   55 formal_part: '(' parameter_specification parameter_specification_list ')' .

    $default  reduce using rule 55 (formal_part)


State 143

    7 assign_expression: ASSIGNMENT_OP . expression
   48 expression: . relation relation_list
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    expression             go to state 172
    factor                 go to state 81
    indexed_component      go to state 43
    name                   go to state 82
    primary                go to state 83
    relation               go to state 84
    selected_component     go to state 49
    simple_expression      go to state 85
    term                   go to state 86
    unary_adding_operator  go to state 87


State 144

   76 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression . ';'

    ';'  shift, and go to state 173


State 145

    6 array_type_definition: ARRAY '(' expression . expression_list ')' OF type_definition
   48 expression: . relation relation_list
   49 expression_list: . expression_list ',' expression
   50                | . expression
   51                | .  [')', ',']
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    $default  reduce using rule 51 (expression_list)

    expression             go to state 161
    expression_list        go to state 174
    factor                 go to state 81
    indexed_component      go to state 43
    name                   go to state 82
    primary                go to state 83
    relation               go to state 84
    selected_component     go to state 49
    simple_expression      go to state 85
    term                   go to state 86
    unary_adding_operator  go to state 87


State 146

   91 record_type_definition: RECORD component_list END . RECORD

    RECORD  shift, and go to state 175


State 147

   18 component_item: IDENTIFIER . identifier_list ':' type_definition assign_expression ';'
   58 identifier_list: . identifier_list ',' IDENTIFIER
   59                | . IDENTIFIER
   60                | .  [':', ',']

    IDENTIFIER  shift, and go to state 19

    $default  reduce using rule 60 (identifier_list)

    identifier_list  go to state 176


State 148

   19 component_list: component_list component_item .

    $default  reduce using rule 19 (component_list)


State 149

   14 case_statement: CASE IDENTIFIER IS case_statement_alternative_list . END CASE ';'
   15 case_statement_alternative: . WHEN discrete_choice_list ARROW sequence_of_statements
   16 case_statement_alternative_list: case_statement_alternative_list . case_statement_alternative

    END   shift, and go to state 177
    WHEN  shift, and go to state 178

    case_statement_alternative  go to state 179


State 150

   88 primary: '(' expression ')' .

    $default  reduce using rule 88 (primary)


State 151

   39 elsif_list: . elsif_statement elsif_list
   40           | .  [ELSE, END]
   43 elsif_statement: . ELSIF expression THEN sequence_of_statements
   61 if_statement: IF expression THEN sequence_of_statements . elsif_list else_statement END IF ';'

    ELSIF  shift, and go to state 180

    $default  reduce using rule 40 (elsif_list)

    elsif_list       go to state 181
    elsif_statement  go to state 182


State 152

   53 factor: primary POWER_OP primary .

    $default  reduce using rule 53 (factor)


State 153

   63 logical_operator: . AND
   64                 | . OR
   94 relation_list: . logical_operator relation relation_list
   94              | logical_operator relation . relation_list
   95              | .  [IDENTIFIER, LOOP, NOT, NULL_, THEN, ARROW, '+', '-', INTEGER_LITERAL, FLOAT_LITERAL, STRING_LITERAL, BOOLEAN_LITERAL, ';', '(', ')', '|', ',']

    AND  shift, and go to state 116
    OR   shift, and go to state 117

    $default  reduce using rule 95 (relation_list)

    logical_operator  go to state 118
    relation_list     go to state 183


State 154

   93 relation: simple_expression relational_operator simple_expression .

    $default  reduce using rule 93 (relation)


State 155

   12 binary_adding_operator: '+' .

    $default  reduce using rule 12 (binary_adding_operator)


State 156

   13 binary_adding_operator: '-' .

    $default  reduce using rule 13 (binary_adding_operator)


State 157

   10 binary_adding_list: . term
   11                   | . term binary_adding_operator binary_adding_list
   11                   | term binary_adding_operator . binary_adding_list
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
  103 selected_component: . name '.' IDENTIFIER
  116 term: . factor multiplying_operator_list

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    binary_adding_list  go to state 184
    factor              go to state 81
    indexed_component   go to state 43
    name                go to state 82
    primary             go to state 83
    selected_component  go to state 49
    term                go to state 128


State 158

  106 simple_expression: unary_adding_operator term binary_adding_list .

    $default  reduce using rule 106 (simple_expression)


State 159

    2 actual_parameter_part: '(' explicit_actual_parameter_list ')' .

    $default  reduce using rule 2 (actual_parameter_part)


State 160

   44 explicit_actual_parameter: . expression name
   45 explicit_actual_parameter_list: explicit_actual_parameter_list ',' . explicit_actual_parameter
   48 expression: . relation relation_list
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    explicit_actual_parameter  go to state 185
    expression                 go to state 186
    factor                     go to state 81
    indexed_component          go to state 43
    name                       go to state 82
    primary                    go to state 83
    relation                   go to state 84
    selected_component         go to state 49
    simple_expression          go to state 85
    term                       go to state 86
    unary_adding_operator      go to state 87


State 161

   50 expression_list: expression .

    $default  reduce using rule 50 (expression_list)


State 162

   49 expression_list: expression_list . ',' expression
   62 indexed_component: IDENTIFIER '(' expression expression_list . ')'

    ')'  shift, and go to state 187
    ','  shift, and go to state 188


State 163

   44 explicit_actual_parameter: expression name .  [')', ',']
   87 primary: name .  [IDENTIFIER, NOT, NULL_, '*', POWER_OP, INTEGER_LITERAL, FLOAT_LITERAL, STRING_LITERAL, BOOLEAN_LITERAL, '(', '/']
  103 selected_component: name . '.' IDENTIFIER

    '.'  shift, and go to state 95

    ')'       reduce using rule 44 (explicit_actual_parameter)
    ','       reduce using rule 44 (explicit_actual_parameter)
    $default  reduce using rule 87 (primary)


State 164

   65 loop_statement: WHILE expression LOOP sequence_of_statements . END LOOP ';'

    END  shift, and go to state 189


State 165

    9 assignment_statement: name ASSIGNMENT_OP expression ';' .

    $default  reduce using rule 9 (assignment_statement)


State 166

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';' .

    $default  reduce using rule 1 (main)


State 167

    4 after_end_program_name: . IDENTIFIER
    5                       | .  [';']
  113 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END . after_end_program_name ';'

    IDENTIFIER  shift, and go to state 190

    $default  reduce using rule 5 (after_end_program_name)

    after_end_program_name  go to state 191


State 168

   67 mode: IN . OUT

    OUT  shift, and go to state 192


State 169

   66 mode: OUT .

    $default  reduce using rule 66 (mode)


State 170

    6 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   79 parameter_specification: IDENTIFIER identifier_list ':' mode . type_definition assign_expression
   91 record_type_definition: . RECORD component_list END RECORD
  118 type_definition: . INTEGER_TYPE
  119                | . REAL_TYPE
  120                | . CHARACTER_TYPE
  121                | . BOOLEAN_TYPE
  122                | . array_type_definition
  123                | . record_type_definition

    ARRAY           shift, and go to state 60
    RECORD          shift, and go to state 61
    INTEGER_TYPE    shift, and go to state 62
    REAL_TYPE       shift, and go to state 63
    CHARACTER_TYPE  shift, and go to state 64
    BOOLEAN_TYPE    shift, and go to state 65

    array_type_definition   go to state 66
    record_type_definition  go to state 67
    type_definition         go to state 193


State 171

   80 parameter_specification_list: ';' parameter_specification parameter_specification_list .

    $default  reduce using rule 80 (parameter_specification_list)


State 172

    7 assign_expression: ASSIGNMENT_OP expression .

    $default  reduce using rule 7 (assign_expression)


State 173

   76 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression ';' .

    $default  reduce using rule 76 (object_declaration)


State 174

    6 array_type_definition: ARRAY '(' expression expression_list . ')' OF type_definition
   49 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 194
    ','  shift, and go to state 188


State 175

   91 record_type_definition: RECORD component_list END RECORD .

    $default  reduce using rule 91 (record_type_definition)


State 176

   18 component_item: IDENTIFIER identifier_list . ':' type_definition assign_expression ';'
   58 identifier_list: identifier_list . ',' IDENTIFIER

    ':'  shift, and go to state 195
    ','  shift, and go to state 30


State 177

   14 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END . CASE ';'

    CASE  shift, and go to state 196


State 178

   15 case_statement_alternative: WHEN . discrete_choice_list ARROW sequence_of_statements
   33 discrete_choice: . expression
   34                | . INTEGER_TYPE
   35                | . OTHERS
   36 discrete_choice_list: . discrete_choice_list '|' discrete_choice
   37                     | . discrete_choice
   38                     | .  [ARROW, '|']
   48 expression: . relation relation_list
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    OTHERS           shift, and go to state 197
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_TYPE     shift, and go to state 198
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    $default  reduce using rule 38 (discrete_choice_list)

    discrete_choice        go to state 199
    discrete_choice_list   go to state 200
    expression             go to state 201
    factor                 go to state 81
    indexed_component      go to state 43
    name                   go to state 82
    primary                go to state 83
    relation               go to state 84
    selected_component     go to state 49
    simple_expression      go to state 85
    term                   go to state 86
    unary_adding_operator  go to state 87


State 179

   16 case_statement_alternative_list: case_statement_alternative_list case_statement_alternative .

    $default  reduce using rule 16 (case_statement_alternative_list)


State 180

   43 elsif_statement: ELSIF . expression THEN sequence_of_statements
   48 expression: . relation relation_list
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    expression             go to state 202
    factor                 go to state 81
    indexed_component      go to state 43
    name                   go to state 82
    primary                go to state 83
    relation               go to state 84
    selected_component     go to state 49
    simple_expression      go to state 85
    term                   go to state 86
    unary_adding_operator  go to state 87


State 181

   41 else_statement: . ELSE expression THEN sequence_of_statements
   42               | .  [END]
   61 if_statement: IF expression THEN sequence_of_statements elsif_list . else_statement END IF ';'

    ELSE  shift, and go to state 203

    $default  reduce using rule 42 (else_statement)

    else_statement  go to state 204


State 182

   39 elsif_list: . elsif_statement elsif_list
   39           | elsif_statement . elsif_list
   40           | .  [ELSE, END]
   43 elsif_statement: . ELSIF expression THEN sequence_of_statements

    ELSIF  shift, and go to state 180

    $default  reduce using rule 40 (elsif_list)

    elsif_list       go to state 205
    elsif_statement  go to state 182


State 183

   94 relation_list: logical_operator relation relation_list .

    $default  reduce using rule 94 (relation_list)


State 184

   11 binary_adding_list: term binary_adding_operator binary_adding_list .

    $default  reduce using rule 11 (binary_adding_list)


State 185

   45 explicit_actual_parameter_list: explicit_actual_parameter_list ',' explicit_actual_parameter .

    $default  reduce using rule 45 (explicit_actual_parameter_list)


State 186

   44 explicit_actual_parameter: expression . name
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
  103 selected_component: . name '.' IDENTIFIER

    IDENTIFIER  shift, and go to state 70

    indexed_component   go to state 43
    name                go to state 206
    selected_component  go to state 49


State 187

   62 indexed_component: IDENTIFIER '(' expression expression_list ')' .

    $default  reduce using rule 62 (indexed_component)


State 188

   48 expression: . relation relation_list
   49 expression_list: expression_list ',' . expression
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    expression             go to state 207
    factor                 go to state 81
    indexed_component      go to state 43
    name                   go to state 82
    primary                go to state 83
    relation               go to state 84
    selected_component     go to state 49
    simple_expression      go to state 85
    term                   go to state 86
    unary_adding_operator  go to state 87


State 189

   65 loop_statement: WHILE expression LOOP sequence_of_statements END . LOOP ';'

    LOOP  shift, and go to state 208


State 190

    4 after_end_program_name: IDENTIFIER .

    $default  reduce using rule 4 (after_end_program_name)


State 191

  113 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END after_end_program_name . ';'

    ';'  shift, and go to state 209


State 192

   67 mode: IN OUT .

    $default  reduce using rule 67 (mode)


State 193

    7 assign_expression: . ASSIGNMENT_OP expression
    8                  | .  [';', ')']
   79 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition . assign_expression

    ASSIGNMENT_OP  shift, and go to state 143

    $default  reduce using rule 8 (assign_expression)

    assign_expression  go to state 210


State 194

    6 array_type_definition: ARRAY '(' expression expression_list ')' . OF type_definition

    OF  shift, and go to state 211


State 195

    6 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   18 component_item: IDENTIFIER identifier_list ':' . type_definition assign_expression ';'
   91 record_type_definition: . RECORD component_list END RECORD
  118 type_definition: . INTEGER_TYPE
  119                | . REAL_TYPE
  120                | . CHARACTER_TYPE
  121                | . BOOLEAN_TYPE
  122                | . array_type_definition
  123                | . record_type_definition

    ARRAY           shift, and go to state 60
    RECORD          shift, and go to state 61
    INTEGER_TYPE    shift, and go to state 62
    REAL_TYPE       shift, and go to state 63
    CHARACTER_TYPE  shift, and go to state 64
    BOOLEAN_TYPE    shift, and go to state 65

    array_type_definition   go to state 66
    record_type_definition  go to state 67
    type_definition         go to state 212


State 196

   14 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE . ';'

    ';'  shift, and go to state 213


State 197

   35 discrete_choice: OTHERS .

    $default  reduce using rule 35 (discrete_choice)


State 198

   34 discrete_choice: INTEGER_TYPE .

    $default  reduce using rule 34 (discrete_choice)


State 199

   37 discrete_choice_list: discrete_choice .

    $default  reduce using rule 37 (discrete_choice_list)


State 200

   15 case_statement_alternative: WHEN discrete_choice_list . ARROW sequence_of_statements
   36 discrete_choice_list: discrete_choice_list . '|' discrete_choice

    ARROW  shift, and go to state 214
    '|'    shift, and go to state 215


State 201

   33 discrete_choice: expression .

    $default  reduce using rule 33 (discrete_choice)


State 202

   43 elsif_statement: ELSIF expression . THEN sequence_of_statements

    THEN  shift, and go to state 216


State 203

   41 else_statement: ELSE . expression THEN sequence_of_statements
   48 expression: . relation relation_list
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    expression             go to state 217
    factor                 go to state 81
    indexed_component      go to state 43
    name                   go to state 82
    primary                go to state 83
    relation               go to state 84
    selected_component     go to state 49
    simple_expression      go to state 85
    term                   go to state 86
    unary_adding_operator  go to state 87


State 204

   61 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement . END IF ';'

    END  shift, and go to state 218


State 205

   39 elsif_list: elsif_statement elsif_list .

    $default  reduce using rule 39 (elsif_list)


State 206

   44 explicit_actual_parameter: expression name .  [')', ',']
  103 selected_component: name . '.' IDENTIFIER

    '.'  shift, and go to state 95

    $default  reduce using rule 44 (explicit_actual_parameter)


State 207

   49 expression_list: expression_list ',' expression .

    $default  reduce using rule 49 (expression_list)


State 208

   65 loop_statement: WHILE expression LOOP sequence_of_statements END LOOP . ';'

    ';'  shift, and go to state 219


State 209

  113 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END after_end_program_name ';' .

    $default  reduce using rule 113 (subprogram_body)


State 210

   79 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition assign_expression .

    $default  reduce using rule 79 (parameter_specification)


State 211

    6 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
    6                      | ARRAY '(' expression expression_list ')' OF . type_definition
   91 record_type_definition: . RECORD component_list END RECORD
  118 type_definition: . INTEGER_TYPE
  119                | . REAL_TYPE
  120                | . CHARACTER_TYPE
  121                | . BOOLEAN_TYPE
  122                | . array_type_definition
  123                | . record_type_definition

    ARRAY           shift, and go to state 60
    RECORD          shift, and go to state 61
    INTEGER_TYPE    shift, and go to state 62
    REAL_TYPE       shift, and go to state 63
    CHARACTER_TYPE  shift, and go to state 64
    BOOLEAN_TYPE    shift, and go to state 65

    array_type_definition   go to state 66
    record_type_definition  go to state 67
    type_definition         go to state 220


State 212

    7 assign_expression: . ASSIGNMENT_OP expression
    8                  | .  [';']
   18 component_item: IDENTIFIER identifier_list ':' type_definition . assign_expression ';'

    ASSIGNMENT_OP  shift, and go to state 143

    $default  reduce using rule 8 (assign_expression)

    assign_expression  go to state 221


State 213

   14 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE ';' .

    $default  reduce using rule 14 (case_statement)


State 214

    9 assignment_statement: . name ASSIGNMENT_OP expression ';'
   14 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   15 case_statement_alternative: WHEN discrete_choice_list ARROW . sequence_of_statements
   21 compound_statement: . if_statement
   22                   | . loop_statement
   23                   | . case_statement
   24                   | . assignment_statement
   61 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   65 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   75 null_statement: . NULL_ ';'
   89 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
  102 return_statement: . RETURN optional_simple_expression ';'
  103 selected_component: . name '.' IDENTIFIER
  104 sequence_of_statements: . statement
  105                       | . statement sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    name                      go to state 45
    null_statement            go to state 46
    procedure_call_statement  go to state 47
    return_statement          go to state 48
    selected_component        go to state 49
    sequence_of_statements    go to state 222
    simple_statement          go to state 51
    statement                 go to state 52


State 215

   33 discrete_choice: . expression
   34                | . INTEGER_TYPE
   35                | . OTHERS
   36 discrete_choice_list: discrete_choice_list '|' . discrete_choice
   48 expression: . relation relation_list
   52 factor: . primary
   53       | . primary POWER_OP primary
   54       | . NOT primary
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   82 primary: . INTEGER_LITERAL
   83        | . FLOAT_LITERAL
   84        | . BOOLEAN_LITERAL
   85        | . NULL_
   86        | . STRING_LITERAL
   87        | . name
   88        | . '(' expression ')'
   92 relation: . simple_expression
   93         | . simple_expression relational_operator simple_expression
  103 selected_component: . name '.' IDENTIFIER
  106 simple_expression: . unary_adding_operator term binary_adding_list
  107                  | . term binary_adding_list
  116 term: . factor multiplying_operator_list
  124 unary_adding_operator: . '+'
  125                      | . '-'

    IDENTIFIER       shift, and go to state 70
    NOT              shift, and go to state 71
    NULL_            shift, and go to state 72
    OTHERS           shift, and go to state 197
    '+'              shift, and go to state 73
    '-'              shift, and go to state 74
    INTEGER_TYPE     shift, and go to state 198
    INTEGER_LITERAL  shift, and go to state 75
    FLOAT_LITERAL    shift, and go to state 76
    STRING_LITERAL   shift, and go to state 77
    BOOLEAN_LITERAL  shift, and go to state 78
    '('              shift, and go to state 79

    discrete_choice        go to state 223
    expression             go to state 201
    factor                 go to state 81
    indexed_component      go to state 43
    name                   go to state 82
    primary                go to state 83
    relation               go to state 84
    selected_component     go to state 49
    simple_expression      go to state 85
    term                   go to state 86
    unary_adding_operator  go to state 87


State 216

    9 assignment_statement: . name ASSIGNMENT_OP expression ';'
   14 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   21 compound_statement: . if_statement
   22                   | . loop_statement
   23                   | . case_statement
   24                   | . assignment_statement
   43 elsif_statement: ELSIF expression THEN . sequence_of_statements
   61 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   65 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   75 null_statement: . NULL_ ';'
   89 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
  102 return_statement: . RETURN optional_simple_expression ';'
  103 selected_component: . name '.' IDENTIFIER
  104 sequence_of_statements: . statement
  105                       | . statement sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    name                      go to state 45
    null_statement            go to state 46
    procedure_call_statement  go to state 47
    return_statement          go to state 48
    selected_component        go to state 49
    sequence_of_statements    go to state 224
    simple_statement          go to state 51
    statement                 go to state 52


State 217

   41 else_statement: ELSE expression . THEN sequence_of_statements

    THEN  shift, and go to state 225


State 218

   61 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END . IF ';'

    IF  shift, and go to state 226


State 219

   65 loop_statement: WHILE expression LOOP sequence_of_statements END LOOP ';' .

    $default  reduce using rule 65 (loop_statement)


State 220

    6 array_type_definition: ARRAY '(' expression expression_list ')' OF type_definition .

    $default  reduce using rule 6 (array_type_definition)


State 221

   18 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression . ';'

    ';'  shift, and go to state 227


State 222

   15 case_statement_alternative: WHEN discrete_choice_list ARROW sequence_of_statements .

    $default  reduce using rule 15 (case_statement_alternative)


State 223

   36 discrete_choice_list: discrete_choice_list '|' discrete_choice .

    $default  reduce using rule 36 (discrete_choice_list)


State 224

   43 elsif_statement: ELSIF expression THEN sequence_of_statements .

    $default  reduce using rule 43 (elsif_statement)


State 225

    9 assignment_statement: . name ASSIGNMENT_OP expression ';'
   14 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   21 compound_statement: . if_statement
   22                   | . loop_statement
   23                   | . case_statement
   24                   | . assignment_statement
   41 else_statement: ELSE expression THEN . sequence_of_statements
   61 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   62 indexed_component: . IDENTIFIER '(' expression expression_list ')'
   65 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   72 name: . IDENTIFIER actual_parameter_part
   73     | . indexed_component
   74     | . selected_component
   75 null_statement: . NULL_ ';'
   89 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
  102 return_statement: . RETURN optional_simple_expression ';'
  103 selected_component: . name '.' IDENTIFIER
  104 sequence_of_statements: . statement
  105                       | . statement sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38

    assignment_statement      go to state 39
    case_statement            go to state 40
    compound_statement        go to state 41
    if_statement              go to state 42
    indexed_component         go to state 43
    loop_statement            go to state 44
    name                      go to state 45
    null_statement            go to state 46
    procedure_call_statement  go to state 47
    return_statement          go to state 48
    selected_component        go to state 49
    sequence_of_statements    go to state 228
    simple_statement          go to state 51
    statement                 go to state 52


State 226

   61 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END IF . ';'

    ';'  shift, and go to state 229


State 227

   18 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression ';' .

    $default  reduce using rule 18 (component_item)


State 228

   41 else_statement: ELSE expression THEN sequence_of_statements .

    $default  reduce using rule 41 (else_statement)


State 229

   61 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END IF ';' .

    $default  reduce using rule 61 (if_statement)
