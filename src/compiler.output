Terminals unused in grammar

   CONCAT


Gramática

    0 $accept: main $end

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    2 actual_parameter_list: expression
    3                      | actual_parameter_list ',' expression

    4 actual_parameter_part: '(' ')'

    5 $@1: /* vacío */

    6 actual_parameter_part: '(' $@1 actual_parameter_list ')'

    7 array_type_definition: ARRAY '(' expression expression_list ')' OF type_definition

    8 assign_expression: ASSIGNMENT_OP expression
    9                  | /* vacío */

   10 assignment_statement: variable ASSIGNMENT_OP expression ';'

   11 binary_adding_list: binary_adding_operator term

   12 @2: /* vacío */

   13 binary_adding_list: binary_adding_operator term @2 binary_adding_list

   14 binary_adding_operator: '+'
   15                       | '-'

   16 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'

   17 case_statement_alternative: WHEN discrete_choice_list ARROW sequence_of_statements

   18 case_statement_alternative_list: case_statement_alternative_list case_statement_alternative
   19                                | /* vacío */

   20 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression ';'

   21 component_list: component_list component_item
   22               | /* vacío */

   23 compound_statement: if_statement
   24                   | loop_statement
   25                   | case_statement
   26                   | assignment_statement

   27 constant: CONSTANT
   28         | /* vacío */

   29 declarative_item: type_declaration
   30                 | object_declaration
   31                 | subprogram_specification ';'
   32                 | subprogram_body

   33 declarative_part: declarative_item declarative_part
   34                 | /* vacío */

   35 discrete_choice: primary
   36                | OTHERS

   37 discrete_choice_list: discrete_choice_list '|' discrete_choice
   38                     | discrete_choice

   39 elsif_list: elsif_list elsif_statement
   40           | /* vacío */

   41 else_statement: ELSE sequence_of_statements
   42               | /* vacío */

   43 elsif_statement: ELSIF '(' expression ')' THEN sequence_of_statements

   44 @3: /* vacío */

   45 expression: relation @3 relation_list

   46 expression_list: ',' expression expression_list
   47                | /* vacío */

   48 factor: primary
   49       | primary POWER_OP primary
   50       | NOT primary

   51 formal_part: '(' parameter_specification parameter_specification_list ')'
   52            | /* vacío */

   53 function_call: IDENTIFIER actual_parameter_part
   54              | IDENTIFIER LENGTH

   55 function_specification: FUNCTION IDENTIFIER formal_part RETURN type_definition

   56 identifier_list: ',' IDENTIFIER identifier_list
   57                | /* vacío */

   58 if_statement: IF '(' expression ')' THEN sequence_of_statements elsif_list else_statement END IF ';'

   59 indexed_component: IDENTIFIER '[' expression expression_list ']'

   60 logical_operator: AND
   61                 | OR

   62 loop_statement: WHILE '(' expression ')' LOOP sequence_of_statements END LOOP ';'

   63 mode: OUT
   64     | IN OUT
   65     | IN
   66     | /* vacío */

   67 multiplying_operator: '*'
   68                     | '/'

   69 null_statement: NULL_ ';'

   70 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'

   71 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition assign_expression

   72 parameter_specification_list: ';' parameter_specification parameter_specification_list
   73                             | /* vacío */

   74 primary: INTEGER_LITERAL
   75        | FLOAT_LITERAL
   76        | CHARACTER_LITERAL
   77        | BOOLEAN_LITERAL
   78        | NULL_
   79        | STRING_LITERAL
   80        | variable
   81        | function_call
   82        | '(' expression ')'

   83 procedure_call_statement: IDENTIFIER actual_parameter_part ';'
   84                         | PUT '(' STRING_LITERAL ')' ';'
   85                         | PUT '(' variable ')' ';'
   86                         | GET '(' variable ')' ';'
   87                         | NEW_LINE ';'

   88 procedure_specification: PROCEDURE IDENTIFIER formal_part

   89 record_type_definition: RECORD component_list END RECORD

   90 relation: simple_expression
   91         | simple_expression relational_operator simple_expression

   92 @4: /* vacío */

   93 relation_list: logical_operator relation @4 relation_list
   94              | /* vacío */

   95 relational_operator: '='
   96                    | '<'
   97                    | '>'
   98                    | NOT_EQUAL_OP
   99                    | LESSER_EQUAL_OP
  100                    | GREATER_EQUAL_OP

  101 return_statement: RETURN ';'
  102                 | RETURN simple_expression ';'

  103 selected_component: variable '.' IDENTIFIER

  104 sequence_of_statements: statement
  105                       | statement sequence_of_statements

  106 @5: /* vacío */

  107 simple_expression: unary_adding_operator term @5 binary_adding_list
  108                  | unary_adding_operator term

  109 @6: /* vacío */

  110 simple_expression: term @6 binary_adding_list
  111                  | term

  112 simple_statement: null_statement
  113                 | return_statement
  114                 | procedure_call_statement

  115 statement: simple_statement
  116          | compound_statement

  117 subprogram_body_: subprogram_specification IS

  118 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  119                | subprogram_body_ declarative_part BEGIN_ sequence_of_statements END ';'

  120 subprogram_specification: procedure_specification
  121                         | function_specification

  122 term: factor
  123     | term multiplying_operator factor

  124 type_declaration: TYPE IDENTIFIER IS type_definition ';'

  125 type_definition: INTEGER_TYPE
  126                | REAL_TYPE
  127                | CHARACTER_TYPE
  128                | BOOLEAN_TYPE
  129                | array_type_definition
  130                | record_type_definition
  131                | IDENTIFIER

  132 unary_adding_operator: '+'
  133                      | '-'

  134 variable: IDENTIFIER
  135         | indexed_component
  136         | selected_component


Terminales con las reglas donde aparecen

$end (0) 0
'(' (40) 4 6 7 43 51 58 62 82 84 85 86
')' (41) 4 6 7 43 51 58 62 82 84 85 86
'*' (42) 67
'+' (43) 14 132
',' (44) 3 46 56
'-' (45) 15 133
'.' (46) 103
'/' (47) 68
':' (58) 20 70 71
';' (59) 1 10 16 20 31 58 62 69 70 72 83 84 85 86 87 101 102 118 119
    124
'<' (60) 96
'=' (61) 95
'>' (62) 97
'[' (91) 59
']' (93) 59
'|' (124) 37
error (256)
AND (258) 60
ARRAY (259) 7
BEGIN_ (260) 1 118 119
CASE (261) 16
CONSTANT (262) 27
ELSE (263) 41
ELSIF (264) 43
END (265) 1 16 58 62 89 118 119
FUNCTION (266) 55
IF (267) 58
IDENTIFIER (268) 1 16 20 53 54 55 56 59 70 71 83 88 103 118 124 131
    134
IN (269) 64 65
IS (270) 1 16 117 124
LOOP (271) 62
NOT (272) 50
NULL_ (273) 69 78
OF (274) 7
OR (275) 61
OTHERS (276) 36
OUT (277) 63 64
PROCEDURE (278) 1 88
RECORD (279) 89
RETURN (280) 55 101 102
THEN (281) 43 58
TYPE (282) 124
WHEN (283) 17
WHILE (284) 62
ARROW (285) 17
ASSIGNMENT_OP (286) 8 10
NOT_EQUAL_OP (287) 98
GREATER_EQUAL_OP (288) 100
LESSER_EQUAL_OP (289) 99
POWER_OP (290) 49
PUT (291) 84 85
GET (292) 86
LENGTH (293) 54
NEW_LINE (294) 87
CONCAT (295)
INTEGER_TYPE (296) 125
REAL_TYPE (297) 126
CHARACTER_TYPE (298) 127
BOOLEAN_TYPE (299) 128
INTEGER_LITERAL (300) 74
FLOAT_LITERAL (301) 75
CHARACTER_LITERAL (302) 76
STRING_LITERAL (303) 79 84
BOOLEAN_LITERAL (304) 77


No terminales con las reglas donde aparecen

$accept (66)
    en la izquierda: 0
main (67)
    en la izquierda: 1, en la derecha: 0
actual_parameter_list (68)
    en la izquierda: 2 3, en la derecha: 3 6
actual_parameter_part (69)
    en la izquierda: 4 6, en la derecha: 53 83
$@1 (70)
    en la izquierda: 5, en la derecha: 6
array_type_definition (71)
    en la izquierda: 7, en la derecha: 129
assign_expression (72)
    en la izquierda: 8 9, en la derecha: 20 70 71
assignment_statement (73)
    en la izquierda: 10, en la derecha: 26
binary_adding_list (74)
    en la izquierda: 11 13, en la derecha: 13 107 110
@2 (75)
    en la izquierda: 12, en la derecha: 13
binary_adding_operator (76)
    en la izquierda: 14 15, en la derecha: 11 13
case_statement (77)
    en la izquierda: 16, en la derecha: 25
case_statement_alternative (78)
    en la izquierda: 17, en la derecha: 18
case_statement_alternative_list (79)
    en la izquierda: 18 19, en la derecha: 16 18
component_item (80)
    en la izquierda: 20, en la derecha: 21
component_list (81)
    en la izquierda: 21 22, en la derecha: 21 89
compound_statement (82)
    en la izquierda: 23 24 25 26, en la derecha: 116
constant (83)
    en la izquierda: 27 28, en la derecha: 70
declarative_item (84)
    en la izquierda: 29 30 31 32, en la derecha: 33
declarative_part (85)
    en la izquierda: 33 34, en la derecha: 1 33 118 119
discrete_choice (86)
    en la izquierda: 35 36, en la derecha: 37 38
discrete_choice_list (87)
    en la izquierda: 37 38, en la derecha: 17 37
elsif_list (88)
    en la izquierda: 39 40, en la derecha: 39 58
else_statement (89)
    en la izquierda: 41 42, en la derecha: 58
elsif_statement (90)
    en la izquierda: 43, en la derecha: 39
expression (91)
    en la izquierda: 45, en la derecha: 2 3 7 8 10 43 46 58 59 62 82
@3 (92)
    en la izquierda: 44, en la derecha: 45
expression_list (93)
    en la izquierda: 46 47, en la derecha: 7 46 59
factor (94)
    en la izquierda: 48 49 50, en la derecha: 122 123
formal_part (95)
    en la izquierda: 51 52, en la derecha: 55 88
function_call (96)
    en la izquierda: 53 54, en la derecha: 81
function_specification (97)
    en la izquierda: 55, en la derecha: 121
identifier_list (98)
    en la izquierda: 56 57, en la derecha: 20 56 70 71
if_statement (99)
    en la izquierda: 58, en la derecha: 23
indexed_component (100)
    en la izquierda: 59, en la derecha: 135
logical_operator (101)
    en la izquierda: 60 61, en la derecha: 93
loop_statement (102)
    en la izquierda: 62, en la derecha: 24
mode (103)
    en la izquierda: 63 64 65 66, en la derecha: 71
multiplying_operator (104)
    en la izquierda: 67 68, en la derecha: 123
null_statement (105)
    en la izquierda: 69, en la derecha: 112
object_declaration (106)
    en la izquierda: 70, en la derecha: 30
parameter_specification (107)
    en la izquierda: 71, en la derecha: 51 72
parameter_specification_list (108)
    en la izquierda: 72 73, en la derecha: 51 72
primary (109)
    en la izquierda: 74 75 76 77 78 79 80 81 82, en la derecha: 35
    48 49 50
procedure_call_statement (110)
    en la izquierda: 83 84 85 86 87, en la derecha: 114
procedure_specification (111)
    en la izquierda: 88, en la derecha: 120
record_type_definition (112)
    en la izquierda: 89, en la derecha: 130
relation (113)
    en la izquierda: 90 91, en la derecha: 45 93
relation_list (114)
    en la izquierda: 93 94, en la derecha: 45 93
@4 (115)
    en la izquierda: 92, en la derecha: 93
relational_operator (116)
    en la izquierda: 95 96 97 98 99 100, en la derecha: 91
return_statement (117)
    en la izquierda: 101 102, en la derecha: 113
selected_component (118)
    en la izquierda: 103, en la derecha: 136
sequence_of_statements (119)
    en la izquierda: 104 105, en la derecha: 1 17 41 43 58 62 105 118
    119
simple_expression (120)
    en la izquierda: 107 108 110 111, en la derecha: 90 91 102
@5 (121)
    en la izquierda: 106, en la derecha: 107
@6 (122)
    en la izquierda: 109, en la derecha: 110
simple_statement (123)
    en la izquierda: 112 113 114, en la derecha: 115
statement (124)
    en la izquierda: 115 116, en la derecha: 104 105
subprogram_body_ (125)
    en la izquierda: 117, en la derecha: 118 119
subprogram_body (126)
    en la izquierda: 118 119, en la derecha: 32
subprogram_specification (127)
    en la izquierda: 120 121, en la derecha: 31 117
term (128)
    en la izquierda: 122 123, en la derecha: 11 13 107 108 110 111
    123
type_declaration (129)
    en la izquierda: 124, en la derecha: 29
type_definition (130)
    en la izquierda: 125 126 127 128 129 130 131, en la derecha: 7
    20 55 70 71 124
unary_adding_operator (131)
    en la izquierda: 132 133, en la derecha: 107 108
variable (132)
    en la izquierda: 134 135 136, en la derecha: 10 80 85 86 103


estado 0

    0 $accept: . main $end
    1 main: . PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    PROCEDURE  desplazar e ir al estado 1

    main  ir al estado 2


estado 1

    1 main: PROCEDURE . IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    IDENTIFIER  desplazar e ir al estado 3


estado 2

    0 $accept: main . $end

    $end  desplazar e ir al estado 4


estado 3

    1 main: PROCEDURE IDENTIFIER . IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    IS  desplazar e ir al estado 5


estado 4

    0 $accept: main $end .

    $default  aceptar


estado 5

    1 main: PROCEDURE IDENTIFIER IS . declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
   29 declarative_item: . type_declaration
   30                 | . object_declaration
   31                 | . subprogram_specification ';'
   32                 | . subprogram_body
   33 declarative_part: . declarative_item declarative_part
   34                 | .  [BEGIN_]
   55 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   70 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   88 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  117 subprogram_body_: . subprogram_specification IS
  118 subprogram_body: . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  119                | . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END ';'
  120 subprogram_specification: . procedure_specification
  121                         | . function_specification
  124 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    desplazar e ir al estado 6
    IDENTIFIER  desplazar e ir al estado 7
    PROCEDURE   desplazar e ir al estado 8
    TYPE        desplazar e ir al estado 9

    $default  reduce usando la regla 34 (declarative_part)

    declarative_item          ir al estado 10
    declarative_part          ir al estado 11
    function_specification    ir al estado 12
    object_declaration        ir al estado 13
    procedure_specification   ir al estado 14
    subprogram_body_          ir al estado 15
    subprogram_body           ir al estado 16
    subprogram_specification  ir al estado 17
    type_declaration          ir al estado 18


estado 6

   55 function_specification: FUNCTION . IDENTIFIER formal_part RETURN type_definition

    IDENTIFIER  desplazar e ir al estado 19


estado 7

   56 identifier_list: . ',' IDENTIFIER identifier_list
   57                | .  [':']
   70 object_declaration: IDENTIFIER . identifier_list ':' constant type_definition assign_expression ';'

    ','  desplazar e ir al estado 20

    $default  reduce usando la regla 57 (identifier_list)

    identifier_list  ir al estado 21


estado 8

   88 procedure_specification: PROCEDURE . IDENTIFIER formal_part

    IDENTIFIER  desplazar e ir al estado 22


estado 9

  124 type_declaration: TYPE . IDENTIFIER IS type_definition ';'

    IDENTIFIER  desplazar e ir al estado 23


estado 10

   29 declarative_item: . type_declaration
   30                 | . object_declaration
   31                 | . subprogram_specification ';'
   32                 | . subprogram_body
   33 declarative_part: . declarative_item declarative_part
   33                 | declarative_item . declarative_part
   34                 | .  [BEGIN_]
   55 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   70 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   88 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  117 subprogram_body_: . subprogram_specification IS
  118 subprogram_body: . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  119                | . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END ';'
  120 subprogram_specification: . procedure_specification
  121                         | . function_specification
  124 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    desplazar e ir al estado 6
    IDENTIFIER  desplazar e ir al estado 7
    PROCEDURE   desplazar e ir al estado 8
    TYPE        desplazar e ir al estado 9

    $default  reduce usando la regla 34 (declarative_part)

    declarative_item          ir al estado 10
    declarative_part          ir al estado 24
    function_specification    ir al estado 12
    object_declaration        ir al estado 13
    procedure_specification   ir al estado 14
    subprogram_body_          ir al estado 15
    subprogram_body           ir al estado 16
    subprogram_specification  ir al estado 17
    type_declaration          ir al estado 18


estado 11

    1 main: PROCEDURE IDENTIFIER IS declarative_part . BEGIN_ sequence_of_statements END IDENTIFIER ';'

    BEGIN_  desplazar e ir al estado 25


estado 12

  121 subprogram_specification: function_specification .

    $default  reduce usando la regla 121 (subprogram_specification)


estado 13

   30 declarative_item: object_declaration .

    $default  reduce usando la regla 30 (declarative_item)


estado 14

  120 subprogram_specification: procedure_specification .

    $default  reduce usando la regla 120 (subprogram_specification)


estado 15

   29 declarative_item: . type_declaration
   30                 | . object_declaration
   31                 | . subprogram_specification ';'
   32                 | . subprogram_body
   33 declarative_part: . declarative_item declarative_part
   34                 | .  [BEGIN_]
   55 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   70 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   88 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  117 subprogram_body_: . subprogram_specification IS
  118 subprogram_body: . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  118                | subprogram_body_ . declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  119                | . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END ';'
  119                | subprogram_body_ . declarative_part BEGIN_ sequence_of_statements END ';'
  120 subprogram_specification: . procedure_specification
  121                         | . function_specification
  124 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    desplazar e ir al estado 6
    IDENTIFIER  desplazar e ir al estado 7
    PROCEDURE   desplazar e ir al estado 8
    TYPE        desplazar e ir al estado 9

    $default  reduce usando la regla 34 (declarative_part)

    declarative_item          ir al estado 10
    declarative_part          ir al estado 26
    function_specification    ir al estado 12
    object_declaration        ir al estado 13
    procedure_specification   ir al estado 14
    subprogram_body_          ir al estado 15
    subprogram_body           ir al estado 16
    subprogram_specification  ir al estado 17
    type_declaration          ir al estado 18


estado 16

   32 declarative_item: subprogram_body .

    $default  reduce usando la regla 32 (declarative_item)


estado 17

   31 declarative_item: subprogram_specification . ';'
  117 subprogram_body_: subprogram_specification . IS

    IS   desplazar e ir al estado 27
    ';'  desplazar e ir al estado 28


estado 18

   29 declarative_item: type_declaration .

    $default  reduce usando la regla 29 (declarative_item)


estado 19

   51 formal_part: . '(' parameter_specification parameter_specification_list ')'
   52            | .  [RETURN]
   55 function_specification: FUNCTION IDENTIFIER . formal_part RETURN type_definition

    '('  desplazar e ir al estado 29

    $default  reduce usando la regla 52 (formal_part)

    formal_part  ir al estado 30


estado 20

   56 identifier_list: ',' . IDENTIFIER identifier_list

    IDENTIFIER  desplazar e ir al estado 31


estado 21

   70 object_declaration: IDENTIFIER identifier_list . ':' constant type_definition assign_expression ';'

    ':'  desplazar e ir al estado 32


estado 22

   51 formal_part: . '(' parameter_specification parameter_specification_list ')'
   52            | .  [IS, ';']
   88 procedure_specification: PROCEDURE IDENTIFIER . formal_part

    '('  desplazar e ir al estado 29

    $default  reduce usando la regla 52 (formal_part)

    formal_part  ir al estado 33


estado 23

  124 type_declaration: TYPE IDENTIFIER . IS type_definition ';'

    IS  desplazar e ir al estado 34


estado 24

   33 declarative_part: declarative_item declarative_part .

    $default  reduce usando la regla 33 (declarative_part)


estado 25

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ . sequence_of_statements END IDENTIFIER ';'
   10 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   16 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   23 compound_statement: . if_statement
   24                   | . loop_statement
   25                   | . case_statement
   26                   | . assignment_statement
   58 if_statement: . IF '(' expression ')' THEN sequence_of_statements elsif_list else_statement END IF ';'
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   62 loop_statement: . WHILE '(' expression ')' LOOP sequence_of_statements END LOOP ';'
   69 null_statement: . NULL_ ';'
   83 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   84                         | . PUT '(' STRING_LITERAL ')' ';'
   85                         | . PUT '(' variable ')' ';'
   86                         | . GET '(' variable ')' ';'
   87                         | . NEW_LINE ';'
  101 return_statement: . RETURN ';'
  102                 | . RETURN simple_expression ';'
  103 selected_component: . variable '.' IDENTIFIER
  104 sequence_of_statements: . statement
  105                       | . statement sequence_of_statements
  112 simple_statement: . null_statement
  113                 | . return_statement
  114                 | . procedure_call_statement
  115 statement: . simple_statement
  116          | . compound_statement
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    CASE        desplazar e ir al estado 35
    IF          desplazar e ir al estado 36
    IDENTIFIER  desplazar e ir al estado 37
    NULL_       desplazar e ir al estado 38
    RETURN      desplazar e ir al estado 39
    WHILE       desplazar e ir al estado 40
    PUT         desplazar e ir al estado 41
    GET         desplazar e ir al estado 42
    NEW_LINE    desplazar e ir al estado 43

    assignment_statement      ir al estado 44
    case_statement            ir al estado 45
    compound_statement        ir al estado 46
    if_statement              ir al estado 47
    indexed_component         ir al estado 48
    loop_statement            ir al estado 49
    null_statement            ir al estado 50
    procedure_call_statement  ir al estado 51
    return_statement          ir al estado 52
    selected_component        ir al estado 53
    sequence_of_statements    ir al estado 54
    simple_statement          ir al estado 55
    statement                 ir al estado 56
    variable                  ir al estado 57


estado 26

  118 subprogram_body: subprogram_body_ declarative_part . BEGIN_ sequence_of_statements END IDENTIFIER ';'
  119                | subprogram_body_ declarative_part . BEGIN_ sequence_of_statements END ';'

    BEGIN_  desplazar e ir al estado 58


estado 27

  117 subprogram_body_: subprogram_specification IS .

    $default  reduce usando la regla 117 (subprogram_body_)


estado 28

   31 declarative_item: subprogram_specification ';' .

    $default  reduce usando la regla 31 (declarative_item)


estado 29

   51 formal_part: '(' . parameter_specification parameter_specification_list ')'
   71 parameter_specification: . IDENTIFIER identifier_list ':' mode type_definition assign_expression

    IDENTIFIER  desplazar e ir al estado 59

    parameter_specification  ir al estado 60


estado 30

   55 function_specification: FUNCTION IDENTIFIER formal_part . RETURN type_definition

    RETURN  desplazar e ir al estado 61


estado 31

   56 identifier_list: . ',' IDENTIFIER identifier_list
   56                | ',' IDENTIFIER . identifier_list
   57                | .  [':']

    ','  desplazar e ir al estado 20

    $default  reduce usando la regla 57 (identifier_list)

    identifier_list  ir al estado 62


estado 32

   27 constant: . CONSTANT
   28         | .  [ARRAY, IDENTIFIER, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]
   70 object_declaration: IDENTIFIER identifier_list ':' . constant type_definition assign_expression ';'

    CONSTANT  desplazar e ir al estado 63

    $default  reduce usando la regla 28 (constant)

    constant  ir al estado 64


estado 33

   88 procedure_specification: PROCEDURE IDENTIFIER formal_part .

    $default  reduce usando la regla 88 (procedure_specification)


estado 34

    7 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   89 record_type_definition: . RECORD component_list END RECORD
  124 type_declaration: TYPE IDENTIFIER IS . type_definition ';'
  125 type_definition: . INTEGER_TYPE
  126                | . REAL_TYPE
  127                | . CHARACTER_TYPE
  128                | . BOOLEAN_TYPE
  129                | . array_type_definition
  130                | . record_type_definition
  131                | . IDENTIFIER

    ARRAY           desplazar e ir al estado 65
    IDENTIFIER      desplazar e ir al estado 66
    RECORD          desplazar e ir al estado 67
    INTEGER_TYPE    desplazar e ir al estado 68
    REAL_TYPE       desplazar e ir al estado 69
    CHARACTER_TYPE  desplazar e ir al estado 70
    BOOLEAN_TYPE    desplazar e ir al estado 71

    array_type_definition   ir al estado 72
    record_type_definition  ir al estado 73
    type_definition         ir al estado 74


estado 35

   16 case_statement: CASE . IDENTIFIER IS case_statement_alternative_list END CASE ';'

    IDENTIFIER  desplazar e ir al estado 75


estado 36

   58 if_statement: IF . '(' expression ')' THEN sequence_of_statements elsif_list else_statement END IF ';'

    '('  desplazar e ir al estado 76


estado 37

    4 actual_parameter_part: . '(' ')'
    6                      | . '(' $@1 actual_parameter_list ')'
   59 indexed_component: IDENTIFIER . '[' expression expression_list ']'
   83 procedure_call_statement: IDENTIFIER . actual_parameter_part ';'
  134 variable: IDENTIFIER .  [ASSIGNMENT_OP, '.']

    '('  desplazar e ir al estado 77
    '['  desplazar e ir al estado 78

    $default  reduce usando la regla 134 (variable)

    actual_parameter_part  ir al estado 79


estado 38

   69 null_statement: NULL_ . ';'

    ';'  desplazar e ir al estado 80


estado 39

   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
  101 return_statement: RETURN . ';'
  102                 | RETURN . simple_expression ';'
  103 selected_component: . variable '.' IDENTIFIER
  107 simple_expression: . unary_adding_operator term @5 binary_adding_list
  108                  | . unary_adding_operator term
  110                  | . term @6 binary_adding_list
  111                  | . term
  122 term: . factor
  123     | . term multiplying_operator factor
  132 unary_adding_operator: . '+'
  133                      | . '-'
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    '+'                desplazar e ir al estado 84
    '-'                desplazar e ir al estado 85
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    ';'                desplazar e ir al estado 91
    '('                desplazar e ir al estado 92

    factor                 ir al estado 93
    function_call          ir al estado 94
    indexed_component      ir al estado 48
    primary                ir al estado 95
    selected_component     ir al estado 53
    simple_expression      ir al estado 96
    term                   ir al estado 97
    unary_adding_operator  ir al estado 98
    variable               ir al estado 99


estado 40

   62 loop_statement: WHILE . '(' expression ')' LOOP sequence_of_statements END LOOP ';'

    '('  desplazar e ir al estado 100


estado 41

   84 procedure_call_statement: PUT . '(' STRING_LITERAL ')' ';'
   85                         | PUT . '(' variable ')' ';'

    '('  desplazar e ir al estado 101


estado 42

   86 procedure_call_statement: GET . '(' variable ')' ';'

    '('  desplazar e ir al estado 102


estado 43

   87 procedure_call_statement: NEW_LINE . ';'

    ';'  desplazar e ir al estado 103


estado 44

   26 compound_statement: assignment_statement .

    $default  reduce usando la regla 26 (compound_statement)


estado 45

   25 compound_statement: case_statement .

    $default  reduce usando la regla 25 (compound_statement)


estado 46

  116 statement: compound_statement .

    $default  reduce usando la regla 116 (statement)


estado 47

   23 compound_statement: if_statement .

    $default  reduce usando la regla 23 (compound_statement)


estado 48

  135 variable: indexed_component .

    $default  reduce usando la regla 135 (variable)


estado 49

   24 compound_statement: loop_statement .

    $default  reduce usando la regla 24 (compound_statement)


estado 50

  112 simple_statement: null_statement .

    $default  reduce usando la regla 112 (simple_statement)


estado 51

  114 simple_statement: procedure_call_statement .

    $default  reduce usando la regla 114 (simple_statement)


estado 52

  113 simple_statement: return_statement .

    $default  reduce usando la regla 113 (simple_statement)


estado 53

  136 variable: selected_component .

    $default  reduce usando la regla 136 (variable)


estado 54

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements . END IDENTIFIER ';'

    END  desplazar e ir al estado 104


estado 55

  115 statement: simple_statement .

    $default  reduce usando la regla 115 (statement)


estado 56

   10 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   16 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   23 compound_statement: . if_statement
   24                   | . loop_statement
   25                   | . case_statement
   26                   | . assignment_statement
   58 if_statement: . IF '(' expression ')' THEN sequence_of_statements elsif_list else_statement END IF ';'
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   62 loop_statement: . WHILE '(' expression ')' LOOP sequence_of_statements END LOOP ';'
   69 null_statement: . NULL_ ';'
   83 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   84                         | . PUT '(' STRING_LITERAL ')' ';'
   85                         | . PUT '(' variable ')' ';'
   86                         | . GET '(' variable ')' ';'
   87                         | . NEW_LINE ';'
  101 return_statement: . RETURN ';'
  102                 | . RETURN simple_expression ';'
  103 selected_component: . variable '.' IDENTIFIER
  104 sequence_of_statements: . statement
  104                       | statement .  [ELSE, ELSIF, END, WHEN]
  105                       | . statement sequence_of_statements
  105                       | statement . sequence_of_statements
  112 simple_statement: . null_statement
  113                 | . return_statement
  114                 | . procedure_call_statement
  115 statement: . simple_statement
  116          | . compound_statement
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    CASE        desplazar e ir al estado 35
    IF          desplazar e ir al estado 36
    IDENTIFIER  desplazar e ir al estado 37
    NULL_       desplazar e ir al estado 38
    RETURN      desplazar e ir al estado 39
    WHILE       desplazar e ir al estado 40
    PUT         desplazar e ir al estado 41
    GET         desplazar e ir al estado 42
    NEW_LINE    desplazar e ir al estado 43

    $default  reduce usando la regla 104 (sequence_of_statements)

    assignment_statement      ir al estado 44
    case_statement            ir al estado 45
    compound_statement        ir al estado 46
    if_statement              ir al estado 47
    indexed_component         ir al estado 48
    loop_statement            ir al estado 49
    null_statement            ir al estado 50
    procedure_call_statement  ir al estado 51
    return_statement          ir al estado 52
    selected_component        ir al estado 53
    sequence_of_statements    ir al estado 105
    simple_statement          ir al estado 55
    statement                 ir al estado 56
    variable                  ir al estado 57


estado 57

   10 assignment_statement: variable . ASSIGNMENT_OP expression ';'
  103 selected_component: variable . '.' IDENTIFIER

    ASSIGNMENT_OP  desplazar e ir al estado 106
    '.'            desplazar e ir al estado 107


estado 58

   10 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   16 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   23 compound_statement: . if_statement
   24                   | . loop_statement
   25                   | . case_statement
   26                   | . assignment_statement
   58 if_statement: . IF '(' expression ')' THEN sequence_of_statements elsif_list else_statement END IF ';'
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   62 loop_statement: . WHILE '(' expression ')' LOOP sequence_of_statements END LOOP ';'
   69 null_statement: . NULL_ ';'
   83 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   84                         | . PUT '(' STRING_LITERAL ')' ';'
   85                         | . PUT '(' variable ')' ';'
   86                         | . GET '(' variable ')' ';'
   87                         | . NEW_LINE ';'
  101 return_statement: . RETURN ';'
  102                 | . RETURN simple_expression ';'
  103 selected_component: . variable '.' IDENTIFIER
  104 sequence_of_statements: . statement
  105                       | . statement sequence_of_statements
  112 simple_statement: . null_statement
  113                 | . return_statement
  114                 | . procedure_call_statement
  115 statement: . simple_statement
  116          | . compound_statement
  118 subprogram_body: subprogram_body_ declarative_part BEGIN_ . sequence_of_statements END IDENTIFIER ';'
  119                | subprogram_body_ declarative_part BEGIN_ . sequence_of_statements END ';'
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    CASE        desplazar e ir al estado 35
    IF          desplazar e ir al estado 36
    IDENTIFIER  desplazar e ir al estado 37
    NULL_       desplazar e ir al estado 38
    RETURN      desplazar e ir al estado 39
    WHILE       desplazar e ir al estado 40
    PUT         desplazar e ir al estado 41
    GET         desplazar e ir al estado 42
    NEW_LINE    desplazar e ir al estado 43

    assignment_statement      ir al estado 44
    case_statement            ir al estado 45
    compound_statement        ir al estado 46
    if_statement              ir al estado 47
    indexed_component         ir al estado 48
    loop_statement            ir al estado 49
    null_statement            ir al estado 50
    procedure_call_statement  ir al estado 51
    return_statement          ir al estado 52
    selected_component        ir al estado 53
    sequence_of_statements    ir al estado 108
    simple_statement          ir al estado 55
    statement                 ir al estado 56
    variable                  ir al estado 57


estado 59

   56 identifier_list: . ',' IDENTIFIER identifier_list
   57                | .  [':']
   71 parameter_specification: IDENTIFIER . identifier_list ':' mode type_definition assign_expression

    ','  desplazar e ir al estado 20

    $default  reduce usando la regla 57 (identifier_list)

    identifier_list  ir al estado 109


estado 60

   51 formal_part: '(' parameter_specification . parameter_specification_list ')'
   72 parameter_specification_list: . ';' parameter_specification parameter_specification_list
   73                             | .  [')']

    ';'  desplazar e ir al estado 110

    $default  reduce usando la regla 73 (parameter_specification_list)

    parameter_specification_list  ir al estado 111


estado 61

    7 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   55 function_specification: FUNCTION IDENTIFIER formal_part RETURN . type_definition
   89 record_type_definition: . RECORD component_list END RECORD
  125 type_definition: . INTEGER_TYPE
  126                | . REAL_TYPE
  127                | . CHARACTER_TYPE
  128                | . BOOLEAN_TYPE
  129                | . array_type_definition
  130                | . record_type_definition
  131                | . IDENTIFIER

    ARRAY           desplazar e ir al estado 65
    IDENTIFIER      desplazar e ir al estado 66
    RECORD          desplazar e ir al estado 67
    INTEGER_TYPE    desplazar e ir al estado 68
    REAL_TYPE       desplazar e ir al estado 69
    CHARACTER_TYPE  desplazar e ir al estado 70
    BOOLEAN_TYPE    desplazar e ir al estado 71

    array_type_definition   ir al estado 72
    record_type_definition  ir al estado 73
    type_definition         ir al estado 112


estado 62

   56 identifier_list: ',' IDENTIFIER identifier_list .

    $default  reduce usando la regla 56 (identifier_list)


estado 63

   27 constant: CONSTANT .

    $default  reduce usando la regla 27 (constant)


estado 64

    7 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   70 object_declaration: IDENTIFIER identifier_list ':' constant . type_definition assign_expression ';'
   89 record_type_definition: . RECORD component_list END RECORD
  125 type_definition: . INTEGER_TYPE
  126                | . REAL_TYPE
  127                | . CHARACTER_TYPE
  128                | . BOOLEAN_TYPE
  129                | . array_type_definition
  130                | . record_type_definition
  131                | . IDENTIFIER

    ARRAY           desplazar e ir al estado 65
    IDENTIFIER      desplazar e ir al estado 66
    RECORD          desplazar e ir al estado 67
    INTEGER_TYPE    desplazar e ir al estado 68
    REAL_TYPE       desplazar e ir al estado 69
    CHARACTER_TYPE  desplazar e ir al estado 70
    BOOLEAN_TYPE    desplazar e ir al estado 71

    array_type_definition   ir al estado 72
    record_type_definition  ir al estado 73
    type_definition         ir al estado 113


estado 65

    7 array_type_definition: ARRAY . '(' expression expression_list ')' OF type_definition

    '('  desplazar e ir al estado 114


estado 66

  131 type_definition: IDENTIFIER .

    $default  reduce usando la regla 131 (type_definition)


estado 67

   21 component_list: . component_list component_item
   22               | .
   89 record_type_definition: RECORD . component_list END RECORD

    $default  reduce usando la regla 22 (component_list)

    component_list  ir al estado 115


estado 68

  125 type_definition: INTEGER_TYPE .

    $default  reduce usando la regla 125 (type_definition)


estado 69

  126 type_definition: REAL_TYPE .

    $default  reduce usando la regla 126 (type_definition)


estado 70

  127 type_definition: CHARACTER_TYPE .

    $default  reduce usando la regla 127 (type_definition)


estado 71

  128 type_definition: BOOLEAN_TYPE .

    $default  reduce usando la regla 128 (type_definition)


estado 72

  129 type_definition: array_type_definition .

    $default  reduce usando la regla 129 (type_definition)


estado 73

  130 type_definition: record_type_definition .

    $default  reduce usando la regla 130 (type_definition)


estado 74

  124 type_declaration: TYPE IDENTIFIER IS type_definition . ';'

    ';'  desplazar e ir al estado 116


estado 75

   16 case_statement: CASE IDENTIFIER . IS case_statement_alternative_list END CASE ';'

    IS  desplazar e ir al estado 117


estado 76

   45 expression: . relation @3 relation_list
   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   58 if_statement: IF '(' . expression ')' THEN sequence_of_statements elsif_list else_statement END IF ';'
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
   90 relation: . simple_expression
   91         | . simple_expression relational_operator simple_expression
  103 selected_component: . variable '.' IDENTIFIER
  107 simple_expression: . unary_adding_operator term @5 binary_adding_list
  108                  | . unary_adding_operator term
  110                  | . term @6 binary_adding_list
  111                  | . term
  122 term: . factor
  123     | . term multiplying_operator factor
  132 unary_adding_operator: . '+'
  133                      | . '-'
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    '+'                desplazar e ir al estado 84
    '-'                desplazar e ir al estado 85
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    expression             ir al estado 118
    factor                 ir al estado 93
    function_call          ir al estado 94
    indexed_component      ir al estado 48
    primary                ir al estado 95
    relation               ir al estado 119
    selected_component     ir al estado 53
    simple_expression      ir al estado 120
    term                   ir al estado 97
    unary_adding_operator  ir al estado 98
    variable               ir al estado 99


estado 77

    4 actual_parameter_part: '(' . ')'
    5 $@1: .  [IDENTIFIER, NOT, NULL_, '+', '-', INTEGER_LITERAL, FLOAT_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, BOOLEAN_LITERAL, '(']
    6 actual_parameter_part: '(' . $@1 actual_parameter_list ')'

    ')'  desplazar e ir al estado 121

    $default  reduce usando la regla 5 ($@1)

    $@1  ir al estado 122


estado 78

   45 expression: . relation @3 relation_list
   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   59                  | IDENTIFIER '[' . expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
   90 relation: . simple_expression
   91         | . simple_expression relational_operator simple_expression
  103 selected_component: . variable '.' IDENTIFIER
  107 simple_expression: . unary_adding_operator term @5 binary_adding_list
  108                  | . unary_adding_operator term
  110                  | . term @6 binary_adding_list
  111                  | . term
  122 term: . factor
  123     | . term multiplying_operator factor
  132 unary_adding_operator: . '+'
  133                      | . '-'
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    '+'                desplazar e ir al estado 84
    '-'                desplazar e ir al estado 85
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    expression             ir al estado 123
    factor                 ir al estado 93
    function_call          ir al estado 94
    indexed_component      ir al estado 48
    primary                ir al estado 95
    relation               ir al estado 119
    selected_component     ir al estado 53
    simple_expression      ir al estado 120
    term                   ir al estado 97
    unary_adding_operator  ir al estado 98
    variable               ir al estado 99


estado 79

   83 procedure_call_statement: IDENTIFIER actual_parameter_part . ';'

    ';'  desplazar e ir al estado 124


estado 80

   69 null_statement: NULL_ ';' .

    $default  reduce usando la regla 69 (null_statement)


estado 81

    4 actual_parameter_part: . '(' ')'
    6                      | . '(' $@1 actual_parameter_list ')'
   53 function_call: IDENTIFIER . actual_parameter_part
   54              | IDENTIFIER . LENGTH
   59 indexed_component: IDENTIFIER . '[' expression expression_list ']'
  134 variable: IDENTIFIER .  [AND, OR, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', '*', POWER_OP, ';', ',', ')', '|', ']', '/', '=', '<', '>', '.']

    LENGTH  desplazar e ir al estado 125
    '('     desplazar e ir al estado 77
    '['     desplazar e ir al estado 78

    $default  reduce usando la regla 134 (variable)

    actual_parameter_part  ir al estado 126


estado 82

   50 factor: NOT . primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
  103 selected_component: . variable '.' IDENTIFIER
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NULL_              desplazar e ir al estado 83
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    function_call       ir al estado 94
    indexed_component   ir al estado 48
    primary             ir al estado 127
    selected_component  ir al estado 53
    variable            ir al estado 99


estado 83

   78 primary: NULL_ .

    $default  reduce usando la regla 78 (primary)


estado 84

  132 unary_adding_operator: '+' .

    $default  reduce usando la regla 132 (unary_adding_operator)


estado 85

  133 unary_adding_operator: '-' .

    $default  reduce usando la regla 133 (unary_adding_operator)


estado 86

   74 primary: INTEGER_LITERAL .

    $default  reduce usando la regla 74 (primary)


estado 87

   75 primary: FLOAT_LITERAL .

    $default  reduce usando la regla 75 (primary)


estado 88

   76 primary: CHARACTER_LITERAL .

    $default  reduce usando la regla 76 (primary)


estado 89

   79 primary: STRING_LITERAL .

    $default  reduce usando la regla 79 (primary)


estado 90

   77 primary: BOOLEAN_LITERAL .

    $default  reduce usando la regla 77 (primary)


estado 91

  101 return_statement: RETURN ';' .

    $default  reduce usando la regla 101 (return_statement)


estado 92

   45 expression: . relation @3 relation_list
   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
   82        | '(' . expression ')'
   90 relation: . simple_expression
   91         | . simple_expression relational_operator simple_expression
  103 selected_component: . variable '.' IDENTIFIER
  107 simple_expression: . unary_adding_operator term @5 binary_adding_list
  108                  | . unary_adding_operator term
  110                  | . term @6 binary_adding_list
  111                  | . term
  122 term: . factor
  123     | . term multiplying_operator factor
  132 unary_adding_operator: . '+'
  133                      | . '-'
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    '+'                desplazar e ir al estado 84
    '-'                desplazar e ir al estado 85
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    expression             ir al estado 128
    factor                 ir al estado 93
    function_call          ir al estado 94
    indexed_component      ir al estado 48
    primary                ir al estado 95
    relation               ir al estado 119
    selected_component     ir al estado 53
    simple_expression      ir al estado 120
    term                   ir al estado 97
    unary_adding_operator  ir al estado 98
    variable               ir al estado 99


estado 93

  122 term: factor .

    $default  reduce usando la regla 122 (term)


estado 94

   81 primary: function_call .

    $default  reduce usando la regla 81 (primary)


estado 95

   48 factor: primary .  [AND, OR, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', '*', ';', ',', ')', ']', '/', '=', '<', '>']
   49       | primary . POWER_OP primary

    POWER_OP  desplazar e ir al estado 129

    $default  reduce usando la regla 48 (factor)


estado 96

  102 return_statement: RETURN simple_expression . ';'

    ';'  desplazar e ir al estado 130


estado 97

   67 multiplying_operator: . '*'
   68                     | . '/'
  109 @6: .  ['+', '-']
  110 simple_expression: term . @6 binary_adding_list
  111                  | term .  [AND, OR, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, ';', ',', ')', ']', '=', '<', '>']
  123 term: term . multiplying_operator factor

    '*'  desplazar e ir al estado 131
    '/'  desplazar e ir al estado 132

    '+'       reduce usando la regla 109 (@6)
    '-'       reduce usando la regla 109 (@6)
    $default  reduce usando la regla 111 (simple_expression)

    multiplying_operator  ir al estado 133
    @6                    ir al estado 134


estado 98

   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
  103 selected_component: . variable '.' IDENTIFIER
  107 simple_expression: unary_adding_operator . term @5 binary_adding_list
  108                  | unary_adding_operator . term
  122 term: . factor
  123     | . term multiplying_operator factor
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    factor              ir al estado 93
    function_call       ir al estado 94
    indexed_component   ir al estado 48
    primary             ir al estado 95
    selected_component  ir al estado 53
    term                ir al estado 135
    variable            ir al estado 99


estado 99

   80 primary: variable .  [AND, OR, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', '*', POWER_OP, ';', ',', ')', '|', ']', '/', '=', '<', '>']
  103 selected_component: variable . '.' IDENTIFIER

    '.'  desplazar e ir al estado 107

    $default  reduce usando la regla 80 (primary)


estado 100

   45 expression: . relation @3 relation_list
   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   62 loop_statement: WHILE '(' . expression ')' LOOP sequence_of_statements END LOOP ';'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
   90 relation: . simple_expression
   91         | . simple_expression relational_operator simple_expression
  103 selected_component: . variable '.' IDENTIFIER
  107 simple_expression: . unary_adding_operator term @5 binary_adding_list
  108                  | . unary_adding_operator term
  110                  | . term @6 binary_adding_list
  111                  | . term
  122 term: . factor
  123     | . term multiplying_operator factor
  132 unary_adding_operator: . '+'
  133                      | . '-'
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    '+'                desplazar e ir al estado 84
    '-'                desplazar e ir al estado 85
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    expression             ir al estado 136
    factor                 ir al estado 93
    function_call          ir al estado 94
    indexed_component      ir al estado 48
    primary                ir al estado 95
    relation               ir al estado 119
    selected_component     ir al estado 53
    simple_expression      ir al estado 120
    term                   ir al estado 97
    unary_adding_operator  ir al estado 98
    variable               ir al estado 99


estado 101

   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   84 procedure_call_statement: PUT '(' . STRING_LITERAL ')' ';'
   85                         | PUT '(' . variable ')' ';'
  103 selected_component: . variable '.' IDENTIFIER
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER      desplazar e ir al estado 137
    STRING_LITERAL  desplazar e ir al estado 138

    indexed_component   ir al estado 48
    selected_component  ir al estado 53
    variable            ir al estado 139


estado 102

   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   86 procedure_call_statement: GET '(' . variable ')' ';'
  103 selected_component: . variable '.' IDENTIFIER
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER  desplazar e ir al estado 137

    indexed_component   ir al estado 48
    selected_component  ir al estado 53
    variable            ir al estado 140


estado 103

   87 procedure_call_statement: NEW_LINE ';' .

    $default  reduce usando la regla 87 (procedure_call_statement)


estado 104

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END . IDENTIFIER ';'

    IDENTIFIER  desplazar e ir al estado 141


estado 105

  105 sequence_of_statements: statement sequence_of_statements .

    $default  reduce usando la regla 105 (sequence_of_statements)


estado 106

   10 assignment_statement: variable ASSIGNMENT_OP . expression ';'
   45 expression: . relation @3 relation_list
   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
   90 relation: . simple_expression
   91         | . simple_expression relational_operator simple_expression
  103 selected_component: . variable '.' IDENTIFIER
  107 simple_expression: . unary_adding_operator term @5 binary_adding_list
  108                  | . unary_adding_operator term
  110                  | . term @6 binary_adding_list
  111                  | . term
  122 term: . factor
  123     | . term multiplying_operator factor
  132 unary_adding_operator: . '+'
  133                      | . '-'
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    '+'                desplazar e ir al estado 84
    '-'                desplazar e ir al estado 85
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    expression             ir al estado 142
    factor                 ir al estado 93
    function_call          ir al estado 94
    indexed_component      ir al estado 48
    primary                ir al estado 95
    relation               ir al estado 119
    selected_component     ir al estado 53
    simple_expression      ir al estado 120
    term                   ir al estado 97
    unary_adding_operator  ir al estado 98
    variable               ir al estado 99


estado 107

  103 selected_component: variable '.' . IDENTIFIER

    IDENTIFIER  desplazar e ir al estado 143


estado 108

  118 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements . END IDENTIFIER ';'
  119                | subprogram_body_ declarative_part BEGIN_ sequence_of_statements . END ';'

    END  desplazar e ir al estado 144


estado 109

   71 parameter_specification: IDENTIFIER identifier_list . ':' mode type_definition assign_expression

    ':'  desplazar e ir al estado 145


estado 110

   71 parameter_specification: . IDENTIFIER identifier_list ':' mode type_definition assign_expression
   72 parameter_specification_list: ';' . parameter_specification parameter_specification_list

    IDENTIFIER  desplazar e ir al estado 59

    parameter_specification  ir al estado 146


estado 111

   51 formal_part: '(' parameter_specification parameter_specification_list . ')'

    ')'  desplazar e ir al estado 147


estado 112

   55 function_specification: FUNCTION IDENTIFIER formal_part RETURN type_definition .

    $default  reduce usando la regla 55 (function_specification)


estado 113

    8 assign_expression: . ASSIGNMENT_OP expression
    9                  | .  [';']
   70 object_declaration: IDENTIFIER identifier_list ':' constant type_definition . assign_expression ';'

    ASSIGNMENT_OP  desplazar e ir al estado 148

    $default  reduce usando la regla 9 (assign_expression)

    assign_expression  ir al estado 149


estado 114

    7 array_type_definition: ARRAY '(' . expression expression_list ')' OF type_definition
   45 expression: . relation @3 relation_list
   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
   90 relation: . simple_expression
   91         | . simple_expression relational_operator simple_expression
  103 selected_component: . variable '.' IDENTIFIER
  107 simple_expression: . unary_adding_operator term @5 binary_adding_list
  108                  | . unary_adding_operator term
  110                  | . term @6 binary_adding_list
  111                  | . term
  122 term: . factor
  123     | . term multiplying_operator factor
  132 unary_adding_operator: . '+'
  133                      | . '-'
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    '+'                desplazar e ir al estado 84
    '-'                desplazar e ir al estado 85
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    expression             ir al estado 150
    factor                 ir al estado 93
    function_call          ir al estado 94
    indexed_component      ir al estado 48
    primary                ir al estado 95
    relation               ir al estado 119
    selected_component     ir al estado 53
    simple_expression      ir al estado 120
    term                   ir al estado 97
    unary_adding_operator  ir al estado 98
    variable               ir al estado 99


estado 115

   20 component_item: . IDENTIFIER identifier_list ':' type_definition assign_expression ';'
   21 component_list: component_list . component_item
   89 record_type_definition: RECORD component_list . END RECORD

    END         desplazar e ir al estado 151
    IDENTIFIER  desplazar e ir al estado 152

    component_item  ir al estado 153


estado 116

  124 type_declaration: TYPE IDENTIFIER IS type_definition ';' .

    $default  reduce usando la regla 124 (type_declaration)


estado 117

   16 case_statement: CASE IDENTIFIER IS . case_statement_alternative_list END CASE ';'
   18 case_statement_alternative_list: . case_statement_alternative_list case_statement_alternative
   19                                | .

    $default  reduce usando la regla 19 (case_statement_alternative_list)

    case_statement_alternative_list  ir al estado 154


estado 118

   58 if_statement: IF '(' expression . ')' THEN sequence_of_statements elsif_list else_statement END IF ';'

    ')'  desplazar e ir al estado 155


estado 119

   44 @3: .
   45 expression: relation . @3 relation_list

    $default  reduce usando la regla 44 (@3)

    @3  ir al estado 156


estado 120

   90 relation: simple_expression .  [AND, OR, ';', ',', ')', ']']
   91         | simple_expression . relational_operator simple_expression
   95 relational_operator: . '='
   96                    | . '<'
   97                    | . '>'
   98                    | . NOT_EQUAL_OP
   99                    | . LESSER_EQUAL_OP
  100                    | . GREATER_EQUAL_OP

    NOT_EQUAL_OP      desplazar e ir al estado 157
    GREATER_EQUAL_OP  desplazar e ir al estado 158
    LESSER_EQUAL_OP   desplazar e ir al estado 159
    '='               desplazar e ir al estado 160
    '<'               desplazar e ir al estado 161
    '>'               desplazar e ir al estado 162

    $default  reduce usando la regla 90 (relation)

    relational_operator  ir al estado 163


estado 121

    4 actual_parameter_part: '(' ')' .

    $default  reduce usando la regla 4 (actual_parameter_part)


estado 122

    2 actual_parameter_list: . expression
    3                      | . actual_parameter_list ',' expression
    6 actual_parameter_part: '(' $@1 . actual_parameter_list ')'
   45 expression: . relation @3 relation_list
   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
   90 relation: . simple_expression
   91         | . simple_expression relational_operator simple_expression
  103 selected_component: . variable '.' IDENTIFIER
  107 simple_expression: . unary_adding_operator term @5 binary_adding_list
  108                  | . unary_adding_operator term
  110                  | . term @6 binary_adding_list
  111                  | . term
  122 term: . factor
  123     | . term multiplying_operator factor
  132 unary_adding_operator: . '+'
  133                      | . '-'
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    '+'                desplazar e ir al estado 84
    '-'                desplazar e ir al estado 85
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    actual_parameter_list  ir al estado 164
    expression             ir al estado 165
    factor                 ir al estado 93
    function_call          ir al estado 94
    indexed_component      ir al estado 48
    primary                ir al estado 95
    relation               ir al estado 119
    selected_component     ir al estado 53
    simple_expression      ir al estado 120
    term                   ir al estado 97
    unary_adding_operator  ir al estado 98
    variable               ir al estado 99


estado 123

   46 expression_list: . ',' expression expression_list
   47                | .  [']']
   59 indexed_component: IDENTIFIER '[' expression . expression_list ']'

    ','  desplazar e ir al estado 166

    $default  reduce usando la regla 47 (expression_list)

    expression_list  ir al estado 167


estado 124

   83 procedure_call_statement: IDENTIFIER actual_parameter_part ';' .

    $default  reduce usando la regla 83 (procedure_call_statement)


estado 125

   54 function_call: IDENTIFIER LENGTH .

    $default  reduce usando la regla 54 (function_call)


estado 126

   53 function_call: IDENTIFIER actual_parameter_part .

    $default  reduce usando la regla 53 (function_call)


estado 127

   50 factor: NOT primary .

    $default  reduce usando la regla 50 (factor)


estado 128

   82 primary: '(' expression . ')'

    ')'  desplazar e ir al estado 168


estado 129

   49 factor: primary POWER_OP . primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
  103 selected_component: . variable '.' IDENTIFIER
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NULL_              desplazar e ir al estado 83
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    function_call       ir al estado 94
    indexed_component   ir al estado 48
    primary             ir al estado 169
    selected_component  ir al estado 53
    variable            ir al estado 99


estado 130

  102 return_statement: RETURN simple_expression ';' .

    $default  reduce usando la regla 102 (return_statement)


estado 131

   67 multiplying_operator: '*' .

    $default  reduce usando la regla 67 (multiplying_operator)


estado 132

   68 multiplying_operator: '/' .

    $default  reduce usando la regla 68 (multiplying_operator)


estado 133

   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
  103 selected_component: . variable '.' IDENTIFIER
  123 term: term multiplying_operator . factor
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    factor              ir al estado 170
    function_call       ir al estado 94
    indexed_component   ir al estado 48
    primary             ir al estado 95
    selected_component  ir al estado 53
    variable            ir al estado 99


estado 134

   11 binary_adding_list: . binary_adding_operator term
   13                   | . binary_adding_operator term @2 binary_adding_list
   14 binary_adding_operator: . '+'
   15                       | . '-'
  110 simple_expression: term @6 . binary_adding_list

    '+'  desplazar e ir al estado 171
    '-'  desplazar e ir al estado 172

    binary_adding_list      ir al estado 173
    binary_adding_operator  ir al estado 174


estado 135

   67 multiplying_operator: . '*'
   68                     | . '/'
  106 @5: .  ['+', '-']
  107 simple_expression: unary_adding_operator term . @5 binary_adding_list
  108                  | unary_adding_operator term .  [AND, OR, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, ';', ',', ')', ']', '=', '<', '>']
  123 term: term . multiplying_operator factor

    '*'  desplazar e ir al estado 131
    '/'  desplazar e ir al estado 132

    '+'       reduce usando la regla 106 (@5)
    '-'       reduce usando la regla 106 (@5)
    $default  reduce usando la regla 108 (simple_expression)

    multiplying_operator  ir al estado 133
    @5                    ir al estado 175


estado 136

   62 loop_statement: WHILE '(' expression . ')' LOOP sequence_of_statements END LOOP ';'

    ')'  desplazar e ir al estado 176


estado 137

   59 indexed_component: IDENTIFIER . '[' expression expression_list ']'
  134 variable: IDENTIFIER .  [')', '.']

    '['  desplazar e ir al estado 78

    $default  reduce usando la regla 134 (variable)


estado 138

   84 procedure_call_statement: PUT '(' STRING_LITERAL . ')' ';'

    ')'  desplazar e ir al estado 177


estado 139

   85 procedure_call_statement: PUT '(' variable . ')' ';'
  103 selected_component: variable . '.' IDENTIFIER

    ')'  desplazar e ir al estado 178
    '.'  desplazar e ir al estado 107


estado 140

   86 procedure_call_statement: GET '(' variable . ')' ';'
  103 selected_component: variable . '.' IDENTIFIER

    ')'  desplazar e ir al estado 179
    '.'  desplazar e ir al estado 107


estado 141

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER . ';'

    ';'  desplazar e ir al estado 180


estado 142

   10 assignment_statement: variable ASSIGNMENT_OP expression . ';'

    ';'  desplazar e ir al estado 181


estado 143

  103 selected_component: variable '.' IDENTIFIER .

    $default  reduce usando la regla 103 (selected_component)


estado 144

  118 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements END . IDENTIFIER ';'
  119                | subprogram_body_ declarative_part BEGIN_ sequence_of_statements END . ';'

    IDENTIFIER  desplazar e ir al estado 182
    ';'         desplazar e ir al estado 183


estado 145

   63 mode: . OUT
   64     | . IN OUT
   65     | . IN
   66     | .  [ARRAY, IDENTIFIER, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]
   71 parameter_specification: IDENTIFIER identifier_list ':' . mode type_definition assign_expression

    IN   desplazar e ir al estado 184
    OUT  desplazar e ir al estado 185

    $default  reduce usando la regla 66 (mode)

    mode  ir al estado 186


estado 146

   72 parameter_specification_list: . ';' parameter_specification parameter_specification_list
   72                             | ';' parameter_specification . parameter_specification_list
   73                             | .  [')']

    ';'  desplazar e ir al estado 110

    $default  reduce usando la regla 73 (parameter_specification_list)

    parameter_specification_list  ir al estado 187


estado 147

   51 formal_part: '(' parameter_specification parameter_specification_list ')' .

    $default  reduce usando la regla 51 (formal_part)


estado 148

    8 assign_expression: ASSIGNMENT_OP . expression
   45 expression: . relation @3 relation_list
   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
   90 relation: . simple_expression
   91         | . simple_expression relational_operator simple_expression
  103 selected_component: . variable '.' IDENTIFIER
  107 simple_expression: . unary_adding_operator term @5 binary_adding_list
  108                  | . unary_adding_operator term
  110                  | . term @6 binary_adding_list
  111                  | . term
  122 term: . factor
  123     | . term multiplying_operator factor
  132 unary_adding_operator: . '+'
  133                      | . '-'
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    '+'                desplazar e ir al estado 84
    '-'                desplazar e ir al estado 85
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    expression             ir al estado 188
    factor                 ir al estado 93
    function_call          ir al estado 94
    indexed_component      ir al estado 48
    primary                ir al estado 95
    relation               ir al estado 119
    selected_component     ir al estado 53
    simple_expression      ir al estado 120
    term                   ir al estado 97
    unary_adding_operator  ir al estado 98
    variable               ir al estado 99


estado 149

   70 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression . ';'

    ';'  desplazar e ir al estado 189


estado 150

    7 array_type_definition: ARRAY '(' expression . expression_list ')' OF type_definition
   46 expression_list: . ',' expression expression_list
   47                | .  [')']

    ','  desplazar e ir al estado 166

    $default  reduce usando la regla 47 (expression_list)

    expression_list  ir al estado 190


estado 151

   89 record_type_definition: RECORD component_list END . RECORD

    RECORD  desplazar e ir al estado 191


estado 152

   20 component_item: IDENTIFIER . identifier_list ':' type_definition assign_expression ';'
   56 identifier_list: . ',' IDENTIFIER identifier_list
   57                | .  [':']

    ','  desplazar e ir al estado 20

    $default  reduce usando la regla 57 (identifier_list)

    identifier_list  ir al estado 192


estado 153

   21 component_list: component_list component_item .

    $default  reduce usando la regla 21 (component_list)


estado 154

   16 case_statement: CASE IDENTIFIER IS case_statement_alternative_list . END CASE ';'
   17 case_statement_alternative: . WHEN discrete_choice_list ARROW sequence_of_statements
   18 case_statement_alternative_list: case_statement_alternative_list . case_statement_alternative

    END   desplazar e ir al estado 193
    WHEN  desplazar e ir al estado 194

    case_statement_alternative  ir al estado 195


estado 155

   58 if_statement: IF '(' expression ')' . THEN sequence_of_statements elsif_list else_statement END IF ';'

    THEN  desplazar e ir al estado 196


estado 156

   45 expression: relation @3 . relation_list
   60 logical_operator: . AND
   61                 | . OR
   93 relation_list: . logical_operator relation @4 relation_list
   94              | .  [';', ',', ')', ']']

    AND  desplazar e ir al estado 197
    OR   desplazar e ir al estado 198

    $default  reduce usando la regla 94 (relation_list)

    logical_operator  ir al estado 199
    relation_list     ir al estado 200


estado 157

   98 relational_operator: NOT_EQUAL_OP .

    $default  reduce usando la regla 98 (relational_operator)


estado 158

  100 relational_operator: GREATER_EQUAL_OP .

    $default  reduce usando la regla 100 (relational_operator)


estado 159

   99 relational_operator: LESSER_EQUAL_OP .

    $default  reduce usando la regla 99 (relational_operator)


estado 160

   95 relational_operator: '=' .

    $default  reduce usando la regla 95 (relational_operator)


estado 161

   96 relational_operator: '<' .

    $default  reduce usando la regla 96 (relational_operator)


estado 162

   97 relational_operator: '>' .

    $default  reduce usando la regla 97 (relational_operator)


estado 163

   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
   91 relation: simple_expression relational_operator . simple_expression
  103 selected_component: . variable '.' IDENTIFIER
  107 simple_expression: . unary_adding_operator term @5 binary_adding_list
  108                  | . unary_adding_operator term
  110                  | . term @6 binary_adding_list
  111                  | . term
  122 term: . factor
  123     | . term multiplying_operator factor
  132 unary_adding_operator: . '+'
  133                      | . '-'
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    '+'                desplazar e ir al estado 84
    '-'                desplazar e ir al estado 85
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    factor                 ir al estado 93
    function_call          ir al estado 94
    indexed_component      ir al estado 48
    primary                ir al estado 95
    selected_component     ir al estado 53
    simple_expression      ir al estado 201
    term                   ir al estado 97
    unary_adding_operator  ir al estado 98
    variable               ir al estado 99


estado 164

    3 actual_parameter_list: actual_parameter_list . ',' expression
    6 actual_parameter_part: '(' $@1 actual_parameter_list . ')'

    ','  desplazar e ir al estado 202
    ')'  desplazar e ir al estado 203


estado 165

    2 actual_parameter_list: expression .

    $default  reduce usando la regla 2 (actual_parameter_list)


estado 166

   45 expression: . relation @3 relation_list
   46 expression_list: ',' . expression expression_list
   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
   90 relation: . simple_expression
   91         | . simple_expression relational_operator simple_expression
  103 selected_component: . variable '.' IDENTIFIER
  107 simple_expression: . unary_adding_operator term @5 binary_adding_list
  108                  | . unary_adding_operator term
  110                  | . term @6 binary_adding_list
  111                  | . term
  122 term: . factor
  123     | . term multiplying_operator factor
  132 unary_adding_operator: . '+'
  133                      | . '-'
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    '+'                desplazar e ir al estado 84
    '-'                desplazar e ir al estado 85
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    expression             ir al estado 204
    factor                 ir al estado 93
    function_call          ir al estado 94
    indexed_component      ir al estado 48
    primary                ir al estado 95
    relation               ir al estado 119
    selected_component     ir al estado 53
    simple_expression      ir al estado 120
    term                   ir al estado 97
    unary_adding_operator  ir al estado 98
    variable               ir al estado 99


estado 167

   59 indexed_component: IDENTIFIER '[' expression expression_list . ']'

    ']'  desplazar e ir al estado 205


estado 168

   82 primary: '(' expression ')' .

    $default  reduce usando la regla 82 (primary)


estado 169

   49 factor: primary POWER_OP primary .

    $default  reduce usando la regla 49 (factor)


estado 170

  123 term: term multiplying_operator factor .

    $default  reduce usando la regla 123 (term)


estado 171

   14 binary_adding_operator: '+' .

    $default  reduce usando la regla 14 (binary_adding_operator)


estado 172

   15 binary_adding_operator: '-' .

    $default  reduce usando la regla 15 (binary_adding_operator)


estado 173

  110 simple_expression: term @6 binary_adding_list .

    $default  reduce usando la regla 110 (simple_expression)


estado 174

   11 binary_adding_list: binary_adding_operator . term
   13                   | binary_adding_operator . term @2 binary_adding_list
   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
  103 selected_component: . variable '.' IDENTIFIER
  122 term: . factor
  123     | . term multiplying_operator factor
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    factor              ir al estado 93
    function_call       ir al estado 94
    indexed_component   ir al estado 48
    primary             ir al estado 95
    selected_component  ir al estado 53
    term                ir al estado 206
    variable            ir al estado 99


estado 175

   11 binary_adding_list: . binary_adding_operator term
   13                   | . binary_adding_operator term @2 binary_adding_list
   14 binary_adding_operator: . '+'
   15                       | . '-'
  107 simple_expression: unary_adding_operator term @5 . binary_adding_list

    '+'  desplazar e ir al estado 171
    '-'  desplazar e ir al estado 172

    binary_adding_list      ir al estado 207
    binary_adding_operator  ir al estado 174


estado 176

   62 loop_statement: WHILE '(' expression ')' . LOOP sequence_of_statements END LOOP ';'

    LOOP  desplazar e ir al estado 208


estado 177

   84 procedure_call_statement: PUT '(' STRING_LITERAL ')' . ';'

    ';'  desplazar e ir al estado 209


estado 178

   85 procedure_call_statement: PUT '(' variable ')' . ';'

    ';'  desplazar e ir al estado 210


estado 179

   86 procedure_call_statement: GET '(' variable ')' . ';'

    ';'  desplazar e ir al estado 211


estado 180

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';' .

    $default  reduce usando la regla 1 (main)


estado 181

   10 assignment_statement: variable ASSIGNMENT_OP expression ';' .

    $default  reduce usando la regla 10 (assignment_statement)


estado 182

  118 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER . ';'

    ';'  desplazar e ir al estado 212


estado 183

  119 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements END ';' .

    $default  reduce usando la regla 119 (subprogram_body)


estado 184

   64 mode: IN . OUT
   65     | IN .  [ARRAY, IDENTIFIER, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]

    OUT  desplazar e ir al estado 213

    $default  reduce usando la regla 65 (mode)


estado 185

   63 mode: OUT .

    $default  reduce usando la regla 63 (mode)


estado 186

    7 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   71 parameter_specification: IDENTIFIER identifier_list ':' mode . type_definition assign_expression
   89 record_type_definition: . RECORD component_list END RECORD
  125 type_definition: . INTEGER_TYPE
  126                | . REAL_TYPE
  127                | . CHARACTER_TYPE
  128                | . BOOLEAN_TYPE
  129                | . array_type_definition
  130                | . record_type_definition
  131                | . IDENTIFIER

    ARRAY           desplazar e ir al estado 65
    IDENTIFIER      desplazar e ir al estado 66
    RECORD          desplazar e ir al estado 67
    INTEGER_TYPE    desplazar e ir al estado 68
    REAL_TYPE       desplazar e ir al estado 69
    CHARACTER_TYPE  desplazar e ir al estado 70
    BOOLEAN_TYPE    desplazar e ir al estado 71

    array_type_definition   ir al estado 72
    record_type_definition  ir al estado 73
    type_definition         ir al estado 214


estado 187

   72 parameter_specification_list: ';' parameter_specification parameter_specification_list .

    $default  reduce usando la regla 72 (parameter_specification_list)


estado 188

    8 assign_expression: ASSIGNMENT_OP expression .

    $default  reduce usando la regla 8 (assign_expression)


estado 189

   70 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression ';' .

    $default  reduce usando la regla 70 (object_declaration)


estado 190

    7 array_type_definition: ARRAY '(' expression expression_list . ')' OF type_definition

    ')'  desplazar e ir al estado 215


estado 191

   89 record_type_definition: RECORD component_list END RECORD .

    $default  reduce usando la regla 89 (record_type_definition)


estado 192

   20 component_item: IDENTIFIER identifier_list . ':' type_definition assign_expression ';'

    ':'  desplazar e ir al estado 216


estado 193

   16 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END . CASE ';'

    CASE  desplazar e ir al estado 217


estado 194

   17 case_statement_alternative: WHEN . discrete_choice_list ARROW sequence_of_statements
   35 discrete_choice: . primary
   36                | . OTHERS
   37 discrete_choice_list: . discrete_choice_list '|' discrete_choice
   38                     | . discrete_choice
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
  103 selected_component: . variable '.' IDENTIFIER
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NULL_              desplazar e ir al estado 83
    OTHERS             desplazar e ir al estado 218
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    discrete_choice       ir al estado 219
    discrete_choice_list  ir al estado 220
    function_call         ir al estado 94
    indexed_component     ir al estado 48
    primary               ir al estado 221
    selected_component    ir al estado 53
    variable              ir al estado 99


estado 195

   18 case_statement_alternative_list: case_statement_alternative_list case_statement_alternative .

    $default  reduce usando la regla 18 (case_statement_alternative_list)


estado 196

   10 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   16 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   23 compound_statement: . if_statement
   24                   | . loop_statement
   25                   | . case_statement
   26                   | . assignment_statement
   58 if_statement: . IF '(' expression ')' THEN sequence_of_statements elsif_list else_statement END IF ';'
   58             | IF '(' expression ')' THEN . sequence_of_statements elsif_list else_statement END IF ';'
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   62 loop_statement: . WHILE '(' expression ')' LOOP sequence_of_statements END LOOP ';'
   69 null_statement: . NULL_ ';'
   83 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   84                         | . PUT '(' STRING_LITERAL ')' ';'
   85                         | . PUT '(' variable ')' ';'
   86                         | . GET '(' variable ')' ';'
   87                         | . NEW_LINE ';'
  101 return_statement: . RETURN ';'
  102                 | . RETURN simple_expression ';'
  103 selected_component: . variable '.' IDENTIFIER
  104 sequence_of_statements: . statement
  105                       | . statement sequence_of_statements
  112 simple_statement: . null_statement
  113                 | . return_statement
  114                 | . procedure_call_statement
  115 statement: . simple_statement
  116          | . compound_statement
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    CASE        desplazar e ir al estado 35
    IF          desplazar e ir al estado 36
    IDENTIFIER  desplazar e ir al estado 37
    NULL_       desplazar e ir al estado 38
    RETURN      desplazar e ir al estado 39
    WHILE       desplazar e ir al estado 40
    PUT         desplazar e ir al estado 41
    GET         desplazar e ir al estado 42
    NEW_LINE    desplazar e ir al estado 43

    assignment_statement      ir al estado 44
    case_statement            ir al estado 45
    compound_statement        ir al estado 46
    if_statement              ir al estado 47
    indexed_component         ir al estado 48
    loop_statement            ir al estado 49
    null_statement            ir al estado 50
    procedure_call_statement  ir al estado 51
    return_statement          ir al estado 52
    selected_component        ir al estado 53
    sequence_of_statements    ir al estado 222
    simple_statement          ir al estado 55
    statement                 ir al estado 56
    variable                  ir al estado 57


estado 197

   60 logical_operator: AND .

    $default  reduce usando la regla 60 (logical_operator)


estado 198

   61 logical_operator: OR .

    $default  reduce usando la regla 61 (logical_operator)


estado 199

   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
   90 relation: . simple_expression
   91         | . simple_expression relational_operator simple_expression
   93 relation_list: logical_operator . relation @4 relation_list
  103 selected_component: . variable '.' IDENTIFIER
  107 simple_expression: . unary_adding_operator term @5 binary_adding_list
  108                  | . unary_adding_operator term
  110                  | . term @6 binary_adding_list
  111                  | . term
  122 term: . factor
  123     | . term multiplying_operator factor
  132 unary_adding_operator: . '+'
  133                      | . '-'
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    '+'                desplazar e ir al estado 84
    '-'                desplazar e ir al estado 85
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    factor                 ir al estado 93
    function_call          ir al estado 94
    indexed_component      ir al estado 48
    primary                ir al estado 95
    relation               ir al estado 223
    selected_component     ir al estado 53
    simple_expression      ir al estado 120
    term                   ir al estado 97
    unary_adding_operator  ir al estado 98
    variable               ir al estado 99


estado 200

   45 expression: relation @3 relation_list .

    $default  reduce usando la regla 45 (expression)


estado 201

   91 relation: simple_expression relational_operator simple_expression .

    $default  reduce usando la regla 91 (relation)


estado 202

    3 actual_parameter_list: actual_parameter_list ',' . expression
   45 expression: . relation @3 relation_list
   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
   90 relation: . simple_expression
   91         | . simple_expression relational_operator simple_expression
  103 selected_component: . variable '.' IDENTIFIER
  107 simple_expression: . unary_adding_operator term @5 binary_adding_list
  108                  | . unary_adding_operator term
  110                  | . term @6 binary_adding_list
  111                  | . term
  122 term: . factor
  123     | . term multiplying_operator factor
  132 unary_adding_operator: . '+'
  133                      | . '-'
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    '+'                desplazar e ir al estado 84
    '-'                desplazar e ir al estado 85
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    expression             ir al estado 224
    factor                 ir al estado 93
    function_call          ir al estado 94
    indexed_component      ir al estado 48
    primary                ir al estado 95
    relation               ir al estado 119
    selected_component     ir al estado 53
    simple_expression      ir al estado 120
    term                   ir al estado 97
    unary_adding_operator  ir al estado 98
    variable               ir al estado 99


estado 203

    6 actual_parameter_part: '(' $@1 actual_parameter_list ')' .

    $default  reduce usando la regla 6 (actual_parameter_part)


estado 204

   46 expression_list: . ',' expression expression_list
   46                | ',' expression . expression_list
   47                | .  [')', ']']

    ','  desplazar e ir al estado 166

    $default  reduce usando la regla 47 (expression_list)

    expression_list  ir al estado 225


estado 205

   59 indexed_component: IDENTIFIER '[' expression expression_list ']' .

    $default  reduce usando la regla 59 (indexed_component)


estado 206

   11 binary_adding_list: binary_adding_operator term .  [AND, OR, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, ';', ',', ')', ']', '=', '<', '>']
   12 @2: .  ['+', '-']
   13 binary_adding_list: binary_adding_operator term . @2 binary_adding_list
   67 multiplying_operator: . '*'
   68                     | . '/'
  123 term: term . multiplying_operator factor

    '*'  desplazar e ir al estado 131
    '/'  desplazar e ir al estado 132

    '+'       reduce usando la regla 12 (@2)
    '-'       reduce usando la regla 12 (@2)
    $default  reduce usando la regla 11 (binary_adding_list)

    @2                    ir al estado 226
    multiplying_operator  ir al estado 133


estado 207

  107 simple_expression: unary_adding_operator term @5 binary_adding_list .

    $default  reduce usando la regla 107 (simple_expression)


estado 208

   10 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   16 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   23 compound_statement: . if_statement
   24                   | . loop_statement
   25                   | . case_statement
   26                   | . assignment_statement
   58 if_statement: . IF '(' expression ')' THEN sequence_of_statements elsif_list else_statement END IF ';'
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   62 loop_statement: . WHILE '(' expression ')' LOOP sequence_of_statements END LOOP ';'
   62               | WHILE '(' expression ')' LOOP . sequence_of_statements END LOOP ';'
   69 null_statement: . NULL_ ';'
   83 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   84                         | . PUT '(' STRING_LITERAL ')' ';'
   85                         | . PUT '(' variable ')' ';'
   86                         | . GET '(' variable ')' ';'
   87                         | . NEW_LINE ';'
  101 return_statement: . RETURN ';'
  102                 | . RETURN simple_expression ';'
  103 selected_component: . variable '.' IDENTIFIER
  104 sequence_of_statements: . statement
  105                       | . statement sequence_of_statements
  112 simple_statement: . null_statement
  113                 | . return_statement
  114                 | . procedure_call_statement
  115 statement: . simple_statement
  116          | . compound_statement
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    CASE        desplazar e ir al estado 35
    IF          desplazar e ir al estado 36
    IDENTIFIER  desplazar e ir al estado 37
    NULL_       desplazar e ir al estado 38
    RETURN      desplazar e ir al estado 39
    WHILE       desplazar e ir al estado 40
    PUT         desplazar e ir al estado 41
    GET         desplazar e ir al estado 42
    NEW_LINE    desplazar e ir al estado 43

    assignment_statement      ir al estado 44
    case_statement            ir al estado 45
    compound_statement        ir al estado 46
    if_statement              ir al estado 47
    indexed_component         ir al estado 48
    loop_statement            ir al estado 49
    null_statement            ir al estado 50
    procedure_call_statement  ir al estado 51
    return_statement          ir al estado 52
    selected_component        ir al estado 53
    sequence_of_statements    ir al estado 227
    simple_statement          ir al estado 55
    statement                 ir al estado 56
    variable                  ir al estado 57


estado 209

   84 procedure_call_statement: PUT '(' STRING_LITERAL ')' ';' .

    $default  reduce usando la regla 84 (procedure_call_statement)


estado 210

   85 procedure_call_statement: PUT '(' variable ')' ';' .

    $default  reduce usando la regla 85 (procedure_call_statement)


estado 211

   86 procedure_call_statement: GET '(' variable ')' ';' .

    $default  reduce usando la regla 86 (procedure_call_statement)


estado 212

  118 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';' .

    $default  reduce usando la regla 118 (subprogram_body)


estado 213

   64 mode: IN OUT .

    $default  reduce usando la regla 64 (mode)


estado 214

    8 assign_expression: . ASSIGNMENT_OP expression
    9                  | .  [';', ')']
   71 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition . assign_expression

    ASSIGNMENT_OP  desplazar e ir al estado 148

    $default  reduce usando la regla 9 (assign_expression)

    assign_expression  ir al estado 228


estado 215

    7 array_type_definition: ARRAY '(' expression expression_list ')' . OF type_definition

    OF  desplazar e ir al estado 229


estado 216

    7 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   20 component_item: IDENTIFIER identifier_list ':' . type_definition assign_expression ';'
   89 record_type_definition: . RECORD component_list END RECORD
  125 type_definition: . INTEGER_TYPE
  126                | . REAL_TYPE
  127                | . CHARACTER_TYPE
  128                | . BOOLEAN_TYPE
  129                | . array_type_definition
  130                | . record_type_definition
  131                | . IDENTIFIER

    ARRAY           desplazar e ir al estado 65
    IDENTIFIER      desplazar e ir al estado 66
    RECORD          desplazar e ir al estado 67
    INTEGER_TYPE    desplazar e ir al estado 68
    REAL_TYPE       desplazar e ir al estado 69
    CHARACTER_TYPE  desplazar e ir al estado 70
    BOOLEAN_TYPE    desplazar e ir al estado 71

    array_type_definition   ir al estado 72
    record_type_definition  ir al estado 73
    type_definition         ir al estado 230


estado 217

   16 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE . ';'

    ';'  desplazar e ir al estado 231


estado 218

   36 discrete_choice: OTHERS .

    $default  reduce usando la regla 36 (discrete_choice)


estado 219

   38 discrete_choice_list: discrete_choice .

    $default  reduce usando la regla 38 (discrete_choice_list)


estado 220

   17 case_statement_alternative: WHEN discrete_choice_list . ARROW sequence_of_statements
   37 discrete_choice_list: discrete_choice_list . '|' discrete_choice

    ARROW  desplazar e ir al estado 232
    '|'    desplazar e ir al estado 233


estado 221

   35 discrete_choice: primary .

    $default  reduce usando la regla 35 (discrete_choice)


estado 222

   39 elsif_list: . elsif_list elsif_statement
   40           | .
   58 if_statement: IF '(' expression ')' THEN sequence_of_statements . elsif_list else_statement END IF ';'

    $default  reduce usando la regla 40 (elsif_list)

    elsif_list  ir al estado 234


estado 223

   92 @4: .
   93 relation_list: logical_operator relation . @4 relation_list

    $default  reduce usando la regla 92 (@4)

    @4  ir al estado 235


estado 224

    3 actual_parameter_list: actual_parameter_list ',' expression .

    $default  reduce usando la regla 3 (actual_parameter_list)


estado 225

   46 expression_list: ',' expression expression_list .

    $default  reduce usando la regla 46 (expression_list)


estado 226

   11 binary_adding_list: . binary_adding_operator term
   13                   | . binary_adding_operator term @2 binary_adding_list
   13                   | binary_adding_operator term @2 . binary_adding_list
   14 binary_adding_operator: . '+'
   15                       | . '-'

    '+'  desplazar e ir al estado 171
    '-'  desplazar e ir al estado 172

    binary_adding_list      ir al estado 236
    binary_adding_operator  ir al estado 174


estado 227

   62 loop_statement: WHILE '(' expression ')' LOOP sequence_of_statements . END LOOP ';'

    END  desplazar e ir al estado 237


estado 228

   71 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition assign_expression .

    $default  reduce usando la regla 71 (parameter_specification)


estado 229

    7 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
    7                      | ARRAY '(' expression expression_list ')' OF . type_definition
   89 record_type_definition: . RECORD component_list END RECORD
  125 type_definition: . INTEGER_TYPE
  126                | . REAL_TYPE
  127                | . CHARACTER_TYPE
  128                | . BOOLEAN_TYPE
  129                | . array_type_definition
  130                | . record_type_definition
  131                | . IDENTIFIER

    ARRAY           desplazar e ir al estado 65
    IDENTIFIER      desplazar e ir al estado 66
    RECORD          desplazar e ir al estado 67
    INTEGER_TYPE    desplazar e ir al estado 68
    REAL_TYPE       desplazar e ir al estado 69
    CHARACTER_TYPE  desplazar e ir al estado 70
    BOOLEAN_TYPE    desplazar e ir al estado 71

    array_type_definition   ir al estado 72
    record_type_definition  ir al estado 73
    type_definition         ir al estado 238


estado 230

    8 assign_expression: . ASSIGNMENT_OP expression
    9                  | .  [';']
   20 component_item: IDENTIFIER identifier_list ':' type_definition . assign_expression ';'

    ASSIGNMENT_OP  desplazar e ir al estado 148

    $default  reduce usando la regla 9 (assign_expression)

    assign_expression  ir al estado 239


estado 231

   16 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE ';' .

    $default  reduce usando la regla 16 (case_statement)


estado 232

   10 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   16 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   17 case_statement_alternative: WHEN discrete_choice_list ARROW . sequence_of_statements
   23 compound_statement: . if_statement
   24                   | . loop_statement
   25                   | . case_statement
   26                   | . assignment_statement
   58 if_statement: . IF '(' expression ')' THEN sequence_of_statements elsif_list else_statement END IF ';'
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   62 loop_statement: . WHILE '(' expression ')' LOOP sequence_of_statements END LOOP ';'
   69 null_statement: . NULL_ ';'
   83 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   84                         | . PUT '(' STRING_LITERAL ')' ';'
   85                         | . PUT '(' variable ')' ';'
   86                         | . GET '(' variable ')' ';'
   87                         | . NEW_LINE ';'
  101 return_statement: . RETURN ';'
  102                 | . RETURN simple_expression ';'
  103 selected_component: . variable '.' IDENTIFIER
  104 sequence_of_statements: . statement
  105                       | . statement sequence_of_statements
  112 simple_statement: . null_statement
  113                 | . return_statement
  114                 | . procedure_call_statement
  115 statement: . simple_statement
  116          | . compound_statement
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    CASE        desplazar e ir al estado 35
    IF          desplazar e ir al estado 36
    IDENTIFIER  desplazar e ir al estado 37
    NULL_       desplazar e ir al estado 38
    RETURN      desplazar e ir al estado 39
    WHILE       desplazar e ir al estado 40
    PUT         desplazar e ir al estado 41
    GET         desplazar e ir al estado 42
    NEW_LINE    desplazar e ir al estado 43

    assignment_statement      ir al estado 44
    case_statement            ir al estado 45
    compound_statement        ir al estado 46
    if_statement              ir al estado 47
    indexed_component         ir al estado 48
    loop_statement            ir al estado 49
    null_statement            ir al estado 50
    procedure_call_statement  ir al estado 51
    return_statement          ir al estado 52
    selected_component        ir al estado 53
    sequence_of_statements    ir al estado 240
    simple_statement          ir al estado 55
    statement                 ir al estado 56
    variable                  ir al estado 57


estado 233

   35 discrete_choice: . primary
   36                | . OTHERS
   37 discrete_choice_list: discrete_choice_list '|' . discrete_choice
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
  103 selected_component: . variable '.' IDENTIFIER
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NULL_              desplazar e ir al estado 83
    OTHERS             desplazar e ir al estado 218
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    discrete_choice     ir al estado 241
    function_call       ir al estado 94
    indexed_component   ir al estado 48
    primary             ir al estado 221
    selected_component  ir al estado 53
    variable            ir al estado 99


estado 234

   39 elsif_list: elsif_list . elsif_statement
   41 else_statement: . ELSE sequence_of_statements
   42               | .  [END]
   43 elsif_statement: . ELSIF '(' expression ')' THEN sequence_of_statements
   58 if_statement: IF '(' expression ')' THEN sequence_of_statements elsif_list . else_statement END IF ';'

    ELSE   desplazar e ir al estado 242
    ELSIF  desplazar e ir al estado 243

    $default  reduce usando la regla 42 (else_statement)

    else_statement   ir al estado 244
    elsif_statement  ir al estado 245


estado 235

   60 logical_operator: . AND
   61                 | . OR
   93 relation_list: . logical_operator relation @4 relation_list
   93              | logical_operator relation @4 . relation_list
   94              | .  [';', ',', ')', ']']

    AND  desplazar e ir al estado 197
    OR   desplazar e ir al estado 198

    $default  reduce usando la regla 94 (relation_list)

    logical_operator  ir al estado 199
    relation_list     ir al estado 246


estado 236

   13 binary_adding_list: binary_adding_operator term @2 binary_adding_list .

    $default  reduce usando la regla 13 (binary_adding_list)


estado 237

   62 loop_statement: WHILE '(' expression ')' LOOP sequence_of_statements END . LOOP ';'

    LOOP  desplazar e ir al estado 247


estado 238

    7 array_type_definition: ARRAY '(' expression expression_list ')' OF type_definition .

    $default  reduce usando la regla 7 (array_type_definition)


estado 239

   20 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression . ';'

    ';'  desplazar e ir al estado 248


estado 240

   17 case_statement_alternative: WHEN discrete_choice_list ARROW sequence_of_statements .

    $default  reduce usando la regla 17 (case_statement_alternative)


estado 241

   37 discrete_choice_list: discrete_choice_list '|' discrete_choice .

    $default  reduce usando la regla 37 (discrete_choice_list)


estado 242

   10 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   16 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   23 compound_statement: . if_statement
   24                   | . loop_statement
   25                   | . case_statement
   26                   | . assignment_statement
   41 else_statement: ELSE . sequence_of_statements
   58 if_statement: . IF '(' expression ')' THEN sequence_of_statements elsif_list else_statement END IF ';'
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   62 loop_statement: . WHILE '(' expression ')' LOOP sequence_of_statements END LOOP ';'
   69 null_statement: . NULL_ ';'
   83 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   84                         | . PUT '(' STRING_LITERAL ')' ';'
   85                         | . PUT '(' variable ')' ';'
   86                         | . GET '(' variable ')' ';'
   87                         | . NEW_LINE ';'
  101 return_statement: . RETURN ';'
  102                 | . RETURN simple_expression ';'
  103 selected_component: . variable '.' IDENTIFIER
  104 sequence_of_statements: . statement
  105                       | . statement sequence_of_statements
  112 simple_statement: . null_statement
  113                 | . return_statement
  114                 | . procedure_call_statement
  115 statement: . simple_statement
  116          | . compound_statement
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    CASE        desplazar e ir al estado 35
    IF          desplazar e ir al estado 36
    IDENTIFIER  desplazar e ir al estado 37
    NULL_       desplazar e ir al estado 38
    RETURN      desplazar e ir al estado 39
    WHILE       desplazar e ir al estado 40
    PUT         desplazar e ir al estado 41
    GET         desplazar e ir al estado 42
    NEW_LINE    desplazar e ir al estado 43

    assignment_statement      ir al estado 44
    case_statement            ir al estado 45
    compound_statement        ir al estado 46
    if_statement              ir al estado 47
    indexed_component         ir al estado 48
    loop_statement            ir al estado 49
    null_statement            ir al estado 50
    procedure_call_statement  ir al estado 51
    return_statement          ir al estado 52
    selected_component        ir al estado 53
    sequence_of_statements    ir al estado 249
    simple_statement          ir al estado 55
    statement                 ir al estado 56
    variable                  ir al estado 57


estado 243

   43 elsif_statement: ELSIF . '(' expression ')' THEN sequence_of_statements

    '('  desplazar e ir al estado 250


estado 244

   58 if_statement: IF '(' expression ')' THEN sequence_of_statements elsif_list else_statement . END IF ';'

    END  desplazar e ir al estado 251


estado 245

   39 elsif_list: elsif_list elsif_statement .

    $default  reduce usando la regla 39 (elsif_list)


estado 246

   93 relation_list: logical_operator relation @4 relation_list .

    $default  reduce usando la regla 93 (relation_list)


estado 247

   62 loop_statement: WHILE '(' expression ')' LOOP sequence_of_statements END LOOP . ';'

    ';'  desplazar e ir al estado 252


estado 248

   20 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression ';' .

    $default  reduce usando la regla 20 (component_item)


estado 249

   41 else_statement: ELSE sequence_of_statements .

    $default  reduce usando la regla 41 (else_statement)


estado 250

   43 elsif_statement: ELSIF '(' . expression ')' THEN sequence_of_statements
   45 expression: . relation @3 relation_list
   48 factor: . primary
   49       | . primary POWER_OP primary
   50       | . NOT primary
   53 function_call: . IDENTIFIER actual_parameter_part
   54              | . IDENTIFIER LENGTH
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   74 primary: . INTEGER_LITERAL
   75        | . FLOAT_LITERAL
   76        | . CHARACTER_LITERAL
   77        | . BOOLEAN_LITERAL
   78        | . NULL_
   79        | . STRING_LITERAL
   80        | . variable
   81        | . function_call
   82        | . '(' expression ')'
   90 relation: . simple_expression
   91         | . simple_expression relational_operator simple_expression
  103 selected_component: . variable '.' IDENTIFIER
  107 simple_expression: . unary_adding_operator term @5 binary_adding_list
  108                  | . unary_adding_operator term
  110                  | . term @6 binary_adding_list
  111                  | . term
  122 term: . factor
  123     | . term multiplying_operator factor
  132 unary_adding_operator: . '+'
  133                      | . '-'
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    IDENTIFIER         desplazar e ir al estado 81
    NOT                desplazar e ir al estado 82
    NULL_              desplazar e ir al estado 83
    '+'                desplazar e ir al estado 84
    '-'                desplazar e ir al estado 85
    INTEGER_LITERAL    desplazar e ir al estado 86
    FLOAT_LITERAL      desplazar e ir al estado 87
    CHARACTER_LITERAL  desplazar e ir al estado 88
    STRING_LITERAL     desplazar e ir al estado 89
    BOOLEAN_LITERAL    desplazar e ir al estado 90
    '('                desplazar e ir al estado 92

    expression             ir al estado 253
    factor                 ir al estado 93
    function_call          ir al estado 94
    indexed_component      ir al estado 48
    primary                ir al estado 95
    relation               ir al estado 119
    selected_component     ir al estado 53
    simple_expression      ir al estado 120
    term                   ir al estado 97
    unary_adding_operator  ir al estado 98
    variable               ir al estado 99


estado 251

   58 if_statement: IF '(' expression ')' THEN sequence_of_statements elsif_list else_statement END . IF ';'

    IF  desplazar e ir al estado 254


estado 252

   62 loop_statement: WHILE '(' expression ')' LOOP sequence_of_statements END LOOP ';' .

    $default  reduce usando la regla 62 (loop_statement)


estado 253

   43 elsif_statement: ELSIF '(' expression . ')' THEN sequence_of_statements

    ')'  desplazar e ir al estado 255


estado 254

   58 if_statement: IF '(' expression ')' THEN sequence_of_statements elsif_list else_statement END IF . ';'

    ';'  desplazar e ir al estado 256


estado 255

   43 elsif_statement: ELSIF '(' expression ')' . THEN sequence_of_statements

    THEN  desplazar e ir al estado 257


estado 256

   58 if_statement: IF '(' expression ')' THEN sequence_of_statements elsif_list else_statement END IF ';' .

    $default  reduce usando la regla 58 (if_statement)


estado 257

   10 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   16 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   23 compound_statement: . if_statement
   24                   | . loop_statement
   25                   | . case_statement
   26                   | . assignment_statement
   43 elsif_statement: ELSIF '(' expression ')' THEN . sequence_of_statements
   58 if_statement: . IF '(' expression ')' THEN sequence_of_statements elsif_list else_statement END IF ';'
   59 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   62 loop_statement: . WHILE '(' expression ')' LOOP sequence_of_statements END LOOP ';'
   69 null_statement: . NULL_ ';'
   83 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   84                         | . PUT '(' STRING_LITERAL ')' ';'
   85                         | . PUT '(' variable ')' ';'
   86                         | . GET '(' variable ')' ';'
   87                         | . NEW_LINE ';'
  101 return_statement: . RETURN ';'
  102                 | . RETURN simple_expression ';'
  103 selected_component: . variable '.' IDENTIFIER
  104 sequence_of_statements: . statement
  105                       | . statement sequence_of_statements
  112 simple_statement: . null_statement
  113                 | . return_statement
  114                 | . procedure_call_statement
  115 statement: . simple_statement
  116          | . compound_statement
  134 variable: . IDENTIFIER
  135         | . indexed_component
  136         | . selected_component

    CASE        desplazar e ir al estado 35
    IF          desplazar e ir al estado 36
    IDENTIFIER  desplazar e ir al estado 37
    NULL_       desplazar e ir al estado 38
    RETURN      desplazar e ir al estado 39
    WHILE       desplazar e ir al estado 40
    PUT         desplazar e ir al estado 41
    GET         desplazar e ir al estado 42
    NEW_LINE    desplazar e ir al estado 43

    assignment_statement      ir al estado 44
    case_statement            ir al estado 45
    compound_statement        ir al estado 46
    if_statement              ir al estado 47
    indexed_component         ir al estado 48
    loop_statement            ir al estado 49
    null_statement            ir al estado 50
    procedure_call_statement  ir al estado 51
    return_statement          ir al estado 52
    selected_component        ir al estado 53
    sequence_of_statements    ir al estado 258
    simple_statement          ir al estado 55
    statement                 ir al estado 56
    variable                  ir al estado 57


estado 258

   43 elsif_statement: ELSIF '(' expression ')' THEN sequence_of_statements .

    $default  reduce usando la regla 43 (elsif_statement)
