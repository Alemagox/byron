Terminals unused in grammar

   CONCAT


Grammar

    0 $accept: main $end

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    2 actual_parameter_list: expression expression_list

    3 actual_parameter_part: '(' ')'
    4                      | '(' actual_parameter_list ')'

    5 array_type_definition: ARRAY '(' expression expression_list ')' OF type_definition

    6 assign_expression: ASSIGNMENT_OP expression
    7                  | %empty

    8 assignment_statement: variable ASSIGNMENT_OP expression ';'

    9 binary_adding_list: binary_adding_operator term
   10                   | binary_adding_operator term binary_adding_list

   11 binary_adding_operator: '+'
   12                       | '-'

   13 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'

   14 case_statement_alternative: WHEN discrete_choice_list ARROW sequence_of_statements

   15 case_statement_alternative_list: case_statement_alternative_list case_statement_alternative
   16                                | %empty

   17 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression ';'

   18 component_list: component_list component_item
   19               | %empty

   20 compound_statement: if_statement
   21                   | loop_statement
   22                   | case_statement
   23                   | assignment_statement

   24 constant: CONSTANT
   25         | %empty

   26 declarative_item: type_declaration
   27                 | object_declaration
   28                 | subprogram_specification ';'
   29                 | subprogram_body

   30 declarative_part: declarative_item declarative_part
   31                 | %empty

   32 discrete_choice: expression
   33                | INTEGER_TYPE
   34                | OTHERS

   35 discrete_choice_list: discrete_choice_list '|' discrete_choice
   36                     | discrete_choice
   37                     | %empty

   38 elsif_list: elsif_list elsif_statement
   39           | %empty

   40 else_statement: ELSE sequence_of_statements
   41               | %empty

   42 elsif_statement: ELSIF expression THEN sequence_of_statements

   43 expression: relation relation_list

   44 expression_list: ',' expression expression_list
   45                | %empty

   46 factor: primary
   47       | primary POWER_OP primary
   48       | NOT primary

   49 formal_part: '(' parameter_specification parameter_specification_list ')'
   50            | %empty

   51 function_call: IDENTIFIER actual_parameter_part
   52              | IDENTIFIER LENGTH

   53 function_specification: FUNCTION IDENTIFIER formal_part RETURN type_definition

   54 identifier_list: identifier_list ',' IDENTIFIER
   55                | IDENTIFIER
   56                | %empty

   57 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'

   58 indexed_component: IDENTIFIER '[' expression expression_list ']'

   59 logical_operator: AND
   60                 | OR

   61 loop_statement: WHILE expression LOOP sequence_of_statements END LOOP ';'

   62 mode: OUT
   63     | IN OUT
   64     | IN
   65     | %empty

   66 multiplying_operator: '*'
   67                     | '/'

   68 null_statement: NULL_ ';'

   69 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'

   70 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition assign_expression

   71 parameter_specification_list: ';' parameter_specification parameter_specification_list
   72                             | %empty

   73 primary: INTEGER_LITERAL
   74        | FLOAT_LITERAL
   75        | CHARACTER_LITERAL
   76        | BOOLEAN_LITERAL
   77        | NULL_
   78        | STRING_LITERAL
   79        | variable
   80        | function_call
   81        | '(' expression ')'

   82 procedure_call_statement: IDENTIFIER actual_parameter_part ';'
   83                         | PUT '(' STRING_LITERAL ')' ';'
   84                         | PUT '(' variable ')' ';'
   85                         | GET '(' variable ')' ';'
   86                         | NEW_LINE ';'

   87 procedure_specification: PROCEDURE IDENTIFIER formal_part

   88 record_type_definition: RECORD component_list END RECORD

   89 relation: simple_expression
   90         | simple_expression relational_operator simple_expression

   91 relation_list: logical_operator relation relation_list
   92              | %empty

   93 relational_operator: '='
   94                    | '<'
   95                    | '>'
   96                    | NOT_EQUAL_OP
   97                    | LESSER_EQUAL_OP
   98                    | GREATER_EQUAL_OP

   99 return_statement: RETURN ';'
  100                 | RETURN simple_expression ';'

  101 selected_component: variable '.' IDENTIFIER

  102 sequence_of_statements: statement
  103                       | statement sequence_of_statements

  104 simple_expression: unary_adding_operator term binary_adding_list
  105                  | unary_adding_operator term
  106                  | term binary_adding_list
  107                  | term

  108 simple_statement: null_statement
  109                 | return_statement
  110                 | procedure_call_statement

  111 statement: simple_statement
  112          | compound_statement

  113 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  114                | subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END ';'

  115 subprogram_specification: procedure_specification
  116                         | function_specification

  117 term: factor
  118     | term multiplying_operator factor

  119 type_declaration: TYPE IDENTIFIER IS type_definition ';'

  120 type_definition: INTEGER_TYPE
  121                | REAL_TYPE
  122                | CHARACTER_TYPE
  123                | BOOLEAN_TYPE
  124                | array_type_definition
  125                | record_type_definition
  126                | IDENTIFIER

  127 unary_adding_operator: '+'
  128                      | '-'

  129 variable: IDENTIFIER
  130         | indexed_component
  131         | selected_component


Terminals, with rules where they appear

$end (0) 0
'(' (40) 3 4 5 49 81 83 84 85
')' (41) 3 4 5 49 81 83 84 85
'*' (42) 66
'+' (43) 11 127
',' (44) 44 54
'-' (45) 12 128
'.' (46) 101
'/' (47) 67
':' (58) 17 69 70
';' (59) 1 8 13 17 28 57 61 68 69 71 82 83 84 85 86 99 100 113 114
    119
'<' (60) 94
'=' (61) 93
'>' (62) 95
'[' (91) 58
']' (93) 58
'|' (124) 35
error (256)
AND (258) 59
ARRAY (259) 5
BEGIN_ (260) 1 113 114
CASE (261) 13
CONSTANT (262) 24
ELSE (263) 40
ELSIF (264) 42
END (265) 1 13 57 61 88 113 114
FUNCTION (266) 53
IF (267) 57
IDENTIFIER (268) 1 13 17 51 52 53 54 55 58 69 70 82 87 101 113 119
    126 129
IN (269) 63 64
IS (270) 1 13 113 114 119
LOOP (271) 61
NOT (272) 48
NULL_ (273) 68 77
OF (274) 5
OR (275) 60
OTHERS (276) 34
OUT (277) 62 63
PROCEDURE (278) 1 87
RECORD (279) 88
RETURN (280) 53 99 100
THEN (281) 42 57
TYPE (282) 119
WHEN (283) 14
WHILE (284) 61
ARROW (285) 14
ASSIGNMENT_OP (286) 6 8
NOT_EQUAL_OP (287) 96
GREATER_EQUAL_OP (288) 98
LESSER_EQUAL_OP (289) 97
POWER_OP (290) 47
PUT (291) 83 84
GET (292) 85
LENGTH (293) 52
NEW_LINE (294) 86
CONCAT (295)
INTEGER_TYPE (296) 33 120
REAL_TYPE (297) 121
CHARACTER_TYPE (298) 122
BOOLEAN_TYPE (299) 123
INTEGER_LITERAL (300) 73
FLOAT_LITERAL (301) 74
CHARACTER_LITERAL (302) 75
STRING_LITERAL (303) 78 83
BOOLEAN_LITERAL (304) 76


Nonterminals, with rules where they appear

$accept (66)
    on left: 0
main (67)
    on left: 1, on right: 0
actual_parameter_list (68)
    on left: 2, on right: 4
actual_parameter_part (69)
    on left: 3 4, on right: 51 82
array_type_definition (70)
    on left: 5, on right: 124
assign_expression (71)
    on left: 6 7, on right: 17 69 70
assignment_statement (72)
    on left: 8, on right: 23
binary_adding_list (73)
    on left: 9 10, on right: 10 104 106
binary_adding_operator (74)
    on left: 11 12, on right: 9 10
case_statement (75)
    on left: 13, on right: 22
case_statement_alternative (76)
    on left: 14, on right: 15
case_statement_alternative_list (77)
    on left: 15 16, on right: 13 15
component_item (78)
    on left: 17, on right: 18
component_list (79)
    on left: 18 19, on right: 18 88
compound_statement (80)
    on left: 20 21 22 23, on right: 112
constant (81)
    on left: 24 25, on right: 69
declarative_item (82)
    on left: 26 27 28 29, on right: 30
declarative_part (83)
    on left: 30 31, on right: 1 30 113 114
discrete_choice (84)
    on left: 32 33 34, on right: 35 36
discrete_choice_list (85)
    on left: 35 36 37, on right: 14 35
elsif_list (86)
    on left: 38 39, on right: 38 57
else_statement (87)
    on left: 40 41, on right: 57
elsif_statement (88)
    on left: 42, on right: 38
expression (89)
    on left: 43, on right: 2 5 6 8 32 42 44 57 58 61 81
expression_list (90)
    on left: 44 45, on right: 2 5 44 58
factor (91)
    on left: 46 47 48, on right: 117 118
formal_part (92)
    on left: 49 50, on right: 53 87
function_call (93)
    on left: 51 52, on right: 80
function_specification (94)
    on left: 53, on right: 116
identifier_list (95)
    on left: 54 55 56, on right: 17 54 69 70
if_statement (96)
    on left: 57, on right: 20
indexed_component (97)
    on left: 58, on right: 130
logical_operator (98)
    on left: 59 60, on right: 91
loop_statement (99)
    on left: 61, on right: 21
mode (100)
    on left: 62 63 64 65, on right: 70
multiplying_operator (101)
    on left: 66 67, on right: 118
null_statement (102)
    on left: 68, on right: 108
object_declaration (103)
    on left: 69, on right: 27
parameter_specification (104)
    on left: 70, on right: 49 71
parameter_specification_list (105)
    on left: 71 72, on right: 49 71
primary (106)
    on left: 73 74 75 76 77 78 79 80 81, on right: 46 47 48
procedure_call_statement (107)
    on left: 82 83 84 85 86, on right: 110
procedure_specification (108)
    on left: 87, on right: 115
record_type_definition (109)
    on left: 88, on right: 125
relation (110)
    on left: 89 90, on right: 43 91
relation_list (111)
    on left: 91 92, on right: 43 91
relational_operator (112)
    on left: 93 94 95 96 97 98, on right: 90
return_statement (113)
    on left: 99 100, on right: 109
selected_component (114)
    on left: 101, on right: 131
sequence_of_statements (115)
    on left: 102 103, on right: 1 14 40 42 57 61 103 113 114
simple_expression (116)
    on left: 104 105 106 107, on right: 89 90 100
simple_statement (117)
    on left: 108 109 110, on right: 111
statement (118)
    on left: 111 112, on right: 102 103
subprogram_body (119)
    on left: 113 114, on right: 29
subprogram_specification (120)
    on left: 115 116, on right: 28 113 114
term (121)
    on left: 117 118, on right: 9 10 104 105 106 107 118
type_declaration (122)
    on left: 119, on right: 26
type_definition (123)
    on left: 120 121 122 123 124 125 126, on right: 5 17 53 69 70 119
unary_adding_operator (124)
    on left: 127 128, on right: 104 105
variable (125)
    on left: 129 130 131, on right: 8 79 84 85 101


State 0

    0 $accept: . main $end
    1 main: . PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    PROCEDURE  shift, and go to state 1

    main  go to state 2


State 1

    1 main: PROCEDURE . IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 3


State 2

    0 $accept: main . $end

    $end  shift, and go to state 4


State 3

    1 main: PROCEDURE IDENTIFIER . IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'

    IS  shift, and go to state 5


State 4

    0 $accept: main $end .

    $default  accept


State 5

    1 main: PROCEDURE IDENTIFIER IS . declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
   26 declarative_item: . type_declaration
   27                 | . object_declaration
   28                 | . subprogram_specification ';'
   29                 | . subprogram_body
   30 declarative_part: . declarative_item declarative_part
   31                 | .  [BEGIN_]
   53 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   69 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   87 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  113 subprogram_body: . subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  114                | . subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END ';'
  115 subprogram_specification: . procedure_specification
  116                         | . function_specification
  119 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    PROCEDURE   shift, and go to state 8
    TYPE        shift, and go to state 9

    $default  reduce using rule 31 (declarative_part)

    declarative_item          go to state 10
    declarative_part          go to state 11
    function_specification    go to state 12
    object_declaration        go to state 13
    procedure_specification   go to state 14
    subprogram_body           go to state 15
    subprogram_specification  go to state 16
    type_declaration          go to state 17


State 6

   53 function_specification: FUNCTION . IDENTIFIER formal_part RETURN type_definition

    IDENTIFIER  shift, and go to state 18


State 7

   54 identifier_list: . identifier_list ',' IDENTIFIER
   55                | . IDENTIFIER
   56                | .  [':', ',']
   69 object_declaration: IDENTIFIER . identifier_list ':' constant type_definition assign_expression ';'

    IDENTIFIER  shift, and go to state 19

    $default  reduce using rule 56 (identifier_list)

    identifier_list  go to state 20


State 8

   87 procedure_specification: PROCEDURE . IDENTIFIER formal_part

    IDENTIFIER  shift, and go to state 21


State 9

  119 type_declaration: TYPE . IDENTIFIER IS type_definition ';'

    IDENTIFIER  shift, and go to state 22


State 10

   26 declarative_item: . type_declaration
   27                 | . object_declaration
   28                 | . subprogram_specification ';'
   29                 | . subprogram_body
   30 declarative_part: . declarative_item declarative_part
   30                 | declarative_item . declarative_part
   31                 | .  [BEGIN_]
   53 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   69 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   87 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  113 subprogram_body: . subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  114                | . subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END ';'
  115 subprogram_specification: . procedure_specification
  116                         | . function_specification
  119 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    PROCEDURE   shift, and go to state 8
    TYPE        shift, and go to state 9

    $default  reduce using rule 31 (declarative_part)

    declarative_item          go to state 10
    declarative_part          go to state 23
    function_specification    go to state 12
    object_declaration        go to state 13
    procedure_specification   go to state 14
    subprogram_body           go to state 15
    subprogram_specification  go to state 16
    type_declaration          go to state 17


State 11

    1 main: PROCEDURE IDENTIFIER IS declarative_part . BEGIN_ sequence_of_statements END IDENTIFIER ';'

    BEGIN_  shift, and go to state 24


State 12

  116 subprogram_specification: function_specification .

    $default  reduce using rule 116 (subprogram_specification)


State 13

   27 declarative_item: object_declaration .

    $default  reduce using rule 27 (declarative_item)


State 14

  115 subprogram_specification: procedure_specification .

    $default  reduce using rule 115 (subprogram_specification)


State 15

   29 declarative_item: subprogram_body .

    $default  reduce using rule 29 (declarative_item)


State 16

   28 declarative_item: subprogram_specification . ';'
  113 subprogram_body: subprogram_specification . IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  114                | subprogram_specification . IS declarative_part BEGIN_ sequence_of_statements END ';'

    IS   shift, and go to state 25
    ';'  shift, and go to state 26


State 17

   26 declarative_item: type_declaration .

    $default  reduce using rule 26 (declarative_item)


State 18

   49 formal_part: . '(' parameter_specification parameter_specification_list ')'
   50            | .  [RETURN]
   53 function_specification: FUNCTION IDENTIFIER . formal_part RETURN type_definition

    '('  shift, and go to state 27

    $default  reduce using rule 50 (formal_part)

    formal_part  go to state 28


State 19

   55 identifier_list: IDENTIFIER .

    $default  reduce using rule 55 (identifier_list)


State 20

   54 identifier_list: identifier_list . ',' IDENTIFIER
   69 object_declaration: IDENTIFIER identifier_list . ':' constant type_definition assign_expression ';'

    ':'  shift, and go to state 29
    ','  shift, and go to state 30


State 21

   49 formal_part: . '(' parameter_specification parameter_specification_list ')'
   50            | .  [IS, ';']
   87 procedure_specification: PROCEDURE IDENTIFIER . formal_part

    '('  shift, and go to state 27

    $default  reduce using rule 50 (formal_part)

    formal_part  go to state 31


State 22

  119 type_declaration: TYPE IDENTIFIER . IS type_definition ';'

    IS  shift, and go to state 32


State 23

   30 declarative_part: declarative_item declarative_part .

    $default  reduce using rule 30 (declarative_part)


State 24

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ . sequence_of_statements END IDENTIFIER ';'
    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   57 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   61 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   68 null_statement: . NULL_ ';'
   82 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   83                         | . PUT '(' STRING_LITERAL ')' ';'
   84                         | . PUT '(' variable ')' ';'
   85                         | . GET '(' variable ')' ';'
   86                         | . NEW_LINE ';'
   99 return_statement: . RETURN ';'
  100                 | . RETURN simple_expression ';'
  101 selected_component: . variable '.' IDENTIFIER
  102 sequence_of_statements: . statement
  103                       | . statement sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38
    PUT         shift, and go to state 39
    GET         shift, and go to state 40
    NEW_LINE    shift, and go to state 41

    assignment_statement      go to state 42
    case_statement            go to state 43
    compound_statement        go to state 44
    if_statement              go to state 45
    indexed_component         go to state 46
    loop_statement            go to state 47
    null_statement            go to state 48
    procedure_call_statement  go to state 49
    return_statement          go to state 50
    selected_component        go to state 51
    sequence_of_statements    go to state 52
    simple_statement          go to state 53
    statement                 go to state 54
    variable                  go to state 55


State 25

   26 declarative_item: . type_declaration
   27                 | . object_declaration
   28                 | . subprogram_specification ';'
   29                 | . subprogram_body
   30 declarative_part: . declarative_item declarative_part
   31                 | .  [BEGIN_]
   53 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   69 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   87 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  113 subprogram_body: . subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  113                | subprogram_specification IS . declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  114                | . subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END ';'
  114                | subprogram_specification IS . declarative_part BEGIN_ sequence_of_statements END ';'
  115 subprogram_specification: . procedure_specification
  116                         | . function_specification
  119 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    PROCEDURE   shift, and go to state 8
    TYPE        shift, and go to state 9

    $default  reduce using rule 31 (declarative_part)

    declarative_item          go to state 10
    declarative_part          go to state 56
    function_specification    go to state 12
    object_declaration        go to state 13
    procedure_specification   go to state 14
    subprogram_body           go to state 15
    subprogram_specification  go to state 16
    type_declaration          go to state 17


State 26

   28 declarative_item: subprogram_specification ';' .

    $default  reduce using rule 28 (declarative_item)


State 27

   49 formal_part: '(' . parameter_specification parameter_specification_list ')'
   70 parameter_specification: . IDENTIFIER identifier_list ':' mode type_definition assign_expression

    IDENTIFIER  shift, and go to state 57

    parameter_specification  go to state 58


State 28

   53 function_specification: FUNCTION IDENTIFIER formal_part . RETURN type_definition

    RETURN  shift, and go to state 59


State 29

   24 constant: . CONSTANT
   25         | .  [ARRAY, IDENTIFIER, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]
   69 object_declaration: IDENTIFIER identifier_list ':' . constant type_definition assign_expression ';'

    CONSTANT  shift, and go to state 60

    $default  reduce using rule 25 (constant)

    constant  go to state 61


State 30

   54 identifier_list: identifier_list ',' . IDENTIFIER

    IDENTIFIER  shift, and go to state 62


State 31

   87 procedure_specification: PROCEDURE IDENTIFIER formal_part .

    $default  reduce using rule 87 (procedure_specification)


State 32

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   88 record_type_definition: . RECORD component_list END RECORD
  119 type_declaration: TYPE IDENTIFIER IS . type_definition ';'
  120 type_definition: . INTEGER_TYPE
  121                | . REAL_TYPE
  122                | . CHARACTER_TYPE
  123                | . BOOLEAN_TYPE
  124                | . array_type_definition
  125                | . record_type_definition
  126                | . IDENTIFIER

    ARRAY           shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    RECORD          shift, and go to state 65
    INTEGER_TYPE    shift, and go to state 66
    REAL_TYPE       shift, and go to state 67
    CHARACTER_TYPE  shift, and go to state 68
    BOOLEAN_TYPE    shift, and go to state 69

    array_type_definition   go to state 70
    record_type_definition  go to state 71
    type_definition         go to state 72


State 33

   13 case_statement: CASE . IDENTIFIER IS case_statement_alternative_list END CASE ';'

    IDENTIFIER  shift, and go to state 73


State 34

   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   57 if_statement: IF . expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
   89 relation: . simple_expression
   90         | . simple_expression relational_operator simple_expression
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: . unary_adding_operator term binary_adding_list
  105                  | . unary_adding_operator term
  106                  | . term binary_adding_list
  107                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    '+'                shift, and go to state 77
    '-'                shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    expression             go to state 85
    factor                 go to state 86
    function_call          go to state 87
    indexed_component      go to state 46
    primary                go to state 88
    relation               go to state 89
    selected_component     go to state 51
    simple_expression      go to state 90
    term                   go to state 91
    unary_adding_operator  go to state 92
    variable               go to state 93


State 35

    3 actual_parameter_part: . '(' ')'
    4                      | . '(' actual_parameter_list ')'
   58 indexed_component: IDENTIFIER . '[' expression expression_list ']'
   82 procedure_call_statement: IDENTIFIER . actual_parameter_part ';'
  129 variable: IDENTIFIER .  [ASSIGNMENT_OP, '.']

    '('  shift, and go to state 94
    '['  shift, and go to state 95

    $default  reduce using rule 129 (variable)

    actual_parameter_part  go to state 96


State 36

   68 null_statement: NULL_ . ';'

    ';'  shift, and go to state 97


State 37

   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
   99 return_statement: RETURN . ';'
  100                 | RETURN . simple_expression ';'
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: . unary_adding_operator term binary_adding_list
  105                  | . unary_adding_operator term
  106                  | . term binary_adding_list
  107                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    '+'                shift, and go to state 77
    '-'                shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    ';'                shift, and go to state 98
    '('                shift, and go to state 84

    factor                 go to state 86
    function_call          go to state 87
    indexed_component      go to state 46
    primary                go to state 88
    selected_component     go to state 51
    simple_expression      go to state 99
    term                   go to state 91
    unary_adding_operator  go to state 92
    variable               go to state 93


State 38

   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   61 loop_statement: WHILE . expression LOOP sequence_of_statements END LOOP ';'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
   89 relation: . simple_expression
   90         | . simple_expression relational_operator simple_expression
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: . unary_adding_operator term binary_adding_list
  105                  | . unary_adding_operator term
  106                  | . term binary_adding_list
  107                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    '+'                shift, and go to state 77
    '-'                shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    expression             go to state 100
    factor                 go to state 86
    function_call          go to state 87
    indexed_component      go to state 46
    primary                go to state 88
    relation               go to state 89
    selected_component     go to state 51
    simple_expression      go to state 90
    term                   go to state 91
    unary_adding_operator  go to state 92
    variable               go to state 93


State 39

   83 procedure_call_statement: PUT . '(' STRING_LITERAL ')' ';'
   84                         | PUT . '(' variable ')' ';'

    '('  shift, and go to state 101


State 40

   85 procedure_call_statement: GET . '(' variable ')' ';'

    '('  shift, and go to state 102


State 41

   86 procedure_call_statement: NEW_LINE . ';'

    ';'  shift, and go to state 103


State 42

   23 compound_statement: assignment_statement .

    $default  reduce using rule 23 (compound_statement)


State 43

   22 compound_statement: case_statement .

    $default  reduce using rule 22 (compound_statement)


State 44

  112 statement: compound_statement .

    $default  reduce using rule 112 (statement)


State 45

   20 compound_statement: if_statement .

    $default  reduce using rule 20 (compound_statement)


State 46

  130 variable: indexed_component .

    $default  reduce using rule 130 (variable)


State 47

   21 compound_statement: loop_statement .

    $default  reduce using rule 21 (compound_statement)


State 48

  108 simple_statement: null_statement .

    $default  reduce using rule 108 (simple_statement)


State 49

  110 simple_statement: procedure_call_statement .

    $default  reduce using rule 110 (simple_statement)


State 50

  109 simple_statement: return_statement .

    $default  reduce using rule 109 (simple_statement)


State 51

  131 variable: selected_component .

    $default  reduce using rule 131 (variable)


State 52

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements . END IDENTIFIER ';'

    END  shift, and go to state 104


State 53

  111 statement: simple_statement .

    $default  reduce using rule 111 (statement)


State 54

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   57 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   61 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   68 null_statement: . NULL_ ';'
   82 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   83                         | . PUT '(' STRING_LITERAL ')' ';'
   84                         | . PUT '(' variable ')' ';'
   85                         | . GET '(' variable ')' ';'
   86                         | . NEW_LINE ';'
   99 return_statement: . RETURN ';'
  100                 | . RETURN simple_expression ';'
  101 selected_component: . variable '.' IDENTIFIER
  102 sequence_of_statements: . statement
  102                       | statement .  [ELSE, ELSIF, END, WHEN]
  103                       | . statement sequence_of_statements
  103                       | statement . sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38
    PUT         shift, and go to state 39
    GET         shift, and go to state 40
    NEW_LINE    shift, and go to state 41

    $default  reduce using rule 102 (sequence_of_statements)

    assignment_statement      go to state 42
    case_statement            go to state 43
    compound_statement        go to state 44
    if_statement              go to state 45
    indexed_component         go to state 46
    loop_statement            go to state 47
    null_statement            go to state 48
    procedure_call_statement  go to state 49
    return_statement          go to state 50
    selected_component        go to state 51
    sequence_of_statements    go to state 105
    simple_statement          go to state 53
    statement                 go to state 54
    variable                  go to state 55


State 55

    8 assignment_statement: variable . ASSIGNMENT_OP expression ';'
  101 selected_component: variable . '.' IDENTIFIER

    ASSIGNMENT_OP  shift, and go to state 106
    '.'            shift, and go to state 107


State 56

  113 subprogram_body: subprogram_specification IS declarative_part . BEGIN_ sequence_of_statements END IDENTIFIER ';'
  114                | subprogram_specification IS declarative_part . BEGIN_ sequence_of_statements END ';'

    BEGIN_  shift, and go to state 108


State 57

   54 identifier_list: . identifier_list ',' IDENTIFIER
   55                | . IDENTIFIER
   56                | .  [':', ',']
   70 parameter_specification: IDENTIFIER . identifier_list ':' mode type_definition assign_expression

    IDENTIFIER  shift, and go to state 19

    $default  reduce using rule 56 (identifier_list)

    identifier_list  go to state 109


State 58

   49 formal_part: '(' parameter_specification . parameter_specification_list ')'
   71 parameter_specification_list: . ';' parameter_specification parameter_specification_list
   72                             | .  [')']

    ';'  shift, and go to state 110

    $default  reduce using rule 72 (parameter_specification_list)

    parameter_specification_list  go to state 111


State 59

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   53 function_specification: FUNCTION IDENTIFIER formal_part RETURN . type_definition
   88 record_type_definition: . RECORD component_list END RECORD
  120 type_definition: . INTEGER_TYPE
  121                | . REAL_TYPE
  122                | . CHARACTER_TYPE
  123                | . BOOLEAN_TYPE
  124                | . array_type_definition
  125                | . record_type_definition
  126                | . IDENTIFIER

    ARRAY           shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    RECORD          shift, and go to state 65
    INTEGER_TYPE    shift, and go to state 66
    REAL_TYPE       shift, and go to state 67
    CHARACTER_TYPE  shift, and go to state 68
    BOOLEAN_TYPE    shift, and go to state 69

    array_type_definition   go to state 70
    record_type_definition  go to state 71
    type_definition         go to state 112


State 60

   24 constant: CONSTANT .

    $default  reduce using rule 24 (constant)


State 61

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   69 object_declaration: IDENTIFIER identifier_list ':' constant . type_definition assign_expression ';'
   88 record_type_definition: . RECORD component_list END RECORD
  120 type_definition: . INTEGER_TYPE
  121                | . REAL_TYPE
  122                | . CHARACTER_TYPE
  123                | . BOOLEAN_TYPE
  124                | . array_type_definition
  125                | . record_type_definition
  126                | . IDENTIFIER

    ARRAY           shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    RECORD          shift, and go to state 65
    INTEGER_TYPE    shift, and go to state 66
    REAL_TYPE       shift, and go to state 67
    CHARACTER_TYPE  shift, and go to state 68
    BOOLEAN_TYPE    shift, and go to state 69

    array_type_definition   go to state 70
    record_type_definition  go to state 71
    type_definition         go to state 113


State 62

   54 identifier_list: identifier_list ',' IDENTIFIER .

    $default  reduce using rule 54 (identifier_list)


State 63

    5 array_type_definition: ARRAY . '(' expression expression_list ')' OF type_definition

    '('  shift, and go to state 114


State 64

  126 type_definition: IDENTIFIER .

    $default  reduce using rule 126 (type_definition)


State 65

   18 component_list: . component_list component_item
   19               | .
   88 record_type_definition: RECORD . component_list END RECORD

    $default  reduce using rule 19 (component_list)

    component_list  go to state 115


State 66

  120 type_definition: INTEGER_TYPE .

    $default  reduce using rule 120 (type_definition)


State 67

  121 type_definition: REAL_TYPE .

    $default  reduce using rule 121 (type_definition)


State 68

  122 type_definition: CHARACTER_TYPE .

    $default  reduce using rule 122 (type_definition)


State 69

  123 type_definition: BOOLEAN_TYPE .

    $default  reduce using rule 123 (type_definition)


State 70

  124 type_definition: array_type_definition .

    $default  reduce using rule 124 (type_definition)


State 71

  125 type_definition: record_type_definition .

    $default  reduce using rule 125 (type_definition)


State 72

  119 type_declaration: TYPE IDENTIFIER IS type_definition . ';'

    ';'  shift, and go to state 116


State 73

   13 case_statement: CASE IDENTIFIER . IS case_statement_alternative_list END CASE ';'

    IS  shift, and go to state 117


State 74

    3 actual_parameter_part: . '(' ')'
    4                      | . '(' actual_parameter_list ')'
   51 function_call: IDENTIFIER . actual_parameter_part
   52              | IDENTIFIER . LENGTH
   58 indexed_component: IDENTIFIER . '[' expression expression_list ']'
  129 variable: IDENTIFIER .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', '*', POWER_OP, ';', ')', '|', ',', ']', '/', '=', '<', '>', '.']

    LENGTH  shift, and go to state 118
    '('     shift, and go to state 94
    '['     shift, and go to state 95

    $default  reduce using rule 129 (variable)

    actual_parameter_part  go to state 119


State 75

   48 factor: NOT . primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
  101 selected_component: . variable '.' IDENTIFIER
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NULL_              shift, and go to state 76
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    function_call       go to state 87
    indexed_component   go to state 46
    primary             go to state 120
    selected_component  go to state 51
    variable            go to state 93


State 76

   77 primary: NULL_ .

    $default  reduce using rule 77 (primary)


State 77

  127 unary_adding_operator: '+' .

    $default  reduce using rule 127 (unary_adding_operator)


State 78

  128 unary_adding_operator: '-' .

    $default  reduce using rule 128 (unary_adding_operator)


State 79

   73 primary: INTEGER_LITERAL .

    $default  reduce using rule 73 (primary)


State 80

   74 primary: FLOAT_LITERAL .

    $default  reduce using rule 74 (primary)


State 81

   75 primary: CHARACTER_LITERAL .

    $default  reduce using rule 75 (primary)


State 82

   78 primary: STRING_LITERAL .

    $default  reduce using rule 78 (primary)


State 83

   76 primary: BOOLEAN_LITERAL .

    $default  reduce using rule 76 (primary)


State 84

   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
   81        | '(' . expression ')'
   89 relation: . simple_expression
   90         | . simple_expression relational_operator simple_expression
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: . unary_adding_operator term binary_adding_list
  105                  | . unary_adding_operator term
  106                  | . term binary_adding_list
  107                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    '+'                shift, and go to state 77
    '-'                shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    expression             go to state 121
    factor                 go to state 86
    function_call          go to state 87
    indexed_component      go to state 46
    primary                go to state 88
    relation               go to state 89
    selected_component     go to state 51
    simple_expression      go to state 90
    term                   go to state 91
    unary_adding_operator  go to state 92
    variable               go to state 93


State 85

   57 if_statement: IF expression . THEN sequence_of_statements elsif_list else_statement END IF ';'

    THEN  shift, and go to state 122


State 86

  117 term: factor .

    $default  reduce using rule 117 (term)


State 87

   80 primary: function_call .

    $default  reduce using rule 80 (primary)


State 88

   46 factor: primary .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', '*', ';', ')', '|', ',', ']', '/', '=', '<', '>']
   47       | primary . POWER_OP primary

    POWER_OP  shift, and go to state 123

    $default  reduce using rule 46 (factor)


State 89

   43 expression: relation . relation_list
   59 logical_operator: . AND
   60                 | . OR
   91 relation_list: . logical_operator relation relation_list
   92              | .  [LOOP, THEN, ARROW, ';', ')', '|', ',', ']']

    AND  shift, and go to state 124
    OR   shift, and go to state 125

    $default  reduce using rule 92 (relation_list)

    logical_operator  go to state 126
    relation_list     go to state 127


State 90

   89 relation: simple_expression .  [AND, LOOP, OR, THEN, ARROW, ';', ')', '|', ',', ']']
   90         | simple_expression . relational_operator simple_expression
   93 relational_operator: . '='
   94                    | . '<'
   95                    | . '>'
   96                    | . NOT_EQUAL_OP
   97                    | . LESSER_EQUAL_OP
   98                    | . GREATER_EQUAL_OP

    NOT_EQUAL_OP      shift, and go to state 128
    GREATER_EQUAL_OP  shift, and go to state 129
    LESSER_EQUAL_OP   shift, and go to state 130
    '='               shift, and go to state 131
    '<'               shift, and go to state 132
    '>'               shift, and go to state 133

    $default  reduce using rule 89 (relation)

    relational_operator  go to state 134


State 91

    9 binary_adding_list: . binary_adding_operator term
   10                   | . binary_adding_operator term binary_adding_list
   11 binary_adding_operator: . '+'
   12                       | . '-'
   66 multiplying_operator: . '*'
   67                     | . '/'
  106 simple_expression: term . binary_adding_list
  107                  | term .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, ';', ')', '|', ',', ']', '=', '<', '>']
  118 term: term . multiplying_operator factor

    '+'  shift, and go to state 135
    '-'  shift, and go to state 136
    '*'  shift, and go to state 137
    '/'  shift, and go to state 138

    $default  reduce using rule 107 (simple_expression)

    binary_adding_list      go to state 139
    binary_adding_operator  go to state 140
    multiplying_operator    go to state 141


State 92

   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: unary_adding_operator . term binary_adding_list
  105                  | unary_adding_operator . term
  117 term: . factor
  118     | . term multiplying_operator factor
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    factor              go to state 86
    function_call       go to state 87
    indexed_component   go to state 46
    primary             go to state 88
    selected_component  go to state 51
    term                go to state 142
    variable            go to state 93


State 93

   79 primary: variable .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', '*', POWER_OP, ';', ')', '|', ',', ']', '/', '=', '<', '>']
  101 selected_component: variable . '.' IDENTIFIER

    '.'  shift, and go to state 107

    $default  reduce using rule 79 (primary)


State 94

    2 actual_parameter_list: . expression expression_list
    3 actual_parameter_part: '(' . ')'
    4                      | '(' . actual_parameter_list ')'
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
   89 relation: . simple_expression
   90         | . simple_expression relational_operator simple_expression
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: . unary_adding_operator term binary_adding_list
  105                  | . unary_adding_operator term
  106                  | . term binary_adding_list
  107                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    '+'                shift, and go to state 77
    '-'                shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84
    ')'                shift, and go to state 143

    actual_parameter_list  go to state 144
    expression             go to state 145
    factor                 go to state 86
    function_call          go to state 87
    indexed_component      go to state 46
    primary                go to state 88
    relation               go to state 89
    selected_component     go to state 51
    simple_expression      go to state 90
    term                   go to state 91
    unary_adding_operator  go to state 92
    variable               go to state 93


State 95

   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   58                  | IDENTIFIER '[' . expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
   89 relation: . simple_expression
   90         | . simple_expression relational_operator simple_expression
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: . unary_adding_operator term binary_adding_list
  105                  | . unary_adding_operator term
  106                  | . term binary_adding_list
  107                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    '+'                shift, and go to state 77
    '-'                shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    expression             go to state 146
    factor                 go to state 86
    function_call          go to state 87
    indexed_component      go to state 46
    primary                go to state 88
    relation               go to state 89
    selected_component     go to state 51
    simple_expression      go to state 90
    term                   go to state 91
    unary_adding_operator  go to state 92
    variable               go to state 93


State 96

   82 procedure_call_statement: IDENTIFIER actual_parameter_part . ';'

    ';'  shift, and go to state 147


State 97

   68 null_statement: NULL_ ';' .

    $default  reduce using rule 68 (null_statement)


State 98

   99 return_statement: RETURN ';' .

    $default  reduce using rule 99 (return_statement)


State 99

  100 return_statement: RETURN simple_expression . ';'

    ';'  shift, and go to state 148


State 100

   61 loop_statement: WHILE expression . LOOP sequence_of_statements END LOOP ';'

    LOOP  shift, and go to state 149


State 101

   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   83 procedure_call_statement: PUT '(' . STRING_LITERAL ')' ';'
   84                         | PUT '(' . variable ')' ';'
  101 selected_component: . variable '.' IDENTIFIER
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER      shift, and go to state 150
    STRING_LITERAL  shift, and go to state 151

    indexed_component   go to state 46
    selected_component  go to state 51
    variable            go to state 152


State 102

   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   85 procedure_call_statement: GET '(' . variable ')' ';'
  101 selected_component: . variable '.' IDENTIFIER
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER  shift, and go to state 150

    indexed_component   go to state 46
    selected_component  go to state 51
    variable            go to state 153


State 103

   86 procedure_call_statement: NEW_LINE ';' .

    $default  reduce using rule 86 (procedure_call_statement)


State 104

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 154


State 105

  103 sequence_of_statements: statement sequence_of_statements .

    $default  reduce using rule 103 (sequence_of_statements)


State 106

    8 assignment_statement: variable ASSIGNMENT_OP . expression ';'
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
   89 relation: . simple_expression
   90         | . simple_expression relational_operator simple_expression
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: . unary_adding_operator term binary_adding_list
  105                  | . unary_adding_operator term
  106                  | . term binary_adding_list
  107                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    '+'                shift, and go to state 77
    '-'                shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    expression             go to state 155
    factor                 go to state 86
    function_call          go to state 87
    indexed_component      go to state 46
    primary                go to state 88
    relation               go to state 89
    selected_component     go to state 51
    simple_expression      go to state 90
    term                   go to state 91
    unary_adding_operator  go to state 92
    variable               go to state 93


State 107

  101 selected_component: variable '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 156


State 108

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   57 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   61 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   68 null_statement: . NULL_ ';'
   82 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   83                         | . PUT '(' STRING_LITERAL ')' ';'
   84                         | . PUT '(' variable ')' ';'
   85                         | . GET '(' variable ')' ';'
   86                         | . NEW_LINE ';'
   99 return_statement: . RETURN ';'
  100                 | . RETURN simple_expression ';'
  101 selected_component: . variable '.' IDENTIFIER
  102 sequence_of_statements: . statement
  103                       | . statement sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement
  113 subprogram_body: subprogram_specification IS declarative_part BEGIN_ . sequence_of_statements END IDENTIFIER ';'
  114                | subprogram_specification IS declarative_part BEGIN_ . sequence_of_statements END ';'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38
    PUT         shift, and go to state 39
    GET         shift, and go to state 40
    NEW_LINE    shift, and go to state 41

    assignment_statement      go to state 42
    case_statement            go to state 43
    compound_statement        go to state 44
    if_statement              go to state 45
    indexed_component         go to state 46
    loop_statement            go to state 47
    null_statement            go to state 48
    procedure_call_statement  go to state 49
    return_statement          go to state 50
    selected_component        go to state 51
    sequence_of_statements    go to state 157
    simple_statement          go to state 53
    statement                 go to state 54
    variable                  go to state 55


State 109

   54 identifier_list: identifier_list . ',' IDENTIFIER
   70 parameter_specification: IDENTIFIER identifier_list . ':' mode type_definition assign_expression

    ':'  shift, and go to state 158
    ','  shift, and go to state 30


State 110

   70 parameter_specification: . IDENTIFIER identifier_list ':' mode type_definition assign_expression
   71 parameter_specification_list: ';' . parameter_specification parameter_specification_list

    IDENTIFIER  shift, and go to state 57

    parameter_specification  go to state 159


State 111

   49 formal_part: '(' parameter_specification parameter_specification_list . ')'

    ')'  shift, and go to state 160


State 112

   53 function_specification: FUNCTION IDENTIFIER formal_part RETURN type_definition .

    $default  reduce using rule 53 (function_specification)


State 113

    6 assign_expression: . ASSIGNMENT_OP expression
    7                  | .  [';']
   69 object_declaration: IDENTIFIER identifier_list ':' constant type_definition . assign_expression ';'

    ASSIGNMENT_OP  shift, and go to state 161

    $default  reduce using rule 7 (assign_expression)

    assign_expression  go to state 162


State 114

    5 array_type_definition: ARRAY '(' . expression expression_list ')' OF type_definition
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
   89 relation: . simple_expression
   90         | . simple_expression relational_operator simple_expression
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: . unary_adding_operator term binary_adding_list
  105                  | . unary_adding_operator term
  106                  | . term binary_adding_list
  107                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    '+'                shift, and go to state 77
    '-'                shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    expression             go to state 163
    factor                 go to state 86
    function_call          go to state 87
    indexed_component      go to state 46
    primary                go to state 88
    relation               go to state 89
    selected_component     go to state 51
    simple_expression      go to state 90
    term                   go to state 91
    unary_adding_operator  go to state 92
    variable               go to state 93


State 115

   17 component_item: . IDENTIFIER identifier_list ':' type_definition assign_expression ';'
   18 component_list: component_list . component_item
   88 record_type_definition: RECORD component_list . END RECORD

    END         shift, and go to state 164
    IDENTIFIER  shift, and go to state 165

    component_item  go to state 166


State 116

  119 type_declaration: TYPE IDENTIFIER IS type_definition ';' .

    $default  reduce using rule 119 (type_declaration)


State 117

   13 case_statement: CASE IDENTIFIER IS . case_statement_alternative_list END CASE ';'
   15 case_statement_alternative_list: . case_statement_alternative_list case_statement_alternative
   16                                | .

    $default  reduce using rule 16 (case_statement_alternative_list)

    case_statement_alternative_list  go to state 167


State 118

   52 function_call: IDENTIFIER LENGTH .

    $default  reduce using rule 52 (function_call)


State 119

   51 function_call: IDENTIFIER actual_parameter_part .

    $default  reduce using rule 51 (function_call)


State 120

   48 factor: NOT primary .

    $default  reduce using rule 48 (factor)


State 121

   81 primary: '(' expression . ')'

    ')'  shift, and go to state 168


State 122

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   57 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   57             | IF expression THEN . sequence_of_statements elsif_list else_statement END IF ';'
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   61 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   68 null_statement: . NULL_ ';'
   82 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   83                         | . PUT '(' STRING_LITERAL ')' ';'
   84                         | . PUT '(' variable ')' ';'
   85                         | . GET '(' variable ')' ';'
   86                         | . NEW_LINE ';'
   99 return_statement: . RETURN ';'
  100                 | . RETURN simple_expression ';'
  101 selected_component: . variable '.' IDENTIFIER
  102 sequence_of_statements: . statement
  103                       | . statement sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38
    PUT         shift, and go to state 39
    GET         shift, and go to state 40
    NEW_LINE    shift, and go to state 41

    assignment_statement      go to state 42
    case_statement            go to state 43
    compound_statement        go to state 44
    if_statement              go to state 45
    indexed_component         go to state 46
    loop_statement            go to state 47
    null_statement            go to state 48
    procedure_call_statement  go to state 49
    return_statement          go to state 50
    selected_component        go to state 51
    sequence_of_statements    go to state 169
    simple_statement          go to state 53
    statement                 go to state 54
    variable                  go to state 55


State 123

   47 factor: primary POWER_OP . primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
  101 selected_component: . variable '.' IDENTIFIER
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NULL_              shift, and go to state 76
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    function_call       go to state 87
    indexed_component   go to state 46
    primary             go to state 170
    selected_component  go to state 51
    variable            go to state 93


State 124

   59 logical_operator: AND .

    $default  reduce using rule 59 (logical_operator)


State 125

   60 logical_operator: OR .

    $default  reduce using rule 60 (logical_operator)


State 126

   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
   89 relation: . simple_expression
   90         | . simple_expression relational_operator simple_expression
   91 relation_list: logical_operator . relation relation_list
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: . unary_adding_operator term binary_adding_list
  105                  | . unary_adding_operator term
  106                  | . term binary_adding_list
  107                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    '+'                shift, and go to state 77
    '-'                shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    factor                 go to state 86
    function_call          go to state 87
    indexed_component      go to state 46
    primary                go to state 88
    relation               go to state 171
    selected_component     go to state 51
    simple_expression      go to state 90
    term                   go to state 91
    unary_adding_operator  go to state 92
    variable               go to state 93


State 127

   43 expression: relation relation_list .

    $default  reduce using rule 43 (expression)


State 128

   96 relational_operator: NOT_EQUAL_OP .

    $default  reduce using rule 96 (relational_operator)


State 129

   98 relational_operator: GREATER_EQUAL_OP .

    $default  reduce using rule 98 (relational_operator)


State 130

   97 relational_operator: LESSER_EQUAL_OP .

    $default  reduce using rule 97 (relational_operator)


State 131

   93 relational_operator: '=' .

    $default  reduce using rule 93 (relational_operator)


State 132

   94 relational_operator: '<' .

    $default  reduce using rule 94 (relational_operator)


State 133

   95 relational_operator: '>' .

    $default  reduce using rule 95 (relational_operator)


State 134

   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
   90 relation: simple_expression relational_operator . simple_expression
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: . unary_adding_operator term binary_adding_list
  105                  | . unary_adding_operator term
  106                  | . term binary_adding_list
  107                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    '+'                shift, and go to state 77
    '-'                shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    factor                 go to state 86
    function_call          go to state 87
    indexed_component      go to state 46
    primary                go to state 88
    selected_component     go to state 51
    simple_expression      go to state 172
    term                   go to state 91
    unary_adding_operator  go to state 92
    variable               go to state 93


State 135

   11 binary_adding_operator: '+' .

    $default  reduce using rule 11 (binary_adding_operator)


State 136

   12 binary_adding_operator: '-' .

    $default  reduce using rule 12 (binary_adding_operator)


State 137

   66 multiplying_operator: '*' .

    $default  reduce using rule 66 (multiplying_operator)


State 138

   67 multiplying_operator: '/' .

    $default  reduce using rule 67 (multiplying_operator)


State 139

  106 simple_expression: term binary_adding_list .

    $default  reduce using rule 106 (simple_expression)


State 140

    9 binary_adding_list: binary_adding_operator . term
   10                   | binary_adding_operator . term binary_adding_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
  101 selected_component: . variable '.' IDENTIFIER
  117 term: . factor
  118     | . term multiplying_operator factor
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    factor              go to state 86
    function_call       go to state 87
    indexed_component   go to state 46
    primary             go to state 88
    selected_component  go to state 51
    term                go to state 173
    variable            go to state 93


State 141

   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
  101 selected_component: . variable '.' IDENTIFIER
  118 term: term multiplying_operator . factor
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    factor              go to state 174
    function_call       go to state 87
    indexed_component   go to state 46
    primary             go to state 88
    selected_component  go to state 51
    variable            go to state 93


State 142

    9 binary_adding_list: . binary_adding_operator term
   10                   | . binary_adding_operator term binary_adding_list
   11 binary_adding_operator: . '+'
   12                       | . '-'
   66 multiplying_operator: . '*'
   67                     | . '/'
  104 simple_expression: unary_adding_operator term . binary_adding_list
  105                  | unary_adding_operator term .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, ';', ')', '|', ',', ']', '=', '<', '>']
  118 term: term . multiplying_operator factor

    '+'  shift, and go to state 135
    '-'  shift, and go to state 136
    '*'  shift, and go to state 137
    '/'  shift, and go to state 138

    $default  reduce using rule 105 (simple_expression)

    binary_adding_list      go to state 175
    binary_adding_operator  go to state 140
    multiplying_operator    go to state 141


State 143

    3 actual_parameter_part: '(' ')' .

    $default  reduce using rule 3 (actual_parameter_part)


State 144

    4 actual_parameter_part: '(' actual_parameter_list . ')'

    ')'  shift, and go to state 176


State 145

    2 actual_parameter_list: expression . expression_list
   44 expression_list: . ',' expression expression_list
   45                | .  [')']

    ','  shift, and go to state 177

    $default  reduce using rule 45 (expression_list)

    expression_list  go to state 178


State 146

   44 expression_list: . ',' expression expression_list
   45                | .  [']']
   58 indexed_component: IDENTIFIER '[' expression . expression_list ']'

    ','  shift, and go to state 177

    $default  reduce using rule 45 (expression_list)

    expression_list  go to state 179


State 147

   82 procedure_call_statement: IDENTIFIER actual_parameter_part ';' .

    $default  reduce using rule 82 (procedure_call_statement)


State 148

  100 return_statement: RETURN simple_expression ';' .

    $default  reduce using rule 100 (return_statement)


State 149

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   57 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   61 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   61               | WHILE expression LOOP . sequence_of_statements END LOOP ';'
   68 null_statement: . NULL_ ';'
   82 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   83                         | . PUT '(' STRING_LITERAL ')' ';'
   84                         | . PUT '(' variable ')' ';'
   85                         | . GET '(' variable ')' ';'
   86                         | . NEW_LINE ';'
   99 return_statement: . RETURN ';'
  100                 | . RETURN simple_expression ';'
  101 selected_component: . variable '.' IDENTIFIER
  102 sequence_of_statements: . statement
  103                       | . statement sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38
    PUT         shift, and go to state 39
    GET         shift, and go to state 40
    NEW_LINE    shift, and go to state 41

    assignment_statement      go to state 42
    case_statement            go to state 43
    compound_statement        go to state 44
    if_statement              go to state 45
    indexed_component         go to state 46
    loop_statement            go to state 47
    null_statement            go to state 48
    procedure_call_statement  go to state 49
    return_statement          go to state 50
    selected_component        go to state 51
    sequence_of_statements    go to state 180
    simple_statement          go to state 53
    statement                 go to state 54
    variable                  go to state 55


State 150

   58 indexed_component: IDENTIFIER . '[' expression expression_list ']'
  129 variable: IDENTIFIER .  [')', '.']

    '['  shift, and go to state 95

    $default  reduce using rule 129 (variable)


State 151

   83 procedure_call_statement: PUT '(' STRING_LITERAL . ')' ';'

    ')'  shift, and go to state 181


State 152

   84 procedure_call_statement: PUT '(' variable . ')' ';'
  101 selected_component: variable . '.' IDENTIFIER

    ')'  shift, and go to state 182
    '.'  shift, and go to state 107


State 153

   85 procedure_call_statement: GET '(' variable . ')' ';'
  101 selected_component: variable . '.' IDENTIFIER

    ')'  shift, and go to state 183
    '.'  shift, and go to state 107


State 154

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER . ';'

    ';'  shift, and go to state 184


State 155

    8 assignment_statement: variable ASSIGNMENT_OP expression . ';'

    ';'  shift, and go to state 185


State 156

  101 selected_component: variable '.' IDENTIFIER .

    $default  reduce using rule 101 (selected_component)


State 157

  113 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements . END IDENTIFIER ';'
  114                | subprogram_specification IS declarative_part BEGIN_ sequence_of_statements . END ';'

    END  shift, and go to state 186


State 158

   62 mode: . OUT
   63     | . IN OUT
   64     | . IN
   65     | .  [ARRAY, IDENTIFIER, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]
   70 parameter_specification: IDENTIFIER identifier_list ':' . mode type_definition assign_expression

    IN   shift, and go to state 187
    OUT  shift, and go to state 188

    $default  reduce using rule 65 (mode)

    mode  go to state 189


State 159

   71 parameter_specification_list: . ';' parameter_specification parameter_specification_list
   71                             | ';' parameter_specification . parameter_specification_list
   72                             | .  [')']

    ';'  shift, and go to state 110

    $default  reduce using rule 72 (parameter_specification_list)

    parameter_specification_list  go to state 190


State 160

   49 formal_part: '(' parameter_specification parameter_specification_list ')' .

    $default  reduce using rule 49 (formal_part)


State 161

    6 assign_expression: ASSIGNMENT_OP . expression
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
   89 relation: . simple_expression
   90         | . simple_expression relational_operator simple_expression
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: . unary_adding_operator term binary_adding_list
  105                  | . unary_adding_operator term
  106                  | . term binary_adding_list
  107                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    '+'                shift, and go to state 77
    '-'                shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    expression             go to state 191
    factor                 go to state 86
    function_call          go to state 87
    indexed_component      go to state 46
    primary                go to state 88
    relation               go to state 89
    selected_component     go to state 51
    simple_expression      go to state 90
    term                   go to state 91
    unary_adding_operator  go to state 92
    variable               go to state 93


State 162

   69 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression . ';'

    ';'  shift, and go to state 192


State 163

    5 array_type_definition: ARRAY '(' expression . expression_list ')' OF type_definition
   44 expression_list: . ',' expression expression_list
   45                | .  [')']

    ','  shift, and go to state 177

    $default  reduce using rule 45 (expression_list)

    expression_list  go to state 193


State 164

   88 record_type_definition: RECORD component_list END . RECORD

    RECORD  shift, and go to state 194


State 165

   17 component_item: IDENTIFIER . identifier_list ':' type_definition assign_expression ';'
   54 identifier_list: . identifier_list ',' IDENTIFIER
   55                | . IDENTIFIER
   56                | .  [':', ',']

    IDENTIFIER  shift, and go to state 19

    $default  reduce using rule 56 (identifier_list)

    identifier_list  go to state 195


State 166

   18 component_list: component_list component_item .

    $default  reduce using rule 18 (component_list)


State 167

   13 case_statement: CASE IDENTIFIER IS case_statement_alternative_list . END CASE ';'
   14 case_statement_alternative: . WHEN discrete_choice_list ARROW sequence_of_statements
   15 case_statement_alternative_list: case_statement_alternative_list . case_statement_alternative

    END   shift, and go to state 196
    WHEN  shift, and go to state 197

    case_statement_alternative  go to state 198


State 168

   81 primary: '(' expression ')' .

    $default  reduce using rule 81 (primary)


State 169

   38 elsif_list: . elsif_list elsif_statement
   39           | .
   57 if_statement: IF expression THEN sequence_of_statements . elsif_list else_statement END IF ';'

    $default  reduce using rule 39 (elsif_list)

    elsif_list  go to state 199


State 170

   47 factor: primary POWER_OP primary .

    $default  reduce using rule 47 (factor)


State 171

   59 logical_operator: . AND
   60                 | . OR
   91 relation_list: . logical_operator relation relation_list
   91              | logical_operator relation . relation_list
   92              | .  [LOOP, THEN, ARROW, ';', ')', '|', ',', ']']

    AND  shift, and go to state 124
    OR   shift, and go to state 125

    $default  reduce using rule 92 (relation_list)

    logical_operator  go to state 126
    relation_list     go to state 200


State 172

   90 relation: simple_expression relational_operator simple_expression .

    $default  reduce using rule 90 (relation)


State 173

    9 binary_adding_list: . binary_adding_operator term
    9                   | binary_adding_operator term .  [AND, LOOP, OR, THEN, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, ';', ')', '|', ',', ']', '=', '<', '>']
   10                   | . binary_adding_operator term binary_adding_list
   10                   | binary_adding_operator term . binary_adding_list
   11 binary_adding_operator: . '+'
   12                       | . '-'
   66 multiplying_operator: . '*'
   67                     | . '/'
  118 term: term . multiplying_operator factor

    '+'  shift, and go to state 135
    '-'  shift, and go to state 136
    '*'  shift, and go to state 137
    '/'  shift, and go to state 138

    $default  reduce using rule 9 (binary_adding_list)

    binary_adding_list      go to state 201
    binary_adding_operator  go to state 140
    multiplying_operator    go to state 141


State 174

  118 term: term multiplying_operator factor .

    $default  reduce using rule 118 (term)


State 175

  104 simple_expression: unary_adding_operator term binary_adding_list .

    $default  reduce using rule 104 (simple_expression)


State 176

    4 actual_parameter_part: '(' actual_parameter_list ')' .

    $default  reduce using rule 4 (actual_parameter_part)


State 177

   43 expression: . relation relation_list
   44 expression_list: ',' . expression expression_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
   89 relation: . simple_expression
   90         | . simple_expression relational_operator simple_expression
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: . unary_adding_operator term binary_adding_list
  105                  | . unary_adding_operator term
  106                  | . term binary_adding_list
  107                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    '+'                shift, and go to state 77
    '-'                shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    expression             go to state 202
    factor                 go to state 86
    function_call          go to state 87
    indexed_component      go to state 46
    primary                go to state 88
    relation               go to state 89
    selected_component     go to state 51
    simple_expression      go to state 90
    term                   go to state 91
    unary_adding_operator  go to state 92
    variable               go to state 93


State 178

    2 actual_parameter_list: expression expression_list .

    $default  reduce using rule 2 (actual_parameter_list)


State 179

   58 indexed_component: IDENTIFIER '[' expression expression_list . ']'

    ']'  shift, and go to state 203


State 180

   61 loop_statement: WHILE expression LOOP sequence_of_statements . END LOOP ';'

    END  shift, and go to state 204


State 181

   83 procedure_call_statement: PUT '(' STRING_LITERAL ')' . ';'

    ';'  shift, and go to state 205


State 182

   84 procedure_call_statement: PUT '(' variable ')' . ';'

    ';'  shift, and go to state 206


State 183

   85 procedure_call_statement: GET '(' variable ')' . ';'

    ';'  shift, and go to state 207


State 184

    1 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';' .

    $default  reduce using rule 1 (main)


State 185

    8 assignment_statement: variable ASSIGNMENT_OP expression ';' .

    $default  reduce using rule 8 (assignment_statement)


State 186

  113 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END . IDENTIFIER ';'
  114                | subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END . ';'

    IDENTIFIER  shift, and go to state 208
    ';'         shift, and go to state 209


State 187

   63 mode: IN . OUT
   64     | IN .  [ARRAY, IDENTIFIER, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]

    OUT  shift, and go to state 210

    $default  reduce using rule 64 (mode)


State 188

   62 mode: OUT .

    $default  reduce using rule 62 (mode)


State 189

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   70 parameter_specification: IDENTIFIER identifier_list ':' mode . type_definition assign_expression
   88 record_type_definition: . RECORD component_list END RECORD
  120 type_definition: . INTEGER_TYPE
  121                | . REAL_TYPE
  122                | . CHARACTER_TYPE
  123                | . BOOLEAN_TYPE
  124                | . array_type_definition
  125                | . record_type_definition
  126                | . IDENTIFIER

    ARRAY           shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    RECORD          shift, and go to state 65
    INTEGER_TYPE    shift, and go to state 66
    REAL_TYPE       shift, and go to state 67
    CHARACTER_TYPE  shift, and go to state 68
    BOOLEAN_TYPE    shift, and go to state 69

    array_type_definition   go to state 70
    record_type_definition  go to state 71
    type_definition         go to state 211


State 190

   71 parameter_specification_list: ';' parameter_specification parameter_specification_list .

    $default  reduce using rule 71 (parameter_specification_list)


State 191

    6 assign_expression: ASSIGNMENT_OP expression .

    $default  reduce using rule 6 (assign_expression)


State 192

   69 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression ';' .

    $default  reduce using rule 69 (object_declaration)


State 193

    5 array_type_definition: ARRAY '(' expression expression_list . ')' OF type_definition

    ')'  shift, and go to state 212


State 194

   88 record_type_definition: RECORD component_list END RECORD .

    $default  reduce using rule 88 (record_type_definition)


State 195

   17 component_item: IDENTIFIER identifier_list . ':' type_definition assign_expression ';'
   54 identifier_list: identifier_list . ',' IDENTIFIER

    ':'  shift, and go to state 213
    ','  shift, and go to state 30


State 196

   13 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END . CASE ';'

    CASE  shift, and go to state 214


State 197

   14 case_statement_alternative: WHEN . discrete_choice_list ARROW sequence_of_statements
   32 discrete_choice: . expression
   33                | . INTEGER_TYPE
   34                | . OTHERS
   35 discrete_choice_list: . discrete_choice_list '|' discrete_choice
   36                     | . discrete_choice
   37                     | .  [ARROW, '|']
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
   89 relation: . simple_expression
   90         | . simple_expression relational_operator simple_expression
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: . unary_adding_operator term binary_adding_list
  105                  | . unary_adding_operator term
  106                  | . term binary_adding_list
  107                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    OTHERS             shift, and go to state 215
    '+'                shift, and go to state 77
    '-'                shift, and go to state 78
    INTEGER_TYPE       shift, and go to state 216
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    $default  reduce using rule 37 (discrete_choice_list)

    discrete_choice        go to state 217
    discrete_choice_list   go to state 218
    expression             go to state 219
    factor                 go to state 86
    function_call          go to state 87
    indexed_component      go to state 46
    primary                go to state 88
    relation               go to state 89
    selected_component     go to state 51
    simple_expression      go to state 90
    term                   go to state 91
    unary_adding_operator  go to state 92
    variable               go to state 93


State 198

   15 case_statement_alternative_list: case_statement_alternative_list case_statement_alternative .

    $default  reduce using rule 15 (case_statement_alternative_list)


State 199

   38 elsif_list: elsif_list . elsif_statement
   40 else_statement: . ELSE sequence_of_statements
   41               | .  [END]
   42 elsif_statement: . ELSIF expression THEN sequence_of_statements
   57 if_statement: IF expression THEN sequence_of_statements elsif_list . else_statement END IF ';'

    ELSE   shift, and go to state 220
    ELSIF  shift, and go to state 221

    $default  reduce using rule 41 (else_statement)

    else_statement   go to state 222
    elsif_statement  go to state 223


State 200

   91 relation_list: logical_operator relation relation_list .

    $default  reduce using rule 91 (relation_list)


State 201

   10 binary_adding_list: binary_adding_operator term binary_adding_list .

    $default  reduce using rule 10 (binary_adding_list)


State 202

   44 expression_list: . ',' expression expression_list
   44                | ',' expression . expression_list
   45                | .  [')', ']']

    ','  shift, and go to state 177

    $default  reduce using rule 45 (expression_list)

    expression_list  go to state 224


State 203

   58 indexed_component: IDENTIFIER '[' expression expression_list ']' .

    $default  reduce using rule 58 (indexed_component)


State 204

   61 loop_statement: WHILE expression LOOP sequence_of_statements END . LOOP ';'

    LOOP  shift, and go to state 225


State 205

   83 procedure_call_statement: PUT '(' STRING_LITERAL ')' ';' .

    $default  reduce using rule 83 (procedure_call_statement)


State 206

   84 procedure_call_statement: PUT '(' variable ')' ';' .

    $default  reduce using rule 84 (procedure_call_statement)


State 207

   85 procedure_call_statement: GET '(' variable ')' ';' .

    $default  reduce using rule 85 (procedure_call_statement)


State 208

  113 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER . ';'

    ';'  shift, and go to state 226


State 209

  114 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END ';' .

    $default  reduce using rule 114 (subprogram_body)


State 210

   63 mode: IN OUT .

    $default  reduce using rule 63 (mode)


State 211

    6 assign_expression: . ASSIGNMENT_OP expression
    7                  | .  [';', ')']
   70 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition . assign_expression

    ASSIGNMENT_OP  shift, and go to state 161

    $default  reduce using rule 7 (assign_expression)

    assign_expression  go to state 227


State 212

    5 array_type_definition: ARRAY '(' expression expression_list ')' . OF type_definition

    OF  shift, and go to state 228


State 213

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   17 component_item: IDENTIFIER identifier_list ':' . type_definition assign_expression ';'
   88 record_type_definition: . RECORD component_list END RECORD
  120 type_definition: . INTEGER_TYPE
  121                | . REAL_TYPE
  122                | . CHARACTER_TYPE
  123                | . BOOLEAN_TYPE
  124                | . array_type_definition
  125                | . record_type_definition
  126                | . IDENTIFIER

    ARRAY           shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    RECORD          shift, and go to state 65
    INTEGER_TYPE    shift, and go to state 66
    REAL_TYPE       shift, and go to state 67
    CHARACTER_TYPE  shift, and go to state 68
    BOOLEAN_TYPE    shift, and go to state 69

    array_type_definition   go to state 70
    record_type_definition  go to state 71
    type_definition         go to state 229


State 214

   13 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE . ';'

    ';'  shift, and go to state 230


State 215

   34 discrete_choice: OTHERS .

    $default  reduce using rule 34 (discrete_choice)


State 216

   33 discrete_choice: INTEGER_TYPE .

    $default  reduce using rule 33 (discrete_choice)


State 217

   36 discrete_choice_list: discrete_choice .

    $default  reduce using rule 36 (discrete_choice_list)


State 218

   14 case_statement_alternative: WHEN discrete_choice_list . ARROW sequence_of_statements
   35 discrete_choice_list: discrete_choice_list . '|' discrete_choice

    ARROW  shift, and go to state 231
    '|'    shift, and go to state 232


State 219

   32 discrete_choice: expression .

    $default  reduce using rule 32 (discrete_choice)


State 220

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   40 else_statement: ELSE . sequence_of_statements
   57 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   61 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   68 null_statement: . NULL_ ';'
   82 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   83                         | . PUT '(' STRING_LITERAL ')' ';'
   84                         | . PUT '(' variable ')' ';'
   85                         | . GET '(' variable ')' ';'
   86                         | . NEW_LINE ';'
   99 return_statement: . RETURN ';'
  100                 | . RETURN simple_expression ';'
  101 selected_component: . variable '.' IDENTIFIER
  102 sequence_of_statements: . statement
  103                       | . statement sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38
    PUT         shift, and go to state 39
    GET         shift, and go to state 40
    NEW_LINE    shift, and go to state 41

    assignment_statement      go to state 42
    case_statement            go to state 43
    compound_statement        go to state 44
    if_statement              go to state 45
    indexed_component         go to state 46
    loop_statement            go to state 47
    null_statement            go to state 48
    procedure_call_statement  go to state 49
    return_statement          go to state 50
    selected_component        go to state 51
    sequence_of_statements    go to state 233
    simple_statement          go to state 53
    statement                 go to state 54
    variable                  go to state 55


State 221

   42 elsif_statement: ELSIF . expression THEN sequence_of_statements
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
   89 relation: . simple_expression
   90         | . simple_expression relational_operator simple_expression
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: . unary_adding_operator term binary_adding_list
  105                  | . unary_adding_operator term
  106                  | . term binary_adding_list
  107                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    '+'                shift, and go to state 77
    '-'                shift, and go to state 78
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    expression             go to state 234
    factor                 go to state 86
    function_call          go to state 87
    indexed_component      go to state 46
    primary                go to state 88
    relation               go to state 89
    selected_component     go to state 51
    simple_expression      go to state 90
    term                   go to state 91
    unary_adding_operator  go to state 92
    variable               go to state 93


State 222

   57 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement . END IF ';'

    END  shift, and go to state 235


State 223

   38 elsif_list: elsif_list elsif_statement .

    $default  reduce using rule 38 (elsif_list)


State 224

   44 expression_list: ',' expression expression_list .

    $default  reduce using rule 44 (expression_list)


State 225

   61 loop_statement: WHILE expression LOOP sequence_of_statements END LOOP . ';'

    ';'  shift, and go to state 236


State 226

  113 subprogram_body: subprogram_specification IS declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';' .

    $default  reduce using rule 113 (subprogram_body)


State 227

   70 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition assign_expression .

    $default  reduce using rule 70 (parameter_specification)


State 228

    5 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
    5                      | ARRAY '(' expression expression_list ')' OF . type_definition
   88 record_type_definition: . RECORD component_list END RECORD
  120 type_definition: . INTEGER_TYPE
  121                | . REAL_TYPE
  122                | . CHARACTER_TYPE
  123                | . BOOLEAN_TYPE
  124                | . array_type_definition
  125                | . record_type_definition
  126                | . IDENTIFIER

    ARRAY           shift, and go to state 63
    IDENTIFIER      shift, and go to state 64
    RECORD          shift, and go to state 65
    INTEGER_TYPE    shift, and go to state 66
    REAL_TYPE       shift, and go to state 67
    CHARACTER_TYPE  shift, and go to state 68
    BOOLEAN_TYPE    shift, and go to state 69

    array_type_definition   go to state 70
    record_type_definition  go to state 71
    type_definition         go to state 237


State 229

    6 assign_expression: . ASSIGNMENT_OP expression
    7                  | .  [';']
   17 component_item: IDENTIFIER identifier_list ':' type_definition . assign_expression ';'

    ASSIGNMENT_OP  shift, and go to state 161

    $default  reduce using rule 7 (assign_expression)

    assign_expression  go to state 238


State 230

   13 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE ';' .

    $default  reduce using rule 13 (case_statement)


State 231

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   14 case_statement_alternative: WHEN discrete_choice_list ARROW . sequence_of_statements
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   57 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   61 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   68 null_statement: . NULL_ ';'
   82 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   83                         | . PUT '(' STRING_LITERAL ')' ';'
   84                         | . PUT '(' variable ')' ';'
   85                         | . GET '(' variable ')' ';'
   86                         | . NEW_LINE ';'
   99 return_statement: . RETURN ';'
  100                 | . RETURN simple_expression ';'
  101 selected_component: . variable '.' IDENTIFIER
  102 sequence_of_statements: . statement
  103                       | . statement sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38
    PUT         shift, and go to state 39
    GET         shift, and go to state 40
    NEW_LINE    shift, and go to state 41

    assignment_statement      go to state 42
    case_statement            go to state 43
    compound_statement        go to state 44
    if_statement              go to state 45
    indexed_component         go to state 46
    loop_statement            go to state 47
    null_statement            go to state 48
    procedure_call_statement  go to state 49
    return_statement          go to state 50
    selected_component        go to state 51
    sequence_of_statements    go to state 239
    simple_statement          go to state 53
    statement                 go to state 54
    variable                  go to state 55


State 232

   32 discrete_choice: . expression
   33                | . INTEGER_TYPE
   34                | . OTHERS
   35 discrete_choice_list: discrete_choice_list '|' . discrete_choice
   43 expression: . relation relation_list
   46 factor: . primary
   47       | . primary POWER_OP primary
   48       | . NOT primary
   51 function_call: . IDENTIFIER actual_parameter_part
   52              | . IDENTIFIER LENGTH
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   73 primary: . INTEGER_LITERAL
   74        | . FLOAT_LITERAL
   75        | . CHARACTER_LITERAL
   76        | . BOOLEAN_LITERAL
   77        | . NULL_
   78        | . STRING_LITERAL
   79        | . variable
   80        | . function_call
   81        | . '(' expression ')'
   89 relation: . simple_expression
   90         | . simple_expression relational_operator simple_expression
  101 selected_component: . variable '.' IDENTIFIER
  104 simple_expression: . unary_adding_operator term binary_adding_list
  105                  | . unary_adding_operator term
  106                  | . term binary_adding_list
  107                  | . term
  117 term: . factor
  118     | . term multiplying_operator factor
  127 unary_adding_operator: . '+'
  128                      | . '-'
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    IDENTIFIER         shift, and go to state 74
    NOT                shift, and go to state 75
    NULL_              shift, and go to state 76
    OTHERS             shift, and go to state 215
    '+'                shift, and go to state 77
    '-'                shift, and go to state 78
    INTEGER_TYPE       shift, and go to state 216
    INTEGER_LITERAL    shift, and go to state 79
    FLOAT_LITERAL      shift, and go to state 80
    CHARACTER_LITERAL  shift, and go to state 81
    STRING_LITERAL     shift, and go to state 82
    BOOLEAN_LITERAL    shift, and go to state 83
    '('                shift, and go to state 84

    discrete_choice        go to state 240
    expression             go to state 219
    factor                 go to state 86
    function_call          go to state 87
    indexed_component      go to state 46
    primary                go to state 88
    relation               go to state 89
    selected_component     go to state 51
    simple_expression      go to state 90
    term                   go to state 91
    unary_adding_operator  go to state 92
    variable               go to state 93


State 233

   40 else_statement: ELSE sequence_of_statements .

    $default  reduce using rule 40 (else_statement)


State 234

   42 elsif_statement: ELSIF expression . THEN sequence_of_statements

    THEN  shift, and go to state 241


State 235

   57 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END . IF ';'

    IF  shift, and go to state 242


State 236

   61 loop_statement: WHILE expression LOOP sequence_of_statements END LOOP ';' .

    $default  reduce using rule 61 (loop_statement)


State 237

    5 array_type_definition: ARRAY '(' expression expression_list ')' OF type_definition .

    $default  reduce using rule 5 (array_type_definition)


State 238

   17 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression . ';'

    ';'  shift, and go to state 243


State 239

   14 case_statement_alternative: WHEN discrete_choice_list ARROW sequence_of_statements .

    $default  reduce using rule 14 (case_statement_alternative)


State 240

   35 discrete_choice_list: discrete_choice_list '|' discrete_choice .

    $default  reduce using rule 35 (discrete_choice_list)


State 241

    8 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   13 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   20 compound_statement: . if_statement
   21                   | . loop_statement
   22                   | . case_statement
   23                   | . assignment_statement
   42 elsif_statement: ELSIF expression THEN . sequence_of_statements
   57 if_statement: . IF expression THEN sequence_of_statements elsif_list else_statement END IF ';'
   58 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   61 loop_statement: . WHILE expression LOOP sequence_of_statements END LOOP ';'
   68 null_statement: . NULL_ ';'
   82 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   83                         | . PUT '(' STRING_LITERAL ')' ';'
   84                         | . PUT '(' variable ')' ';'
   85                         | . GET '(' variable ')' ';'
   86                         | . NEW_LINE ';'
   99 return_statement: . RETURN ';'
  100                 | . RETURN simple_expression ';'
  101 selected_component: . variable '.' IDENTIFIER
  102 sequence_of_statements: . statement
  103                       | . statement sequence_of_statements
  108 simple_statement: . null_statement
  109                 | . return_statement
  110                 | . procedure_call_statement
  111 statement: . simple_statement
  112          | . compound_statement
  129 variable: . IDENTIFIER
  130         | . indexed_component
  131         | . selected_component

    CASE        shift, and go to state 33
    IF          shift, and go to state 34
    IDENTIFIER  shift, and go to state 35
    NULL_       shift, and go to state 36
    RETURN      shift, and go to state 37
    WHILE       shift, and go to state 38
    PUT         shift, and go to state 39
    GET         shift, and go to state 40
    NEW_LINE    shift, and go to state 41

    assignment_statement      go to state 42
    case_statement            go to state 43
    compound_statement        go to state 44
    if_statement              go to state 45
    indexed_component         go to state 46
    loop_statement            go to state 47
    null_statement            go to state 48
    procedure_call_statement  go to state 49
    return_statement          go to state 50
    selected_component        go to state 51
    sequence_of_statements    go to state 244
    simple_statement          go to state 53
    statement                 go to state 54
    variable                  go to state 55


State 242

   57 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END IF . ';'

    ';'  shift, and go to state 245


State 243

   17 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression ';' .

    $default  reduce using rule 17 (component_item)


State 244

   42 elsif_statement: ELSIF expression THEN sequence_of_statements .

    $default  reduce using rule 42 (elsif_statement)


State 245

   57 if_statement: IF expression THEN sequence_of_statements elsif_list else_statement END IF ';' .

    $default  reduce using rule 57 (if_statement)
