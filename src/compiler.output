Terminals unused in grammar

   CONCAT


Grammar

    0 $accept: main $end

    1 $@1: /* empty */

    2 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ $@1 sequence_of_statements END IDENTIFIER ';'

    3 actual_parameter_list: expression
    4                      | actual_parameter_list ',' expression

    5 actual_parameter_part: '(' ')'

    6 $@2: /* empty */

    7 actual_parameter_part: '(' $@2 actual_parameter_list ')'

    8 array_type_definition: ARRAY '(' expression expression_list ')' OF type_definition

    9 assign_expression: ASSIGNMENT_OP expression
   10                  | /* empty */

   11 assignment_statement: variable ASSIGNMENT_OP expression ';'

   12 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'

   13 case_statement_alternative: WHEN discrete_choice_list ARROW sequence_of_statements

   14 case_statement_alternative_list: case_statement_alternative_list case_statement_alternative
   15                                | /* empty */

   16 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression ';'

   17 component_list: component_item component_list
   18               | component_item

   19 compound_statement: if_statement
   20                   | loop_statement
   21                   | case_statement
   22                   | assignment_statement

   23 constant: CONSTANT
   24         | /* empty */

   25 declarative_item: type_declaration
   26                 | object_declaration
   27                 | subprogram_specification ';'
   28                 | subprogram_body

   29 declarative_part: declarative_item declarative_part
   30                 | /* empty */

   31 discrete_choice: primary
   32                | OTHERS

   33 discrete_choice_list: discrete_choice_list '|' discrete_choice
   34                     | discrete_choice

   35 elsif_list: elsif_list elsif_statement
   36           | /* empty */

   37 $@3: /* empty */

   38 else_statement: ELSE $@3 sequence_of_statements
   39               | /* empty */

   40 @4: /* empty */

   41 $@5: /* empty */

   42 elsif_statement: ELSIF @4 '(' expression ')' $@5 THEN sequence_of_statements

   43 @6: /* empty */

   44 expression: relation @6 relation_list

   45 expression_list: ',' expression expression_list
   46                | /* empty */

   47 factor: primary
   48       | primary POWER_OP primary
   49       | NOT primary

   50 formal_part: '(' parameter_specification parameter_specification_list ')'
   51            | /* empty */

   52 function_call: IDENTIFIER actual_parameter_part
   53              | IDENTIFIER LENGTH

   54 function_specification: FUNCTION IDENTIFIER formal_part RETURN type_definition

   55 identifier_list: ',' IDENTIFIER identifier_list
   56                | /* empty */

   57 @7: /* empty */

   58 $@8: /* empty */

   59 $@9: /* empty */

   60 if_statement: IF @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF ';'

   61 indexed_component: IDENTIFIER '[' expression expression_list ']'

   62 logical_operator: AND
   63                 | OR

   64 @10: /* empty */

   65 $@11: /* empty */

   66 loop_statement: WHILE @10 '(' expression ')' $@11 LOOP sequence_of_statements END LOOP ';'

   67 mode: OUT
   68     | IN OUT
   69     | IN
   70     | /* empty */

   71 multiplying_operator: '*'
   72                     | '/'

   73 null_statement: NULL_ ';'

   74 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'

   75 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition assign_expression

   76 parameter_specification_list: ';' parameter_specification parameter_specification_list
   77                             | /* empty */

   78 primary: INTEGER_LITERAL
   79        | FLOAT_LITERAL
   80        | CHARACTER_LITERAL
   81        | BOOLEAN_LITERAL
   82        | NULL_
   83        | STRING_LITERAL
   84        | variable
   85        | function_call
   86        | '(' expression ')'

   87 procedure_call_statement: IDENTIFIER actual_parameter_part ';'
   88                         | PUT '(' STRING_LITERAL ')' ';'
   89                         | PUT '(' variable ')' ';'
   90                         | GET '(' variable ')' ';'
   91                         | NEW_LINE ';'

   92 procedure_specification: PROCEDURE IDENTIFIER formal_part

   93 record_type_definition: RECORD component_list END RECORD

   94 relation: simple_expression
   95         | simple_expression relational_operator simple_expression

   96 $@12: /* empty */

   97 @13: /* empty */

   98 relation_list: logical_operator $@12 relation @13 relation_list
   99              | /* empty */

  100 relational_operator: '='
  101                    | '<'
  102                    | '>'
  103                    | NOT_EQUAL_OP
  104                    | LESSER_EQUAL_OP
  105                    | GREATER_EQUAL_OP

  106 return_statement: RETURN ';'
  107                 | RETURN simple_expression ';'

  108 selected_component: variable '.' IDENTIFIER

  109 sequence_of_statements: statement
  110                       | statement sequence_of_statements

  111 simple_expression: unary_adding_operator simple_expression_
  112                  | simple_expression_

  113 simple_expression_: simple_expression_ '+' simple_expression_
  114                   | simple_expression_ '-' simple_expression_
  115                   | term

  116 simple_statement: null_statement
  117                 | return_statement
  118                 | procedure_call_statement

  119 statement: simple_statement
  120          | compound_statement

  121 subprogram_body_: subprogram_specification IS

  122 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  123                | subprogram_body_ declarative_part BEGIN_ sequence_of_statements END ';'

  124 subprogram_specification: procedure_specification
  125                         | function_specification

  126 term: factor
  127     | term multiplying_operator factor

  128 type_declaration: TYPE IDENTIFIER IS type_definition ';'

  129 type_definition: INTEGER_TYPE
  130                | REAL_TYPE
  131                | CHARACTER_TYPE
  132                | BOOLEAN_TYPE
  133                | array_type_definition
  134                | record_type_definition
  135                | IDENTIFIER

  136 unary_adding_operator: '+'
  137                      | '-'

  138 variable: IDENTIFIER
  139         | indexed_component
  140         | selected_component


Terminals, with rules where they appear

$end (0) 0
'(' (40) 5 7 8 42 50 60 66 86 88 89 90
')' (41) 5 7 8 42 50 60 66 86 88 89 90
'*' (42) 71
'+' (43) 113 136
',' (44) 4 45 55
'-' (45) 114 137
'.' (46) 108
'/' (47) 72
':' (58) 16 74 75
';' (59) 2 11 12 16 27 60 66 73 74 76 87 88 89 90 91 106 107 122 123
    128
'<' (60) 101
'=' (61) 100
'>' (62) 102
'[' (91) 61
']' (93) 61
'|' (124) 33
error (256)
AND (258) 62
ARRAY (259) 8
BEGIN_ (260) 2 122 123
CASE (261) 12
CONSTANT (262) 23
ELSE (263) 38
ELSIF (264) 42
END (265) 2 12 60 66 93 122 123
FUNCTION (266) 54
IF (267) 60
IDENTIFIER (268) 2 12 16 52 53 54 55 61 74 75 87 92 108 122 128 135
    138
IN (269) 68 69
IS (270) 2 12 121 128
LOOP (271) 66
NOT (272) 49
NULL_ (273) 73 82
OF (274) 8
OR (275) 63
OTHERS (276) 32
OUT (277) 67 68
PROCEDURE (278) 2 92
RECORD (279) 93
RETURN (280) 54 106 107
THEN (281) 42 60
TYPE (282) 128
WHEN (283) 13
WHILE (284) 66
ARROW (285) 13
ASSIGNMENT_OP (286) 9 11
NOT_EQUAL_OP (287) 103
GREATER_EQUAL_OP (288) 105
LESSER_EQUAL_OP (289) 104
POWER_OP (290) 48
PUT (291) 88 89
GET (292) 90
LENGTH (293) 53
NEW_LINE (294) 91
CONCAT (295)
INTEGER_TYPE (296) 129
REAL_TYPE (297) 130
CHARACTER_TYPE (298) 131
BOOLEAN_TYPE (299) 132
INTEGER_LITERAL (300) 78
FLOAT_LITERAL (301) 79
CHARACTER_LITERAL (302) 80
STRING_LITERAL (303) 83 88
BOOLEAN_LITERAL (304) 81


Nonterminals, with rules where they appear

$accept (66)
    on left: 0
main (67)
    on left: 2, on right: 0
$@1 (68)
    on left: 1, on right: 2
actual_parameter_list (69)
    on left: 3 4, on right: 4 7
actual_parameter_part (70)
    on left: 5 7, on right: 52 87
$@2 (71)
    on left: 6, on right: 7
array_type_definition (72)
    on left: 8, on right: 133
assign_expression (73)
    on left: 9 10, on right: 16 74 75
assignment_statement (74)
    on left: 11, on right: 22
case_statement (75)
    on left: 12, on right: 21
case_statement_alternative (76)
    on left: 13, on right: 14
case_statement_alternative_list (77)
    on left: 14 15, on right: 12 14
component_item (78)
    on left: 16, on right: 17 18
component_list (79)
    on left: 17 18, on right: 17 93
compound_statement (80)
    on left: 19 20 21 22, on right: 120
constant (81)
    on left: 23 24, on right: 74
declarative_item (82)
    on left: 25 26 27 28, on right: 29
declarative_part (83)
    on left: 29 30, on right: 2 29 122 123
discrete_choice (84)
    on left: 31 32, on right: 33 34
discrete_choice_list (85)
    on left: 33 34, on right: 13 33
elsif_list (86)
    on left: 35 36, on right: 35 60
else_statement (87)
    on left: 38 39, on right: 60
$@3 (88)
    on left: 37, on right: 38
elsif_statement (89)
    on left: 42, on right: 35
@4 (90)
    on left: 40, on right: 42
$@5 (91)
    on left: 41, on right: 42
expression (92)
    on left: 44, on right: 3 4 8 9 11 42 45 60 61 66 86
@6 (93)
    on left: 43, on right: 44
expression_list (94)
    on left: 45 46, on right: 8 45 61
factor (95)
    on left: 47 48 49, on right: 126 127
formal_part (96)
    on left: 50 51, on right: 54 92
function_call (97)
    on left: 52 53, on right: 85
function_specification (98)
    on left: 54, on right: 125
identifier_list (99)
    on left: 55 56, on right: 16 55 74 75
if_statement (100)
    on left: 60, on right: 19
@7 (101)
    on left: 57, on right: 60
$@8 (102)
    on left: 58, on right: 60
$@9 (103)
    on left: 59, on right: 60
indexed_component (104)
    on left: 61, on right: 139
logical_operator (105)
    on left: 62 63, on right: 98
loop_statement (106)
    on left: 66, on right: 20
@10 (107)
    on left: 64, on right: 66
$@11 (108)
    on left: 65, on right: 66
mode (109)
    on left: 67 68 69 70, on right: 75
multiplying_operator (110)
    on left: 71 72, on right: 127
null_statement (111)
    on left: 73, on right: 116
object_declaration (112)
    on left: 74, on right: 26
parameter_specification (113)
    on left: 75, on right: 50 76
parameter_specification_list (114)
    on left: 76 77, on right: 50 76
primary (115)
    on left: 78 79 80 81 82 83 84 85 86, on right: 31 47 48 49
procedure_call_statement (116)
    on left: 87 88 89 90 91, on right: 118
procedure_specification (117)
    on left: 92, on right: 124
record_type_definition (118)
    on left: 93, on right: 134
relation (119)
    on left: 94 95, on right: 44 98
relation_list (120)
    on left: 98 99, on right: 44 98
$@12 (121)
    on left: 96, on right: 98
@13 (122)
    on left: 97, on right: 98
relational_operator (123)
    on left: 100 101 102 103 104 105, on right: 95
return_statement (124)
    on left: 106 107, on right: 117
selected_component (125)
    on left: 108, on right: 140
sequence_of_statements (126)
    on left: 109 110, on right: 2 13 38 42 60 66 110 122 123
simple_expression (127)
    on left: 111 112, on right: 94 95 107
simple_expression_ (128)
    on left: 113 114 115, on right: 111 112 113 114
simple_statement (129)
    on left: 116 117 118, on right: 119
statement (130)
    on left: 119 120, on right: 109 110
subprogram_body_ (131)
    on left: 121, on right: 122 123
subprogram_body (132)
    on left: 122 123, on right: 28
subprogram_specification (133)
    on left: 124 125, on right: 27 121
term (134)
    on left: 126 127, on right: 115 127
type_declaration (135)
    on left: 128, on right: 25
type_definition (136)
    on left: 129 130 131 132 133 134 135, on right: 8 16 54 74 75 128
unary_adding_operator (137)
    on left: 136 137, on right: 111
variable (138)
    on left: 138 139 140, on right: 11 84 89 90 108


state 0

    0 $accept: . main $end
    2 main: . PROCEDURE IDENTIFIER IS declarative_part BEGIN_ $@1 sequence_of_statements END IDENTIFIER ';'

    PROCEDURE  shift, and go to state 1

    main  go to state 2


state 1

    2 main: PROCEDURE . IDENTIFIER IS declarative_part BEGIN_ $@1 sequence_of_statements END IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 3


state 2

    0 $accept: main . $end

    $end  shift, and go to state 4


state 3

    2 main: PROCEDURE IDENTIFIER . IS declarative_part BEGIN_ $@1 sequence_of_statements END IDENTIFIER ';'

    IS  shift, and go to state 5


state 4

    0 $accept: main $end .

    $default  accept


state 5

    2 main: PROCEDURE IDENTIFIER IS . declarative_part BEGIN_ $@1 sequence_of_statements END IDENTIFIER ';'
   25 declarative_item: . type_declaration
   26                 | . object_declaration
   27                 | . subprogram_specification ';'
   28                 | . subprogram_body
   29 declarative_part: . declarative_item declarative_part
   30                 | .  [BEGIN_]
   54 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   74 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   92 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  121 subprogram_body_: . subprogram_specification IS
  122 subprogram_body: . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  123                | . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END ';'
  124 subprogram_specification: . procedure_specification
  125                         | . function_specification
  128 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    PROCEDURE   shift, and go to state 8
    TYPE        shift, and go to state 9

    $default  reduce using rule 30 (declarative_part)

    declarative_item          go to state 10
    declarative_part          go to state 11
    function_specification    go to state 12
    object_declaration        go to state 13
    procedure_specification   go to state 14
    subprogram_body_          go to state 15
    subprogram_body           go to state 16
    subprogram_specification  go to state 17
    type_declaration          go to state 18


state 6

   54 function_specification: FUNCTION . IDENTIFIER formal_part RETURN type_definition

    IDENTIFIER  shift, and go to state 19


state 7

   55 identifier_list: . ',' IDENTIFIER identifier_list
   56                | .  [':']
   74 object_declaration: IDENTIFIER . identifier_list ':' constant type_definition assign_expression ';'

    ','  shift, and go to state 20

    $default  reduce using rule 56 (identifier_list)

    identifier_list  go to state 21


state 8

   92 procedure_specification: PROCEDURE . IDENTIFIER formal_part

    IDENTIFIER  shift, and go to state 22


state 9

  128 type_declaration: TYPE . IDENTIFIER IS type_definition ';'

    IDENTIFIER  shift, and go to state 23


state 10

   25 declarative_item: . type_declaration
   26                 | . object_declaration
   27                 | . subprogram_specification ';'
   28                 | . subprogram_body
   29 declarative_part: . declarative_item declarative_part
   29                 | declarative_item . declarative_part
   30                 | .  [BEGIN_]
   54 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   74 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   92 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  121 subprogram_body_: . subprogram_specification IS
  122 subprogram_body: . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  123                | . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END ';'
  124 subprogram_specification: . procedure_specification
  125                         | . function_specification
  128 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    PROCEDURE   shift, and go to state 8
    TYPE        shift, and go to state 9

    $default  reduce using rule 30 (declarative_part)

    declarative_item          go to state 10
    declarative_part          go to state 24
    function_specification    go to state 12
    object_declaration        go to state 13
    procedure_specification   go to state 14
    subprogram_body_          go to state 15
    subprogram_body           go to state 16
    subprogram_specification  go to state 17
    type_declaration          go to state 18


state 11

    2 main: PROCEDURE IDENTIFIER IS declarative_part . BEGIN_ $@1 sequence_of_statements END IDENTIFIER ';'

    BEGIN_  shift, and go to state 25


state 12

  125 subprogram_specification: function_specification .

    $default  reduce using rule 125 (subprogram_specification)


state 13

   26 declarative_item: object_declaration .

    $default  reduce using rule 26 (declarative_item)


state 14

  124 subprogram_specification: procedure_specification .

    $default  reduce using rule 124 (subprogram_specification)


state 15

   25 declarative_item: . type_declaration
   26                 | . object_declaration
   27                 | . subprogram_specification ';'
   28                 | . subprogram_body
   29 declarative_part: . declarative_item declarative_part
   30                 | .  [BEGIN_]
   54 function_specification: . FUNCTION IDENTIFIER formal_part RETURN type_definition
   74 object_declaration: . IDENTIFIER identifier_list ':' constant type_definition assign_expression ';'
   92 procedure_specification: . PROCEDURE IDENTIFIER formal_part
  121 subprogram_body_: . subprogram_specification IS
  122 subprogram_body: . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  122                | subprogram_body_ . declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';'
  123                | . subprogram_body_ declarative_part BEGIN_ sequence_of_statements END ';'
  123                | subprogram_body_ . declarative_part BEGIN_ sequence_of_statements END ';'
  124 subprogram_specification: . procedure_specification
  125                         | . function_specification
  128 type_declaration: . TYPE IDENTIFIER IS type_definition ';'

    FUNCTION    shift, and go to state 6
    IDENTIFIER  shift, and go to state 7
    PROCEDURE   shift, and go to state 8
    TYPE        shift, and go to state 9

    $default  reduce using rule 30 (declarative_part)

    declarative_item          go to state 10
    declarative_part          go to state 26
    function_specification    go to state 12
    object_declaration        go to state 13
    procedure_specification   go to state 14
    subprogram_body_          go to state 15
    subprogram_body           go to state 16
    subprogram_specification  go to state 17
    type_declaration          go to state 18


state 16

   28 declarative_item: subprogram_body .

    $default  reduce using rule 28 (declarative_item)


state 17

   27 declarative_item: subprogram_specification . ';'
  121 subprogram_body_: subprogram_specification . IS

    IS   shift, and go to state 27
    ';'  shift, and go to state 28


state 18

   25 declarative_item: type_declaration .

    $default  reduce using rule 25 (declarative_item)


state 19

   50 formal_part: . '(' parameter_specification parameter_specification_list ')'
   51            | .  [RETURN]
   54 function_specification: FUNCTION IDENTIFIER . formal_part RETURN type_definition

    '('  shift, and go to state 29

    $default  reduce using rule 51 (formal_part)

    formal_part  go to state 30


state 20

   55 identifier_list: ',' . IDENTIFIER identifier_list

    IDENTIFIER  shift, and go to state 31


state 21

   74 object_declaration: IDENTIFIER identifier_list . ':' constant type_definition assign_expression ';'

    ':'  shift, and go to state 32


state 22

   50 formal_part: . '(' parameter_specification parameter_specification_list ')'
   51            | .  [IS, ';']
   92 procedure_specification: PROCEDURE IDENTIFIER . formal_part

    '('  shift, and go to state 29

    $default  reduce using rule 51 (formal_part)

    formal_part  go to state 33


state 23

  128 type_declaration: TYPE IDENTIFIER . IS type_definition ';'

    IS  shift, and go to state 34


state 24

   29 declarative_part: declarative_item declarative_part .

    $default  reduce using rule 29 (declarative_part)


state 25

    1 $@1: .
    2 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ . $@1 sequence_of_statements END IDENTIFIER ';'

    $default  reduce using rule 1 ($@1)

    $@1  go to state 35


state 26

  122 subprogram_body: subprogram_body_ declarative_part . BEGIN_ sequence_of_statements END IDENTIFIER ';'
  123                | subprogram_body_ declarative_part . BEGIN_ sequence_of_statements END ';'

    BEGIN_  shift, and go to state 36


state 27

  121 subprogram_body_: subprogram_specification IS .

    $default  reduce using rule 121 (subprogram_body_)


state 28

   27 declarative_item: subprogram_specification ';' .

    $default  reduce using rule 27 (declarative_item)


state 29

   50 formal_part: '(' . parameter_specification parameter_specification_list ')'
   75 parameter_specification: . IDENTIFIER identifier_list ':' mode type_definition assign_expression

    IDENTIFIER  shift, and go to state 37

    parameter_specification  go to state 38


state 30

   54 function_specification: FUNCTION IDENTIFIER formal_part . RETURN type_definition

    RETURN  shift, and go to state 39


state 31

   55 identifier_list: . ',' IDENTIFIER identifier_list
   55                | ',' IDENTIFIER . identifier_list
   56                | .  [':']

    ','  shift, and go to state 20

    $default  reduce using rule 56 (identifier_list)

    identifier_list  go to state 40


state 32

   23 constant: . CONSTANT
   24         | .  [ARRAY, IDENTIFIER, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]
   74 object_declaration: IDENTIFIER identifier_list ':' . constant type_definition assign_expression ';'

    CONSTANT  shift, and go to state 41

    $default  reduce using rule 24 (constant)

    constant  go to state 42


state 33

   92 procedure_specification: PROCEDURE IDENTIFIER formal_part .

    $default  reduce using rule 92 (procedure_specification)


state 34

    8 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   93 record_type_definition: . RECORD component_list END RECORD
  128 type_declaration: TYPE IDENTIFIER IS . type_definition ';'
  129 type_definition: . INTEGER_TYPE
  130                | . REAL_TYPE
  131                | . CHARACTER_TYPE
  132                | . BOOLEAN_TYPE
  133                | . array_type_definition
  134                | . record_type_definition
  135                | . IDENTIFIER

    ARRAY           shift, and go to state 43
    IDENTIFIER      shift, and go to state 44
    RECORD          shift, and go to state 45
    INTEGER_TYPE    shift, and go to state 46
    REAL_TYPE       shift, and go to state 47
    CHARACTER_TYPE  shift, and go to state 48
    BOOLEAN_TYPE    shift, and go to state 49

    array_type_definition   go to state 50
    record_type_definition  go to state 51
    type_definition         go to state 52


state 35

    2 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ $@1 . sequence_of_statements END IDENTIFIER ';'
   11 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   12 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   19 compound_statement: . if_statement
   20                   | . loop_statement
   21                   | . case_statement
   22                   | . assignment_statement
   60 if_statement: . IF @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF ';'
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   66 loop_statement: . WHILE @10 '(' expression ')' $@11 LOOP sequence_of_statements END LOOP ';'
   73 null_statement: . NULL_ ';'
   87 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   88                         | . PUT '(' STRING_LITERAL ')' ';'
   89                         | . PUT '(' variable ')' ';'
   90                         | . GET '(' variable ')' ';'
   91                         | . NEW_LINE ';'
  106 return_statement: . RETURN ';'
  107                 | . RETURN simple_expression ';'
  108 selected_component: . variable '.' IDENTIFIER
  109 sequence_of_statements: . statement
  110                       | . statement sequence_of_statements
  116 simple_statement: . null_statement
  117                 | . return_statement
  118                 | . procedure_call_statement
  119 statement: . simple_statement
  120          | . compound_statement
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    CASE        shift, and go to state 53
    IF          shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    NULL_       shift, and go to state 56
    RETURN      shift, and go to state 57
    WHILE       shift, and go to state 58
    PUT         shift, and go to state 59
    GET         shift, and go to state 60
    NEW_LINE    shift, and go to state 61

    assignment_statement      go to state 62
    case_statement            go to state 63
    compound_statement        go to state 64
    if_statement              go to state 65
    indexed_component         go to state 66
    loop_statement            go to state 67
    null_statement            go to state 68
    procedure_call_statement  go to state 69
    return_statement          go to state 70
    selected_component        go to state 71
    sequence_of_statements    go to state 72
    simple_statement          go to state 73
    statement                 go to state 74
    variable                  go to state 75


state 36

   11 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   12 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   19 compound_statement: . if_statement
   20                   | . loop_statement
   21                   | . case_statement
   22                   | . assignment_statement
   60 if_statement: . IF @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF ';'
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   66 loop_statement: . WHILE @10 '(' expression ')' $@11 LOOP sequence_of_statements END LOOP ';'
   73 null_statement: . NULL_ ';'
   87 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   88                         | . PUT '(' STRING_LITERAL ')' ';'
   89                         | . PUT '(' variable ')' ';'
   90                         | . GET '(' variable ')' ';'
   91                         | . NEW_LINE ';'
  106 return_statement: . RETURN ';'
  107                 | . RETURN simple_expression ';'
  108 selected_component: . variable '.' IDENTIFIER
  109 sequence_of_statements: . statement
  110                       | . statement sequence_of_statements
  116 simple_statement: . null_statement
  117                 | . return_statement
  118                 | . procedure_call_statement
  119 statement: . simple_statement
  120          | . compound_statement
  122 subprogram_body: subprogram_body_ declarative_part BEGIN_ . sequence_of_statements END IDENTIFIER ';'
  123                | subprogram_body_ declarative_part BEGIN_ . sequence_of_statements END ';'
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    CASE        shift, and go to state 53
    IF          shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    NULL_       shift, and go to state 56
    RETURN      shift, and go to state 57
    WHILE       shift, and go to state 58
    PUT         shift, and go to state 59
    GET         shift, and go to state 60
    NEW_LINE    shift, and go to state 61

    assignment_statement      go to state 62
    case_statement            go to state 63
    compound_statement        go to state 64
    if_statement              go to state 65
    indexed_component         go to state 66
    loop_statement            go to state 67
    null_statement            go to state 68
    procedure_call_statement  go to state 69
    return_statement          go to state 70
    selected_component        go to state 71
    sequence_of_statements    go to state 76
    simple_statement          go to state 73
    statement                 go to state 74
    variable                  go to state 75


state 37

   55 identifier_list: . ',' IDENTIFIER identifier_list
   56                | .  [':']
   75 parameter_specification: IDENTIFIER . identifier_list ':' mode type_definition assign_expression

    ','  shift, and go to state 20

    $default  reduce using rule 56 (identifier_list)

    identifier_list  go to state 77


state 38

   50 formal_part: '(' parameter_specification . parameter_specification_list ')'
   76 parameter_specification_list: . ';' parameter_specification parameter_specification_list
   77                             | .  [')']

    ';'  shift, and go to state 78

    $default  reduce using rule 77 (parameter_specification_list)

    parameter_specification_list  go to state 79


state 39

    8 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   54 function_specification: FUNCTION IDENTIFIER formal_part RETURN . type_definition
   93 record_type_definition: . RECORD component_list END RECORD
  129 type_definition: . INTEGER_TYPE
  130                | . REAL_TYPE
  131                | . CHARACTER_TYPE
  132                | . BOOLEAN_TYPE
  133                | . array_type_definition
  134                | . record_type_definition
  135                | . IDENTIFIER

    ARRAY           shift, and go to state 43
    IDENTIFIER      shift, and go to state 44
    RECORD          shift, and go to state 45
    INTEGER_TYPE    shift, and go to state 46
    REAL_TYPE       shift, and go to state 47
    CHARACTER_TYPE  shift, and go to state 48
    BOOLEAN_TYPE    shift, and go to state 49

    array_type_definition   go to state 50
    record_type_definition  go to state 51
    type_definition         go to state 80


state 40

   55 identifier_list: ',' IDENTIFIER identifier_list .

    $default  reduce using rule 55 (identifier_list)


state 41

   23 constant: CONSTANT .

    $default  reduce using rule 23 (constant)


state 42

    8 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   74 object_declaration: IDENTIFIER identifier_list ':' constant . type_definition assign_expression ';'
   93 record_type_definition: . RECORD component_list END RECORD
  129 type_definition: . INTEGER_TYPE
  130                | . REAL_TYPE
  131                | . CHARACTER_TYPE
  132                | . BOOLEAN_TYPE
  133                | . array_type_definition
  134                | . record_type_definition
  135                | . IDENTIFIER

    ARRAY           shift, and go to state 43
    IDENTIFIER      shift, and go to state 44
    RECORD          shift, and go to state 45
    INTEGER_TYPE    shift, and go to state 46
    REAL_TYPE       shift, and go to state 47
    CHARACTER_TYPE  shift, and go to state 48
    BOOLEAN_TYPE    shift, and go to state 49

    array_type_definition   go to state 50
    record_type_definition  go to state 51
    type_definition         go to state 81


state 43

    8 array_type_definition: ARRAY . '(' expression expression_list ')' OF type_definition

    '('  shift, and go to state 82


state 44

  135 type_definition: IDENTIFIER .

    $default  reduce using rule 135 (type_definition)


state 45

   16 component_item: . IDENTIFIER identifier_list ':' type_definition assign_expression ';'
   17 component_list: . component_item component_list
   18               | . component_item
   93 record_type_definition: RECORD . component_list END RECORD

    IDENTIFIER  shift, and go to state 83

    component_item  go to state 84
    component_list  go to state 85


state 46

  129 type_definition: INTEGER_TYPE .

    $default  reduce using rule 129 (type_definition)


state 47

  130 type_definition: REAL_TYPE .

    $default  reduce using rule 130 (type_definition)


state 48

  131 type_definition: CHARACTER_TYPE .

    $default  reduce using rule 131 (type_definition)


state 49

  132 type_definition: BOOLEAN_TYPE .

    $default  reduce using rule 132 (type_definition)


state 50

  133 type_definition: array_type_definition .

    $default  reduce using rule 133 (type_definition)


state 51

  134 type_definition: record_type_definition .

    $default  reduce using rule 134 (type_definition)


state 52

  128 type_declaration: TYPE IDENTIFIER IS type_definition . ';'

    ';'  shift, and go to state 86


state 53

   12 case_statement: CASE . IDENTIFIER IS case_statement_alternative_list END CASE ';'

    IDENTIFIER  shift, and go to state 87


state 54

   57 @7: .
   60 if_statement: IF . @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF ';'

    $default  reduce using rule 57 (@7)

    @7  go to state 88


state 55

    5 actual_parameter_part: . '(' ')'
    7                      | . '(' $@2 actual_parameter_list ')'
   61 indexed_component: IDENTIFIER . '[' expression expression_list ']'
   87 procedure_call_statement: IDENTIFIER . actual_parameter_part ';'
  138 variable: IDENTIFIER .  [ASSIGNMENT_OP, '.']

    '('  shift, and go to state 89
    '['  shift, and go to state 90

    $default  reduce using rule 138 (variable)

    actual_parameter_part  go to state 91


state 56

   73 null_statement: NULL_ . ';'

    ';'  shift, and go to state 92


state 57

   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
  106 return_statement: RETURN . ';'
  107                 | RETURN . simple_expression ';'
  108 selected_component: . variable '.' IDENTIFIER
  111 simple_expression: . unary_adding_operator simple_expression_
  112                  | . simple_expression_
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  136 unary_adding_operator: . '+'
  137                      | . '-'
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    '+'                shift, and go to state 96
    '-'                shift, and go to state 97
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    ';'                shift, and go to state 103
    '('                shift, and go to state 104

    factor                 go to state 105
    function_call          go to state 106
    indexed_component      go to state 66
    primary                go to state 107
    selected_component     go to state 71
    simple_expression      go to state 108
    simple_expression_     go to state 109
    term                   go to state 110
    unary_adding_operator  go to state 111
    variable               go to state 112


state 58

   64 @10: .
   66 loop_statement: WHILE . @10 '(' expression ')' $@11 LOOP sequence_of_statements END LOOP ';'

    $default  reduce using rule 64 (@10)

    @10  go to state 113


state 59

   88 procedure_call_statement: PUT . '(' STRING_LITERAL ')' ';'
   89                         | PUT . '(' variable ')' ';'

    '('  shift, and go to state 114


state 60

   90 procedure_call_statement: GET . '(' variable ')' ';'

    '('  shift, and go to state 115


state 61

   91 procedure_call_statement: NEW_LINE . ';'

    ';'  shift, and go to state 116


state 62

   22 compound_statement: assignment_statement .

    $default  reduce using rule 22 (compound_statement)


state 63

   21 compound_statement: case_statement .

    $default  reduce using rule 21 (compound_statement)


state 64

  120 statement: compound_statement .

    $default  reduce using rule 120 (statement)


state 65

   19 compound_statement: if_statement .

    $default  reduce using rule 19 (compound_statement)


state 66

  139 variable: indexed_component .

    $default  reduce using rule 139 (variable)


state 67

   20 compound_statement: loop_statement .

    $default  reduce using rule 20 (compound_statement)


state 68

  116 simple_statement: null_statement .

    $default  reduce using rule 116 (simple_statement)


state 69

  118 simple_statement: procedure_call_statement .

    $default  reduce using rule 118 (simple_statement)


state 70

  117 simple_statement: return_statement .

    $default  reduce using rule 117 (simple_statement)


state 71

  140 variable: selected_component .

    $default  reduce using rule 140 (variable)


state 72

    2 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ $@1 sequence_of_statements . END IDENTIFIER ';'

    END  shift, and go to state 117


state 73

  119 statement: simple_statement .

    $default  reduce using rule 119 (statement)


state 74

   11 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   12 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   19 compound_statement: . if_statement
   20                   | . loop_statement
   21                   | . case_statement
   22                   | . assignment_statement
   60 if_statement: . IF @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF ';'
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   66 loop_statement: . WHILE @10 '(' expression ')' $@11 LOOP sequence_of_statements END LOOP ';'
   73 null_statement: . NULL_ ';'
   87 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   88                         | . PUT '(' STRING_LITERAL ')' ';'
   89                         | . PUT '(' variable ')' ';'
   90                         | . GET '(' variable ')' ';'
   91                         | . NEW_LINE ';'
  106 return_statement: . RETURN ';'
  107                 | . RETURN simple_expression ';'
  108 selected_component: . variable '.' IDENTIFIER
  109 sequence_of_statements: . statement
  109                       | statement .  [ELSE, ELSIF, END, WHEN]
  110                       | . statement sequence_of_statements
  110                       | statement . sequence_of_statements
  116 simple_statement: . null_statement
  117                 | . return_statement
  118                 | . procedure_call_statement
  119 statement: . simple_statement
  120          | . compound_statement
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    CASE        shift, and go to state 53
    IF          shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    NULL_       shift, and go to state 56
    RETURN      shift, and go to state 57
    WHILE       shift, and go to state 58
    PUT         shift, and go to state 59
    GET         shift, and go to state 60
    NEW_LINE    shift, and go to state 61

    $default  reduce using rule 109 (sequence_of_statements)

    assignment_statement      go to state 62
    case_statement            go to state 63
    compound_statement        go to state 64
    if_statement              go to state 65
    indexed_component         go to state 66
    loop_statement            go to state 67
    null_statement            go to state 68
    procedure_call_statement  go to state 69
    return_statement          go to state 70
    selected_component        go to state 71
    sequence_of_statements    go to state 118
    simple_statement          go to state 73
    statement                 go to state 74
    variable                  go to state 75


state 75

   11 assignment_statement: variable . ASSIGNMENT_OP expression ';'
  108 selected_component: variable . '.' IDENTIFIER

    ASSIGNMENT_OP  shift, and go to state 119
    '.'            shift, and go to state 120


state 76

  122 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements . END IDENTIFIER ';'
  123                | subprogram_body_ declarative_part BEGIN_ sequence_of_statements . END ';'

    END  shift, and go to state 121


state 77

   75 parameter_specification: IDENTIFIER identifier_list . ':' mode type_definition assign_expression

    ':'  shift, and go to state 122


state 78

   75 parameter_specification: . IDENTIFIER identifier_list ':' mode type_definition assign_expression
   76 parameter_specification_list: ';' . parameter_specification parameter_specification_list

    IDENTIFIER  shift, and go to state 37

    parameter_specification  go to state 123


state 79

   50 formal_part: '(' parameter_specification parameter_specification_list . ')'

    ')'  shift, and go to state 124


state 80

   54 function_specification: FUNCTION IDENTIFIER formal_part RETURN type_definition .

    $default  reduce using rule 54 (function_specification)


state 81

    9 assign_expression: . ASSIGNMENT_OP expression
   10                  | .  [';']
   74 object_declaration: IDENTIFIER identifier_list ':' constant type_definition . assign_expression ';'

    ASSIGNMENT_OP  shift, and go to state 125

    $default  reduce using rule 10 (assign_expression)

    assign_expression  go to state 126


state 82

    8 array_type_definition: ARRAY '(' . expression expression_list ')' OF type_definition
   44 expression: . relation @6 relation_list
   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
   94 relation: . simple_expression
   95         | . simple_expression relational_operator simple_expression
  108 selected_component: . variable '.' IDENTIFIER
  111 simple_expression: . unary_adding_operator simple_expression_
  112                  | . simple_expression_
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  136 unary_adding_operator: . '+'
  137                      | . '-'
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    '+'                shift, and go to state 96
    '-'                shift, and go to state 97
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    expression             go to state 127
    factor                 go to state 105
    function_call          go to state 106
    indexed_component      go to state 66
    primary                go to state 107
    relation               go to state 128
    selected_component     go to state 71
    simple_expression      go to state 129
    simple_expression_     go to state 109
    term                   go to state 110
    unary_adding_operator  go to state 111
    variable               go to state 112


state 83

   16 component_item: IDENTIFIER . identifier_list ':' type_definition assign_expression ';'
   55 identifier_list: . ',' IDENTIFIER identifier_list
   56                | .  [':']

    ','  shift, and go to state 20

    $default  reduce using rule 56 (identifier_list)

    identifier_list  go to state 130


state 84

   16 component_item: . IDENTIFIER identifier_list ':' type_definition assign_expression ';'
   17 component_list: . component_item component_list
   17               | component_item . component_list
   18               | . component_item
   18               | component_item .  [END]

    IDENTIFIER  shift, and go to state 83

    $default  reduce using rule 18 (component_list)

    component_item  go to state 84
    component_list  go to state 131


state 85

   93 record_type_definition: RECORD component_list . END RECORD

    END  shift, and go to state 132


state 86

  128 type_declaration: TYPE IDENTIFIER IS type_definition ';' .

    $default  reduce using rule 128 (type_declaration)


state 87

   12 case_statement: CASE IDENTIFIER . IS case_statement_alternative_list END CASE ';'

    IS  shift, and go to state 133


state 88

   60 if_statement: IF @7 . '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF ';'

    '('  shift, and go to state 134


state 89

    5 actual_parameter_part: '(' . ')'
    6 $@2: .  [IDENTIFIER, NOT, NULL_, '+', '-', INTEGER_LITERAL, FLOAT_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, BOOLEAN_LITERAL, '(']
    7 actual_parameter_part: '(' . $@2 actual_parameter_list ')'

    ')'  shift, and go to state 135

    $default  reduce using rule 6 ($@2)

    $@2  go to state 136


state 90

   44 expression: . relation @6 relation_list
   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   61                  | IDENTIFIER '[' . expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
   94 relation: . simple_expression
   95         | . simple_expression relational_operator simple_expression
  108 selected_component: . variable '.' IDENTIFIER
  111 simple_expression: . unary_adding_operator simple_expression_
  112                  | . simple_expression_
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  136 unary_adding_operator: . '+'
  137                      | . '-'
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    '+'                shift, and go to state 96
    '-'                shift, and go to state 97
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    expression             go to state 137
    factor                 go to state 105
    function_call          go to state 106
    indexed_component      go to state 66
    primary                go to state 107
    relation               go to state 128
    selected_component     go to state 71
    simple_expression      go to state 129
    simple_expression_     go to state 109
    term                   go to state 110
    unary_adding_operator  go to state 111
    variable               go to state 112


state 91

   87 procedure_call_statement: IDENTIFIER actual_parameter_part . ';'

    ';'  shift, and go to state 138


state 92

   73 null_statement: NULL_ ';' .

    $default  reduce using rule 73 (null_statement)


state 93

    5 actual_parameter_part: . '(' ')'
    7                      | . '(' $@2 actual_parameter_list ')'
   52 function_call: IDENTIFIER . actual_parameter_part
   53              | IDENTIFIER . LENGTH
   61 indexed_component: IDENTIFIER . '[' expression expression_list ']'
  138 variable: IDENTIFIER .  [AND, OR, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', '*', '/', POWER_OP, ';', ',', ')', '|', ']', '=', '<', '>', '.']

    LENGTH  shift, and go to state 139
    '('     shift, and go to state 89
    '['     shift, and go to state 90

    $default  reduce using rule 138 (variable)

    actual_parameter_part  go to state 140


state 94

   49 factor: NOT . primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
  108 selected_component: . variable '.' IDENTIFIER
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NULL_              shift, and go to state 95
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    function_call       go to state 106
    indexed_component   go to state 66
    primary             go to state 141
    selected_component  go to state 71
    variable            go to state 112


state 95

   82 primary: NULL_ .

    $default  reduce using rule 82 (primary)


state 96

  136 unary_adding_operator: '+' .

    $default  reduce using rule 136 (unary_adding_operator)


state 97

  137 unary_adding_operator: '-' .

    $default  reduce using rule 137 (unary_adding_operator)


state 98

   78 primary: INTEGER_LITERAL .

    $default  reduce using rule 78 (primary)


state 99

   79 primary: FLOAT_LITERAL .

    $default  reduce using rule 79 (primary)


state 100

   80 primary: CHARACTER_LITERAL .

    $default  reduce using rule 80 (primary)


state 101

   83 primary: STRING_LITERAL .

    $default  reduce using rule 83 (primary)


state 102

   81 primary: BOOLEAN_LITERAL .

    $default  reduce using rule 81 (primary)


state 103

  106 return_statement: RETURN ';' .

    $default  reduce using rule 106 (return_statement)


state 104

   44 expression: . relation @6 relation_list
   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
   86        | '(' . expression ')'
   94 relation: . simple_expression
   95         | . simple_expression relational_operator simple_expression
  108 selected_component: . variable '.' IDENTIFIER
  111 simple_expression: . unary_adding_operator simple_expression_
  112                  | . simple_expression_
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  136 unary_adding_operator: . '+'
  137                      | . '-'
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    '+'                shift, and go to state 96
    '-'                shift, and go to state 97
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    expression             go to state 142
    factor                 go to state 105
    function_call          go to state 106
    indexed_component      go to state 66
    primary                go to state 107
    relation               go to state 128
    selected_component     go to state 71
    simple_expression      go to state 129
    simple_expression_     go to state 109
    term                   go to state 110
    unary_adding_operator  go to state 111
    variable               go to state 112


state 105

  126 term: factor .

    $default  reduce using rule 126 (term)


state 106

   85 primary: function_call .

    $default  reduce using rule 85 (primary)


state 107

   47 factor: primary .  [AND, OR, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', '*', '/', ';', ',', ')', ']', '=', '<', '>']
   48       | primary . POWER_OP primary

    POWER_OP  shift, and go to state 143

    $default  reduce using rule 47 (factor)


state 108

  107 return_statement: RETURN simple_expression . ';'

    ';'  shift, and go to state 144


state 109

  112 simple_expression: simple_expression_ .  [AND, OR, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, ';', ',', ')', ']', '=', '<', '>']
  113 simple_expression_: simple_expression_ . '+' simple_expression_
  114                   | simple_expression_ . '-' simple_expression_

    '+'  shift, and go to state 145
    '-'  shift, and go to state 146

    $default  reduce using rule 112 (simple_expression)


state 110

   71 multiplying_operator: . '*'
   72                     | . '/'
  115 simple_expression_: term .  [AND, OR, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', ';', ',', ')', ']', '=', '<', '>']
  127 term: term . multiplying_operator factor

    '*'  shift, and go to state 147
    '/'  shift, and go to state 148

    $default  reduce using rule 115 (simple_expression_)

    multiplying_operator  go to state 149


state 111

   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
  108 selected_component: . variable '.' IDENTIFIER
  111 simple_expression: unary_adding_operator . simple_expression_
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    factor              go to state 105
    function_call       go to state 106
    indexed_component   go to state 66
    primary             go to state 107
    selected_component  go to state 71
    simple_expression_  go to state 150
    term                go to state 110
    variable            go to state 112


state 112

   84 primary: variable .  [AND, OR, ARROW, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', '*', '/', POWER_OP, ';', ',', ')', '|', ']', '=', '<', '>']
  108 selected_component: variable . '.' IDENTIFIER

    '.'  shift, and go to state 120

    $default  reduce using rule 84 (primary)


state 113

   66 loop_statement: WHILE @10 . '(' expression ')' $@11 LOOP sequence_of_statements END LOOP ';'

    '('  shift, and go to state 151


state 114

   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   88 procedure_call_statement: PUT '(' . STRING_LITERAL ')' ';'
   89                         | PUT '(' . variable ')' ';'
  108 selected_component: . variable '.' IDENTIFIER
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER      shift, and go to state 152
    STRING_LITERAL  shift, and go to state 153

    indexed_component   go to state 66
    selected_component  go to state 71
    variable            go to state 154


state 115

   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   90 procedure_call_statement: GET '(' . variable ')' ';'
  108 selected_component: . variable '.' IDENTIFIER
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER  shift, and go to state 152

    indexed_component   go to state 66
    selected_component  go to state 71
    variable            go to state 155


state 116

   91 procedure_call_statement: NEW_LINE ';' .

    $default  reduce using rule 91 (procedure_call_statement)


state 117

    2 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ $@1 sequence_of_statements END . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 156


state 118

  110 sequence_of_statements: statement sequence_of_statements .

    $default  reduce using rule 110 (sequence_of_statements)


state 119

   11 assignment_statement: variable ASSIGNMENT_OP . expression ';'
   44 expression: . relation @6 relation_list
   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
   94 relation: . simple_expression
   95         | . simple_expression relational_operator simple_expression
  108 selected_component: . variable '.' IDENTIFIER
  111 simple_expression: . unary_adding_operator simple_expression_
  112                  | . simple_expression_
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  136 unary_adding_operator: . '+'
  137                      | . '-'
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    '+'                shift, and go to state 96
    '-'                shift, and go to state 97
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    expression             go to state 157
    factor                 go to state 105
    function_call          go to state 106
    indexed_component      go to state 66
    primary                go to state 107
    relation               go to state 128
    selected_component     go to state 71
    simple_expression      go to state 129
    simple_expression_     go to state 109
    term                   go to state 110
    unary_adding_operator  go to state 111
    variable               go to state 112


state 120

  108 selected_component: variable '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 158


state 121

  122 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements END . IDENTIFIER ';'
  123                | subprogram_body_ declarative_part BEGIN_ sequence_of_statements END . ';'

    IDENTIFIER  shift, and go to state 159
    ';'         shift, and go to state 160


state 122

   67 mode: . OUT
   68     | . IN OUT
   69     | . IN
   70     | .  [ARRAY, IDENTIFIER, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]
   75 parameter_specification: IDENTIFIER identifier_list ':' . mode type_definition assign_expression

    IN   shift, and go to state 161
    OUT  shift, and go to state 162

    $default  reduce using rule 70 (mode)

    mode  go to state 163


state 123

   76 parameter_specification_list: . ';' parameter_specification parameter_specification_list
   76                             | ';' parameter_specification . parameter_specification_list
   77                             | .  [')']

    ';'  shift, and go to state 78

    $default  reduce using rule 77 (parameter_specification_list)

    parameter_specification_list  go to state 164


state 124

   50 formal_part: '(' parameter_specification parameter_specification_list ')' .

    $default  reduce using rule 50 (formal_part)


state 125

    9 assign_expression: ASSIGNMENT_OP . expression
   44 expression: . relation @6 relation_list
   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
   94 relation: . simple_expression
   95         | . simple_expression relational_operator simple_expression
  108 selected_component: . variable '.' IDENTIFIER
  111 simple_expression: . unary_adding_operator simple_expression_
  112                  | . simple_expression_
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  136 unary_adding_operator: . '+'
  137                      | . '-'
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    '+'                shift, and go to state 96
    '-'                shift, and go to state 97
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    expression             go to state 165
    factor                 go to state 105
    function_call          go to state 106
    indexed_component      go to state 66
    primary                go to state 107
    relation               go to state 128
    selected_component     go to state 71
    simple_expression      go to state 129
    simple_expression_     go to state 109
    term                   go to state 110
    unary_adding_operator  go to state 111
    variable               go to state 112


state 126

   74 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression . ';'

    ';'  shift, and go to state 166


state 127

    8 array_type_definition: ARRAY '(' expression . expression_list ')' OF type_definition
   45 expression_list: . ',' expression expression_list
   46                | .  [')']

    ','  shift, and go to state 167

    $default  reduce using rule 46 (expression_list)

    expression_list  go to state 168


state 128

   43 @6: .
   44 expression: relation . @6 relation_list

    $default  reduce using rule 43 (@6)

    @6  go to state 169


state 129

   94 relation: simple_expression .  [AND, OR, ';', ',', ')', ']']
   95         | simple_expression . relational_operator simple_expression
  100 relational_operator: . '='
  101                    | . '<'
  102                    | . '>'
  103                    | . NOT_EQUAL_OP
  104                    | . LESSER_EQUAL_OP
  105                    | . GREATER_EQUAL_OP

    NOT_EQUAL_OP      shift, and go to state 170
    GREATER_EQUAL_OP  shift, and go to state 171
    LESSER_EQUAL_OP   shift, and go to state 172
    '='               shift, and go to state 173
    '<'               shift, and go to state 174
    '>'               shift, and go to state 175

    $default  reduce using rule 94 (relation)

    relational_operator  go to state 176


state 130

   16 component_item: IDENTIFIER identifier_list . ':' type_definition assign_expression ';'

    ':'  shift, and go to state 177


state 131

   17 component_list: component_item component_list .

    $default  reduce using rule 17 (component_list)


state 132

   93 record_type_definition: RECORD component_list END . RECORD

    RECORD  shift, and go to state 178


state 133

   12 case_statement: CASE IDENTIFIER IS . case_statement_alternative_list END CASE ';'
   14 case_statement_alternative_list: . case_statement_alternative_list case_statement_alternative
   15                                | .

    $default  reduce using rule 15 (case_statement_alternative_list)

    case_statement_alternative_list  go to state 179


state 134

   44 expression: . relation @6 relation_list
   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   60 if_statement: IF @7 '(' . expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF ';'
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
   94 relation: . simple_expression
   95         | . simple_expression relational_operator simple_expression
  108 selected_component: . variable '.' IDENTIFIER
  111 simple_expression: . unary_adding_operator simple_expression_
  112                  | . simple_expression_
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  136 unary_adding_operator: . '+'
  137                      | . '-'
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    '+'                shift, and go to state 96
    '-'                shift, and go to state 97
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    expression             go to state 180
    factor                 go to state 105
    function_call          go to state 106
    indexed_component      go to state 66
    primary                go to state 107
    relation               go to state 128
    selected_component     go to state 71
    simple_expression      go to state 129
    simple_expression_     go to state 109
    term                   go to state 110
    unary_adding_operator  go to state 111
    variable               go to state 112


state 135

    5 actual_parameter_part: '(' ')' .

    $default  reduce using rule 5 (actual_parameter_part)


state 136

    3 actual_parameter_list: . expression
    4                      | . actual_parameter_list ',' expression
    7 actual_parameter_part: '(' $@2 . actual_parameter_list ')'
   44 expression: . relation @6 relation_list
   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
   94 relation: . simple_expression
   95         | . simple_expression relational_operator simple_expression
  108 selected_component: . variable '.' IDENTIFIER
  111 simple_expression: . unary_adding_operator simple_expression_
  112                  | . simple_expression_
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  136 unary_adding_operator: . '+'
  137                      | . '-'
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    '+'                shift, and go to state 96
    '-'                shift, and go to state 97
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    actual_parameter_list  go to state 181
    expression             go to state 182
    factor                 go to state 105
    function_call          go to state 106
    indexed_component      go to state 66
    primary                go to state 107
    relation               go to state 128
    selected_component     go to state 71
    simple_expression      go to state 129
    simple_expression_     go to state 109
    term                   go to state 110
    unary_adding_operator  go to state 111
    variable               go to state 112


state 137

   45 expression_list: . ',' expression expression_list
   46                | .  [']']
   61 indexed_component: IDENTIFIER '[' expression . expression_list ']'

    ','  shift, and go to state 167

    $default  reduce using rule 46 (expression_list)

    expression_list  go to state 183


state 138

   87 procedure_call_statement: IDENTIFIER actual_parameter_part ';' .

    $default  reduce using rule 87 (procedure_call_statement)


state 139

   53 function_call: IDENTIFIER LENGTH .

    $default  reduce using rule 53 (function_call)


state 140

   52 function_call: IDENTIFIER actual_parameter_part .

    $default  reduce using rule 52 (function_call)


state 141

   49 factor: NOT primary .

    $default  reduce using rule 49 (factor)


state 142

   86 primary: '(' expression . ')'

    ')'  shift, and go to state 184


state 143

   48 factor: primary POWER_OP . primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
  108 selected_component: . variable '.' IDENTIFIER
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NULL_              shift, and go to state 95
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    function_call       go to state 106
    indexed_component   go to state 66
    primary             go to state 185
    selected_component  go to state 71
    variable            go to state 112


state 144

  107 return_statement: RETURN simple_expression ';' .

    $default  reduce using rule 107 (return_statement)


state 145

   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
  108 selected_component: . variable '.' IDENTIFIER
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  113                   | simple_expression_ '+' . simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    factor              go to state 105
    function_call       go to state 106
    indexed_component   go to state 66
    primary             go to state 107
    selected_component  go to state 71
    simple_expression_  go to state 186
    term                go to state 110
    variable            go to state 112


state 146

   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
  108 selected_component: . variable '.' IDENTIFIER
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  114                   | simple_expression_ '-' . simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    factor              go to state 105
    function_call       go to state 106
    indexed_component   go to state 66
    primary             go to state 107
    selected_component  go to state 71
    simple_expression_  go to state 187
    term                go to state 110
    variable            go to state 112


state 147

   71 multiplying_operator: '*' .

    $default  reduce using rule 71 (multiplying_operator)


state 148

   72 multiplying_operator: '/' .

    $default  reduce using rule 72 (multiplying_operator)


state 149

   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
  108 selected_component: . variable '.' IDENTIFIER
  127 term: term multiplying_operator . factor
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    factor              go to state 188
    function_call       go to state 106
    indexed_component   go to state 66
    primary             go to state 107
    selected_component  go to state 71
    variable            go to state 112


state 150

  111 simple_expression: unary_adding_operator simple_expression_ .  [AND, OR, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, ';', ',', ')', ']', '=', '<', '>']
  113 simple_expression_: simple_expression_ . '+' simple_expression_
  114                   | simple_expression_ . '-' simple_expression_

    '+'  shift, and go to state 145
    '-'  shift, and go to state 146

    $default  reduce using rule 111 (simple_expression)


state 151

   44 expression: . relation @6 relation_list
   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   66 loop_statement: WHILE @10 '(' . expression ')' $@11 LOOP sequence_of_statements END LOOP ';'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
   94 relation: . simple_expression
   95         | . simple_expression relational_operator simple_expression
  108 selected_component: . variable '.' IDENTIFIER
  111 simple_expression: . unary_adding_operator simple_expression_
  112                  | . simple_expression_
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  136 unary_adding_operator: . '+'
  137                      | . '-'
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    '+'                shift, and go to state 96
    '-'                shift, and go to state 97
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    expression             go to state 189
    factor                 go to state 105
    function_call          go to state 106
    indexed_component      go to state 66
    primary                go to state 107
    relation               go to state 128
    selected_component     go to state 71
    simple_expression      go to state 129
    simple_expression_     go to state 109
    term                   go to state 110
    unary_adding_operator  go to state 111
    variable               go to state 112


state 152

   61 indexed_component: IDENTIFIER . '[' expression expression_list ']'
  138 variable: IDENTIFIER .  [')', '.']

    '['  shift, and go to state 90

    $default  reduce using rule 138 (variable)


state 153

   88 procedure_call_statement: PUT '(' STRING_LITERAL . ')' ';'

    ')'  shift, and go to state 190


state 154

   89 procedure_call_statement: PUT '(' variable . ')' ';'
  108 selected_component: variable . '.' IDENTIFIER

    ')'  shift, and go to state 191
    '.'  shift, and go to state 120


state 155

   90 procedure_call_statement: GET '(' variable . ')' ';'
  108 selected_component: variable . '.' IDENTIFIER

    ')'  shift, and go to state 192
    '.'  shift, and go to state 120


state 156

    2 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ $@1 sequence_of_statements END IDENTIFIER . ';'

    ';'  shift, and go to state 193


state 157

   11 assignment_statement: variable ASSIGNMENT_OP expression . ';'

    ';'  shift, and go to state 194


state 158

  108 selected_component: variable '.' IDENTIFIER .

    $default  reduce using rule 108 (selected_component)


state 159

  122 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER . ';'

    ';'  shift, and go to state 195


state 160

  123 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements END ';' .

    $default  reduce using rule 123 (subprogram_body)


state 161

   68 mode: IN . OUT
   69     | IN .  [ARRAY, IDENTIFIER, RECORD, INTEGER_TYPE, REAL_TYPE, CHARACTER_TYPE, BOOLEAN_TYPE]

    OUT  shift, and go to state 196

    $default  reduce using rule 69 (mode)


state 162

   67 mode: OUT .

    $default  reduce using rule 67 (mode)


state 163

    8 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   75 parameter_specification: IDENTIFIER identifier_list ':' mode . type_definition assign_expression
   93 record_type_definition: . RECORD component_list END RECORD
  129 type_definition: . INTEGER_TYPE
  130                | . REAL_TYPE
  131                | . CHARACTER_TYPE
  132                | . BOOLEAN_TYPE
  133                | . array_type_definition
  134                | . record_type_definition
  135                | . IDENTIFIER

    ARRAY           shift, and go to state 43
    IDENTIFIER      shift, and go to state 44
    RECORD          shift, and go to state 45
    INTEGER_TYPE    shift, and go to state 46
    REAL_TYPE       shift, and go to state 47
    CHARACTER_TYPE  shift, and go to state 48
    BOOLEAN_TYPE    shift, and go to state 49

    array_type_definition   go to state 50
    record_type_definition  go to state 51
    type_definition         go to state 197


state 164

   76 parameter_specification_list: ';' parameter_specification parameter_specification_list .

    $default  reduce using rule 76 (parameter_specification_list)


state 165

    9 assign_expression: ASSIGNMENT_OP expression .

    $default  reduce using rule 9 (assign_expression)


state 166

   74 object_declaration: IDENTIFIER identifier_list ':' constant type_definition assign_expression ';' .

    $default  reduce using rule 74 (object_declaration)


state 167

   44 expression: . relation @6 relation_list
   45 expression_list: ',' . expression expression_list
   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
   94 relation: . simple_expression
   95         | . simple_expression relational_operator simple_expression
  108 selected_component: . variable '.' IDENTIFIER
  111 simple_expression: . unary_adding_operator simple_expression_
  112                  | . simple_expression_
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  136 unary_adding_operator: . '+'
  137                      | . '-'
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    '+'                shift, and go to state 96
    '-'                shift, and go to state 97
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    expression             go to state 198
    factor                 go to state 105
    function_call          go to state 106
    indexed_component      go to state 66
    primary                go to state 107
    relation               go to state 128
    selected_component     go to state 71
    simple_expression      go to state 129
    simple_expression_     go to state 109
    term                   go to state 110
    unary_adding_operator  go to state 111
    variable               go to state 112


state 168

    8 array_type_definition: ARRAY '(' expression expression_list . ')' OF type_definition

    ')'  shift, and go to state 199


state 169

   44 expression: relation @6 . relation_list
   62 logical_operator: . AND
   63                 | . OR
   98 relation_list: . logical_operator $@12 relation @13 relation_list
   99              | .  [';', ',', ')', ']']

    AND  shift, and go to state 200
    OR   shift, and go to state 201

    $default  reduce using rule 99 (relation_list)

    logical_operator  go to state 202
    relation_list     go to state 203


state 170

  103 relational_operator: NOT_EQUAL_OP .

    $default  reduce using rule 103 (relational_operator)


state 171

  105 relational_operator: GREATER_EQUAL_OP .

    $default  reduce using rule 105 (relational_operator)


state 172

  104 relational_operator: LESSER_EQUAL_OP .

    $default  reduce using rule 104 (relational_operator)


state 173

  100 relational_operator: '=' .

    $default  reduce using rule 100 (relational_operator)


state 174

  101 relational_operator: '<' .

    $default  reduce using rule 101 (relational_operator)


state 175

  102 relational_operator: '>' .

    $default  reduce using rule 102 (relational_operator)


state 176

   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
   95 relation: simple_expression relational_operator . simple_expression
  108 selected_component: . variable '.' IDENTIFIER
  111 simple_expression: . unary_adding_operator simple_expression_
  112                  | . simple_expression_
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  136 unary_adding_operator: . '+'
  137                      | . '-'
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    '+'                shift, and go to state 96
    '-'                shift, and go to state 97
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    factor                 go to state 105
    function_call          go to state 106
    indexed_component      go to state 66
    primary                go to state 107
    selected_component     go to state 71
    simple_expression      go to state 204
    simple_expression_     go to state 109
    term                   go to state 110
    unary_adding_operator  go to state 111
    variable               go to state 112


state 177

    8 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
   16 component_item: IDENTIFIER identifier_list ':' . type_definition assign_expression ';'
   93 record_type_definition: . RECORD component_list END RECORD
  129 type_definition: . INTEGER_TYPE
  130                | . REAL_TYPE
  131                | . CHARACTER_TYPE
  132                | . BOOLEAN_TYPE
  133                | . array_type_definition
  134                | . record_type_definition
  135                | . IDENTIFIER

    ARRAY           shift, and go to state 43
    IDENTIFIER      shift, and go to state 44
    RECORD          shift, and go to state 45
    INTEGER_TYPE    shift, and go to state 46
    REAL_TYPE       shift, and go to state 47
    CHARACTER_TYPE  shift, and go to state 48
    BOOLEAN_TYPE    shift, and go to state 49

    array_type_definition   go to state 50
    record_type_definition  go to state 51
    type_definition         go to state 205


state 178

   93 record_type_definition: RECORD component_list END RECORD .

    $default  reduce using rule 93 (record_type_definition)


state 179

   12 case_statement: CASE IDENTIFIER IS case_statement_alternative_list . END CASE ';'
   13 case_statement_alternative: . WHEN discrete_choice_list ARROW sequence_of_statements
   14 case_statement_alternative_list: case_statement_alternative_list . case_statement_alternative

    END   shift, and go to state 206
    WHEN  shift, and go to state 207

    case_statement_alternative  go to state 208


state 180

   60 if_statement: IF @7 '(' expression . ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF ';'

    ')'  shift, and go to state 209


state 181

    4 actual_parameter_list: actual_parameter_list . ',' expression
    7 actual_parameter_part: '(' $@2 actual_parameter_list . ')'

    ','  shift, and go to state 210
    ')'  shift, and go to state 211


state 182

    3 actual_parameter_list: expression .

    $default  reduce using rule 3 (actual_parameter_list)


state 183

   61 indexed_component: IDENTIFIER '[' expression expression_list . ']'

    ']'  shift, and go to state 212


state 184

   86 primary: '(' expression ')' .

    $default  reduce using rule 86 (primary)


state 185

   48 factor: primary POWER_OP primary .

    $default  reduce using rule 48 (factor)


state 186

  113 simple_expression_: simple_expression_ . '+' simple_expression_
  113                   | simple_expression_ '+' simple_expression_ .  [AND, OR, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', ';', ',', ')', ']', '=', '<', '>']
  114                   | simple_expression_ . '-' simple_expression_

    '-'  shift, and go to state 146

    $default  reduce using rule 113 (simple_expression_)

    Conflict between rule 113 and token '+' resolved as reduce (%left '+').
    Conflict between rule 113 and token '-' resolved as shift ('+' < '-').


state 187

  113 simple_expression_: simple_expression_ . '+' simple_expression_
  114                   | simple_expression_ . '-' simple_expression_
  114                   | simple_expression_ '-' simple_expression_ .  [AND, OR, NOT_EQUAL_OP, GREATER_EQUAL_OP, LESSER_EQUAL_OP, '+', '-', ';', ',', ')', ']', '=', '<', '>']

    $default  reduce using rule 114 (simple_expression_)

    Conflict between rule 114 and token '+' resolved as reduce ('+' < '-').
    Conflict between rule 114 and token '-' resolved as reduce (%left '-').


state 188

  127 term: term multiplying_operator factor .

    $default  reduce using rule 127 (term)


state 189

   66 loop_statement: WHILE @10 '(' expression . ')' $@11 LOOP sequence_of_statements END LOOP ';'

    ')'  shift, and go to state 213


state 190

   88 procedure_call_statement: PUT '(' STRING_LITERAL ')' . ';'

    ';'  shift, and go to state 214


state 191

   89 procedure_call_statement: PUT '(' variable ')' . ';'

    ';'  shift, and go to state 215


state 192

   90 procedure_call_statement: GET '(' variable ')' . ';'

    ';'  shift, and go to state 216


state 193

    2 main: PROCEDURE IDENTIFIER IS declarative_part BEGIN_ $@1 sequence_of_statements END IDENTIFIER ';' .

    $default  reduce using rule 2 (main)


state 194

   11 assignment_statement: variable ASSIGNMENT_OP expression ';' .

    $default  reduce using rule 11 (assignment_statement)


state 195

  122 subprogram_body: subprogram_body_ declarative_part BEGIN_ sequence_of_statements END IDENTIFIER ';' .

    $default  reduce using rule 122 (subprogram_body)


state 196

   68 mode: IN OUT .

    $default  reduce using rule 68 (mode)


state 197

    9 assign_expression: . ASSIGNMENT_OP expression
   10                  | .  [';', ')']
   75 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition . assign_expression

    ASSIGNMENT_OP  shift, and go to state 125

    $default  reduce using rule 10 (assign_expression)

    assign_expression  go to state 217


state 198

   45 expression_list: . ',' expression expression_list
   45                | ',' expression . expression_list
   46                | .  [')', ']']

    ','  shift, and go to state 167

    $default  reduce using rule 46 (expression_list)

    expression_list  go to state 218


state 199

    8 array_type_definition: ARRAY '(' expression expression_list ')' . OF type_definition

    OF  shift, and go to state 219


state 200

   62 logical_operator: AND .

    $default  reduce using rule 62 (logical_operator)


state 201

   63 logical_operator: OR .

    $default  reduce using rule 63 (logical_operator)


state 202

   96 $@12: .
   98 relation_list: logical_operator . $@12 relation @13 relation_list

    $default  reduce using rule 96 ($@12)

    $@12  go to state 220


state 203

   44 expression: relation @6 relation_list .

    $default  reduce using rule 44 (expression)


state 204

   95 relation: simple_expression relational_operator simple_expression .

    $default  reduce using rule 95 (relation)


state 205

    9 assign_expression: . ASSIGNMENT_OP expression
   10                  | .  [';']
   16 component_item: IDENTIFIER identifier_list ':' type_definition . assign_expression ';'

    ASSIGNMENT_OP  shift, and go to state 125

    $default  reduce using rule 10 (assign_expression)

    assign_expression  go to state 221


state 206

   12 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END . CASE ';'

    CASE  shift, and go to state 222


state 207

   13 case_statement_alternative: WHEN . discrete_choice_list ARROW sequence_of_statements
   31 discrete_choice: . primary
   32                | . OTHERS
   33 discrete_choice_list: . discrete_choice_list '|' discrete_choice
   34                     | . discrete_choice
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
  108 selected_component: . variable '.' IDENTIFIER
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NULL_              shift, and go to state 95
    OTHERS             shift, and go to state 223
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    discrete_choice       go to state 224
    discrete_choice_list  go to state 225
    function_call         go to state 106
    indexed_component     go to state 66
    primary               go to state 226
    selected_component    go to state 71
    variable              go to state 112


state 208

   14 case_statement_alternative_list: case_statement_alternative_list case_statement_alternative .

    $default  reduce using rule 14 (case_statement_alternative_list)


state 209

   58 $@8: .
   60 if_statement: IF @7 '(' expression ')' . $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF ';'

    $default  reduce using rule 58 ($@8)

    $@8  go to state 227


state 210

    4 actual_parameter_list: actual_parameter_list ',' . expression
   44 expression: . relation @6 relation_list
   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
   94 relation: . simple_expression
   95         | . simple_expression relational_operator simple_expression
  108 selected_component: . variable '.' IDENTIFIER
  111 simple_expression: . unary_adding_operator simple_expression_
  112                  | . simple_expression_
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  136 unary_adding_operator: . '+'
  137                      | . '-'
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    '+'                shift, and go to state 96
    '-'                shift, and go to state 97
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    expression             go to state 228
    factor                 go to state 105
    function_call          go to state 106
    indexed_component      go to state 66
    primary                go to state 107
    relation               go to state 128
    selected_component     go to state 71
    simple_expression      go to state 129
    simple_expression_     go to state 109
    term                   go to state 110
    unary_adding_operator  go to state 111
    variable               go to state 112


state 211

    7 actual_parameter_part: '(' $@2 actual_parameter_list ')' .

    $default  reduce using rule 7 (actual_parameter_part)


state 212

   61 indexed_component: IDENTIFIER '[' expression expression_list ']' .

    $default  reduce using rule 61 (indexed_component)


state 213

   65 $@11: .
   66 loop_statement: WHILE @10 '(' expression ')' . $@11 LOOP sequence_of_statements END LOOP ';'

    $default  reduce using rule 65 ($@11)

    $@11  go to state 229


state 214

   88 procedure_call_statement: PUT '(' STRING_LITERAL ')' ';' .

    $default  reduce using rule 88 (procedure_call_statement)


state 215

   89 procedure_call_statement: PUT '(' variable ')' ';' .

    $default  reduce using rule 89 (procedure_call_statement)


state 216

   90 procedure_call_statement: GET '(' variable ')' ';' .

    $default  reduce using rule 90 (procedure_call_statement)


state 217

   75 parameter_specification: IDENTIFIER identifier_list ':' mode type_definition assign_expression .

    $default  reduce using rule 75 (parameter_specification)


state 218

   45 expression_list: ',' expression expression_list .

    $default  reduce using rule 45 (expression_list)


state 219

    8 array_type_definition: . ARRAY '(' expression expression_list ')' OF type_definition
    8                      | ARRAY '(' expression expression_list ')' OF . type_definition
   93 record_type_definition: . RECORD component_list END RECORD
  129 type_definition: . INTEGER_TYPE
  130                | . REAL_TYPE
  131                | . CHARACTER_TYPE
  132                | . BOOLEAN_TYPE
  133                | . array_type_definition
  134                | . record_type_definition
  135                | . IDENTIFIER

    ARRAY           shift, and go to state 43
    IDENTIFIER      shift, and go to state 44
    RECORD          shift, and go to state 45
    INTEGER_TYPE    shift, and go to state 46
    REAL_TYPE       shift, and go to state 47
    CHARACTER_TYPE  shift, and go to state 48
    BOOLEAN_TYPE    shift, and go to state 49

    array_type_definition   go to state 50
    record_type_definition  go to state 51
    type_definition         go to state 230


state 220

   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
   94 relation: . simple_expression
   95         | . simple_expression relational_operator simple_expression
   98 relation_list: logical_operator $@12 . relation @13 relation_list
  108 selected_component: . variable '.' IDENTIFIER
  111 simple_expression: . unary_adding_operator simple_expression_
  112                  | . simple_expression_
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  136 unary_adding_operator: . '+'
  137                      | . '-'
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    '+'                shift, and go to state 96
    '-'                shift, and go to state 97
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    factor                 go to state 105
    function_call          go to state 106
    indexed_component      go to state 66
    primary                go to state 107
    relation               go to state 231
    selected_component     go to state 71
    simple_expression      go to state 129
    simple_expression_     go to state 109
    term                   go to state 110
    unary_adding_operator  go to state 111
    variable               go to state 112


state 221

   16 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression . ';'

    ';'  shift, and go to state 232


state 222

   12 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE . ';'

    ';'  shift, and go to state 233


state 223

   32 discrete_choice: OTHERS .

    $default  reduce using rule 32 (discrete_choice)


state 224

   34 discrete_choice_list: discrete_choice .

    $default  reduce using rule 34 (discrete_choice_list)


state 225

   13 case_statement_alternative: WHEN discrete_choice_list . ARROW sequence_of_statements
   33 discrete_choice_list: discrete_choice_list . '|' discrete_choice

    ARROW  shift, and go to state 234
    '|'    shift, and go to state 235


state 226

   31 discrete_choice: primary .

    $default  reduce using rule 31 (discrete_choice)


state 227

   60 if_statement: IF @7 '(' expression ')' $@8 . THEN sequence_of_statements $@9 elsif_list else_statement END IF ';'

    THEN  shift, and go to state 236


state 228

    4 actual_parameter_list: actual_parameter_list ',' expression .

    $default  reduce using rule 4 (actual_parameter_list)


state 229

   66 loop_statement: WHILE @10 '(' expression ')' $@11 . LOOP sequence_of_statements END LOOP ';'

    LOOP  shift, and go to state 237


state 230

    8 array_type_definition: ARRAY '(' expression expression_list ')' OF type_definition .

    $default  reduce using rule 8 (array_type_definition)


state 231

   97 @13: .
   98 relation_list: logical_operator $@12 relation . @13 relation_list

    $default  reduce using rule 97 (@13)

    @13  go to state 238


state 232

   16 component_item: IDENTIFIER identifier_list ':' type_definition assign_expression ';' .

    $default  reduce using rule 16 (component_item)


state 233

   12 case_statement: CASE IDENTIFIER IS case_statement_alternative_list END CASE ';' .

    $default  reduce using rule 12 (case_statement)


state 234

   11 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   12 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   13 case_statement_alternative: WHEN discrete_choice_list ARROW . sequence_of_statements
   19 compound_statement: . if_statement
   20                   | . loop_statement
   21                   | . case_statement
   22                   | . assignment_statement
   60 if_statement: . IF @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF ';'
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   66 loop_statement: . WHILE @10 '(' expression ')' $@11 LOOP sequence_of_statements END LOOP ';'
   73 null_statement: . NULL_ ';'
   87 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   88                         | . PUT '(' STRING_LITERAL ')' ';'
   89                         | . PUT '(' variable ')' ';'
   90                         | . GET '(' variable ')' ';'
   91                         | . NEW_LINE ';'
  106 return_statement: . RETURN ';'
  107                 | . RETURN simple_expression ';'
  108 selected_component: . variable '.' IDENTIFIER
  109 sequence_of_statements: . statement
  110                       | . statement sequence_of_statements
  116 simple_statement: . null_statement
  117                 | . return_statement
  118                 | . procedure_call_statement
  119 statement: . simple_statement
  120          | . compound_statement
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    CASE        shift, and go to state 53
    IF          shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    NULL_       shift, and go to state 56
    RETURN      shift, and go to state 57
    WHILE       shift, and go to state 58
    PUT         shift, and go to state 59
    GET         shift, and go to state 60
    NEW_LINE    shift, and go to state 61

    assignment_statement      go to state 62
    case_statement            go to state 63
    compound_statement        go to state 64
    if_statement              go to state 65
    indexed_component         go to state 66
    loop_statement            go to state 67
    null_statement            go to state 68
    procedure_call_statement  go to state 69
    return_statement          go to state 70
    selected_component        go to state 71
    sequence_of_statements    go to state 239
    simple_statement          go to state 73
    statement                 go to state 74
    variable                  go to state 75


state 235

   31 discrete_choice: . primary
   32                | . OTHERS
   33 discrete_choice_list: discrete_choice_list '|' . discrete_choice
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
  108 selected_component: . variable '.' IDENTIFIER
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NULL_              shift, and go to state 95
    OTHERS             shift, and go to state 223
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    discrete_choice     go to state 240
    function_call       go to state 106
    indexed_component   go to state 66
    primary             go to state 226
    selected_component  go to state 71
    variable            go to state 112


state 236

   11 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   12 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   19 compound_statement: . if_statement
   20                   | . loop_statement
   21                   | . case_statement
   22                   | . assignment_statement
   60 if_statement: . IF @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF ';'
   60             | IF @7 '(' expression ')' $@8 THEN . sequence_of_statements $@9 elsif_list else_statement END IF ';'
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   66 loop_statement: . WHILE @10 '(' expression ')' $@11 LOOP sequence_of_statements END LOOP ';'
   73 null_statement: . NULL_ ';'
   87 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   88                         | . PUT '(' STRING_LITERAL ')' ';'
   89                         | . PUT '(' variable ')' ';'
   90                         | . GET '(' variable ')' ';'
   91                         | . NEW_LINE ';'
  106 return_statement: . RETURN ';'
  107                 | . RETURN simple_expression ';'
  108 selected_component: . variable '.' IDENTIFIER
  109 sequence_of_statements: . statement
  110                       | . statement sequence_of_statements
  116 simple_statement: . null_statement
  117                 | . return_statement
  118                 | . procedure_call_statement
  119 statement: . simple_statement
  120          | . compound_statement
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    CASE        shift, and go to state 53
    IF          shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    NULL_       shift, and go to state 56
    RETURN      shift, and go to state 57
    WHILE       shift, and go to state 58
    PUT         shift, and go to state 59
    GET         shift, and go to state 60
    NEW_LINE    shift, and go to state 61

    assignment_statement      go to state 62
    case_statement            go to state 63
    compound_statement        go to state 64
    if_statement              go to state 65
    indexed_component         go to state 66
    loop_statement            go to state 67
    null_statement            go to state 68
    procedure_call_statement  go to state 69
    return_statement          go to state 70
    selected_component        go to state 71
    sequence_of_statements    go to state 241
    simple_statement          go to state 73
    statement                 go to state 74
    variable                  go to state 75


state 237

   11 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   12 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   19 compound_statement: . if_statement
   20                   | . loop_statement
   21                   | . case_statement
   22                   | . assignment_statement
   60 if_statement: . IF @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF ';'
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   66 loop_statement: . WHILE @10 '(' expression ')' $@11 LOOP sequence_of_statements END LOOP ';'
   66               | WHILE @10 '(' expression ')' $@11 LOOP . sequence_of_statements END LOOP ';'
   73 null_statement: . NULL_ ';'
   87 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   88                         | . PUT '(' STRING_LITERAL ')' ';'
   89                         | . PUT '(' variable ')' ';'
   90                         | . GET '(' variable ')' ';'
   91                         | . NEW_LINE ';'
  106 return_statement: . RETURN ';'
  107                 | . RETURN simple_expression ';'
  108 selected_component: . variable '.' IDENTIFIER
  109 sequence_of_statements: . statement
  110                       | . statement sequence_of_statements
  116 simple_statement: . null_statement
  117                 | . return_statement
  118                 | . procedure_call_statement
  119 statement: . simple_statement
  120          | . compound_statement
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    CASE        shift, and go to state 53
    IF          shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    NULL_       shift, and go to state 56
    RETURN      shift, and go to state 57
    WHILE       shift, and go to state 58
    PUT         shift, and go to state 59
    GET         shift, and go to state 60
    NEW_LINE    shift, and go to state 61

    assignment_statement      go to state 62
    case_statement            go to state 63
    compound_statement        go to state 64
    if_statement              go to state 65
    indexed_component         go to state 66
    loop_statement            go to state 67
    null_statement            go to state 68
    procedure_call_statement  go to state 69
    return_statement          go to state 70
    selected_component        go to state 71
    sequence_of_statements    go to state 242
    simple_statement          go to state 73
    statement                 go to state 74
    variable                  go to state 75


state 238

   62 logical_operator: . AND
   63                 | . OR
   98 relation_list: . logical_operator $@12 relation @13 relation_list
   98              | logical_operator $@12 relation @13 . relation_list
   99              | .  [';', ',', ')', ']']

    AND  shift, and go to state 200
    OR   shift, and go to state 201

    $default  reduce using rule 99 (relation_list)

    logical_operator  go to state 202
    relation_list     go to state 243


state 239

   13 case_statement_alternative: WHEN discrete_choice_list ARROW sequence_of_statements .

    $default  reduce using rule 13 (case_statement_alternative)


state 240

   33 discrete_choice_list: discrete_choice_list '|' discrete_choice .

    $default  reduce using rule 33 (discrete_choice_list)


state 241

   59 $@9: .
   60 if_statement: IF @7 '(' expression ')' $@8 THEN sequence_of_statements . $@9 elsif_list else_statement END IF ';'

    $default  reduce using rule 59 ($@9)

    $@9  go to state 244


state 242

   66 loop_statement: WHILE @10 '(' expression ')' $@11 LOOP sequence_of_statements . END LOOP ';'

    END  shift, and go to state 245


state 243

   98 relation_list: logical_operator $@12 relation @13 relation_list .

    $default  reduce using rule 98 (relation_list)


state 244

   35 elsif_list: . elsif_list elsif_statement
   36           | .
   60 if_statement: IF @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 . elsif_list else_statement END IF ';'

    $default  reduce using rule 36 (elsif_list)

    elsif_list  go to state 246


state 245

   66 loop_statement: WHILE @10 '(' expression ')' $@11 LOOP sequence_of_statements END . LOOP ';'

    LOOP  shift, and go to state 247


state 246

   35 elsif_list: elsif_list . elsif_statement
   38 else_statement: . ELSE $@3 sequence_of_statements
   39               | .  [END]
   42 elsif_statement: . ELSIF @4 '(' expression ')' $@5 THEN sequence_of_statements
   60 if_statement: IF @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list . else_statement END IF ';'

    ELSE   shift, and go to state 248
    ELSIF  shift, and go to state 249

    $default  reduce using rule 39 (else_statement)

    else_statement   go to state 250
    elsif_statement  go to state 251


state 247

   66 loop_statement: WHILE @10 '(' expression ')' $@11 LOOP sequence_of_statements END LOOP . ';'

    ';'  shift, and go to state 252


state 248

   37 $@3: .
   38 else_statement: ELSE . $@3 sequence_of_statements

    $default  reduce using rule 37 ($@3)

    $@3  go to state 253


state 249

   40 @4: .
   42 elsif_statement: ELSIF . @4 '(' expression ')' $@5 THEN sequence_of_statements

    $default  reduce using rule 40 (@4)

    @4  go to state 254


state 250

   60 if_statement: IF @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement . END IF ';'

    END  shift, and go to state 255


state 251

   35 elsif_list: elsif_list elsif_statement .

    $default  reduce using rule 35 (elsif_list)


state 252

   66 loop_statement: WHILE @10 '(' expression ')' $@11 LOOP sequence_of_statements END LOOP ';' .

    $default  reduce using rule 66 (loop_statement)


state 253

   11 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   12 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   19 compound_statement: . if_statement
   20                   | . loop_statement
   21                   | . case_statement
   22                   | . assignment_statement
   38 else_statement: ELSE $@3 . sequence_of_statements
   60 if_statement: . IF @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF ';'
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   66 loop_statement: . WHILE @10 '(' expression ')' $@11 LOOP sequence_of_statements END LOOP ';'
   73 null_statement: . NULL_ ';'
   87 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   88                         | . PUT '(' STRING_LITERAL ')' ';'
   89                         | . PUT '(' variable ')' ';'
   90                         | . GET '(' variable ')' ';'
   91                         | . NEW_LINE ';'
  106 return_statement: . RETURN ';'
  107                 | . RETURN simple_expression ';'
  108 selected_component: . variable '.' IDENTIFIER
  109 sequence_of_statements: . statement
  110                       | . statement sequence_of_statements
  116 simple_statement: . null_statement
  117                 | . return_statement
  118                 | . procedure_call_statement
  119 statement: . simple_statement
  120          | . compound_statement
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    CASE        shift, and go to state 53
    IF          shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    NULL_       shift, and go to state 56
    RETURN      shift, and go to state 57
    WHILE       shift, and go to state 58
    PUT         shift, and go to state 59
    GET         shift, and go to state 60
    NEW_LINE    shift, and go to state 61

    assignment_statement      go to state 62
    case_statement            go to state 63
    compound_statement        go to state 64
    if_statement              go to state 65
    indexed_component         go to state 66
    loop_statement            go to state 67
    null_statement            go to state 68
    procedure_call_statement  go to state 69
    return_statement          go to state 70
    selected_component        go to state 71
    sequence_of_statements    go to state 256
    simple_statement          go to state 73
    statement                 go to state 74
    variable                  go to state 75


state 254

   42 elsif_statement: ELSIF @4 . '(' expression ')' $@5 THEN sequence_of_statements

    '('  shift, and go to state 257


state 255

   60 if_statement: IF @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END . IF ';'

    IF  shift, and go to state 258


state 256

   38 else_statement: ELSE $@3 sequence_of_statements .

    $default  reduce using rule 38 (else_statement)


state 257

   42 elsif_statement: ELSIF @4 '(' . expression ')' $@5 THEN sequence_of_statements
   44 expression: . relation @6 relation_list
   47 factor: . primary
   48       | . primary POWER_OP primary
   49       | . NOT primary
   52 function_call: . IDENTIFIER actual_parameter_part
   53              | . IDENTIFIER LENGTH
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   78 primary: . INTEGER_LITERAL
   79        | . FLOAT_LITERAL
   80        | . CHARACTER_LITERAL
   81        | . BOOLEAN_LITERAL
   82        | . NULL_
   83        | . STRING_LITERAL
   84        | . variable
   85        | . function_call
   86        | . '(' expression ')'
   94 relation: . simple_expression
   95         | . simple_expression relational_operator simple_expression
  108 selected_component: . variable '.' IDENTIFIER
  111 simple_expression: . unary_adding_operator simple_expression_
  112                  | . simple_expression_
  113 simple_expression_: . simple_expression_ '+' simple_expression_
  114                   | . simple_expression_ '-' simple_expression_
  115                   | . term
  126 term: . factor
  127     | . term multiplying_operator factor
  136 unary_adding_operator: . '+'
  137                      | . '-'
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    IDENTIFIER         shift, and go to state 93
    NOT                shift, and go to state 94
    NULL_              shift, and go to state 95
    '+'                shift, and go to state 96
    '-'                shift, and go to state 97
    INTEGER_LITERAL    shift, and go to state 98
    FLOAT_LITERAL      shift, and go to state 99
    CHARACTER_LITERAL  shift, and go to state 100
    STRING_LITERAL     shift, and go to state 101
    BOOLEAN_LITERAL    shift, and go to state 102
    '('                shift, and go to state 104

    expression             go to state 259
    factor                 go to state 105
    function_call          go to state 106
    indexed_component      go to state 66
    primary                go to state 107
    relation               go to state 128
    selected_component     go to state 71
    simple_expression      go to state 129
    simple_expression_     go to state 109
    term                   go to state 110
    unary_adding_operator  go to state 111
    variable               go to state 112


state 258

   60 if_statement: IF @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF . ';'

    ';'  shift, and go to state 260


state 259

   42 elsif_statement: ELSIF @4 '(' expression . ')' $@5 THEN sequence_of_statements

    ')'  shift, and go to state 261


state 260

   60 if_statement: IF @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF ';' .

    $default  reduce using rule 60 (if_statement)


state 261

   41 $@5: .
   42 elsif_statement: ELSIF @4 '(' expression ')' . $@5 THEN sequence_of_statements

    $default  reduce using rule 41 ($@5)

    $@5  go to state 262


state 262

   42 elsif_statement: ELSIF @4 '(' expression ')' $@5 . THEN sequence_of_statements

    THEN  shift, and go to state 263


state 263

   11 assignment_statement: . variable ASSIGNMENT_OP expression ';'
   12 case_statement: . CASE IDENTIFIER IS case_statement_alternative_list END CASE ';'
   19 compound_statement: . if_statement
   20                   | . loop_statement
   21                   | . case_statement
   22                   | . assignment_statement
   42 elsif_statement: ELSIF @4 '(' expression ')' $@5 THEN . sequence_of_statements
   60 if_statement: . IF @7 '(' expression ')' $@8 THEN sequence_of_statements $@9 elsif_list else_statement END IF ';'
   61 indexed_component: . IDENTIFIER '[' expression expression_list ']'
   66 loop_statement: . WHILE @10 '(' expression ')' $@11 LOOP sequence_of_statements END LOOP ';'
   73 null_statement: . NULL_ ';'
   87 procedure_call_statement: . IDENTIFIER actual_parameter_part ';'
   88                         | . PUT '(' STRING_LITERAL ')' ';'
   89                         | . PUT '(' variable ')' ';'
   90                         | . GET '(' variable ')' ';'
   91                         | . NEW_LINE ';'
  106 return_statement: . RETURN ';'
  107                 | . RETURN simple_expression ';'
  108 selected_component: . variable '.' IDENTIFIER
  109 sequence_of_statements: . statement
  110                       | . statement sequence_of_statements
  116 simple_statement: . null_statement
  117                 | . return_statement
  118                 | . procedure_call_statement
  119 statement: . simple_statement
  120          | . compound_statement
  138 variable: . IDENTIFIER
  139         | . indexed_component
  140         | . selected_component

    CASE        shift, and go to state 53
    IF          shift, and go to state 54
    IDENTIFIER  shift, and go to state 55
    NULL_       shift, and go to state 56
    RETURN      shift, and go to state 57
    WHILE       shift, and go to state 58
    PUT         shift, and go to state 59
    GET         shift, and go to state 60
    NEW_LINE    shift, and go to state 61

    assignment_statement      go to state 62
    case_statement            go to state 63
    compound_statement        go to state 64
    if_statement              go to state 65
    indexed_component         go to state 66
    loop_statement            go to state 67
    null_statement            go to state 68
    procedure_call_statement  go to state 69
    return_statement          go to state 70
    selected_component        go to state 71
    sequence_of_statements    go to state 264
    simple_statement          go to state 73
    statement                 go to state 74
    variable                  go to state 75


state 264

   42 elsif_statement: ELSIF @4 '(' expression ')' $@5 THEN sequence_of_statements .

    $default  reduce using rule 42 (elsif_statement)
